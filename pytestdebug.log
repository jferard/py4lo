versions pytest-6.2.5, py-1.10.0, python-3.10.6.final.0
cwd=/home/jferard/prog/python/py4lo
args=('--debug', '--cov-report', 'term-missing', '--ignore=examples', '--cov=py4lo', '--cov=lib', '--cov-report=xml')

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x7f6ea7780b20>
    pytest_plugin_registered [hook]
        plugin: <Session py4lo exitstatus='<UNSET>' testsfailed=0 testscollected=0>
        manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x7f6ea7780b20>
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7f6ea6d2c520>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7f6ea6d2c640>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: faulthandler [assertion]
      pytest_configure [hook]
          config: <_pytest.config.Config object at 0x7f6ea7780b20>
      finish pytest_configure --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.faulthandler.FaultHandlerHooks object at 0x7f6ea6d2c6d0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: pdb [assertion]
    early skip of rewriting module: cmd [assertion]
    early skip of rewriting module: code [assertion]
    early skip of rewriting module: codeop [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x7f6ea7780b20>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/usr/lib/python3/dist-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/usr/lib/python3/dist-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/usr/lib/python3/dist-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/usr/lib/python3/dist-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/usr/lib/python3/dist-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/usr/lib/python3/dist-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/usr/lib/python3/dist-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/usr/lib/python3/dist-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/usr/lib/python3/dist-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/usr/lib/python3/dist-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/usr/lib/python3/dist-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/usr/lib/python3/dist-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/usr/lib/python3/dist-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/usr/lib/python3/dist-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/usr/lib/python3/dist-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/usr/lib/python3/dist-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/usr/lib/python3/dist-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/usr/lib/python3/dist-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/usr/lib/python3/dist-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/usr/lib/python3/dist-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/usr/lib/python3/dist-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/usr/lib/python3/dist-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/usr/lib/python3/dist-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/usr/lib/python3/dist-packages/_pytest/stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/usr/lib/python3/dist-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/usr/lib/python3/dist-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/usr/lib/python3/dist-packages/_pytest/reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from '/usr/lib/python3/dist-packages/_pytest/unraisableexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from '/usr/lib/python3/dist-packages/_pytest/threadexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/usr/lib/python3/dist-packages/_pytest/faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cov.plugin' from '/home/jferard/.local/lib/python3.10/site-packages/pytest_cov/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=6 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=7 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=8 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=3 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='UTF-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <pytest_cov.plugin.CovPlugin object at 0x7f6ea6e50fa0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7f6ea6d2c520>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7f6ea6d2c640>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.faulthandler.FaultHandlerHooks object at 0x7f6ea6d2c6d0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x7f6ea6d2cbe0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x7f6ea6d2f010>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x7f6ea7780b20>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/usr/lib/python3/dist-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/usr/lib/python3/dist-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/usr/lib/python3/dist-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/usr/lib/python3/dist-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/usr/lib/python3/dist-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/usr/lib/python3/dist-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/usr/lib/python3/dist-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/usr/lib/python3/dist-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/usr/lib/python3/dist-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/usr/lib/python3/dist-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/usr/lib/python3/dist-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/usr/lib/python3/dist-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/usr/lib/python3/dist-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/usr/lib/python3/dist-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/usr/lib/python3/dist-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/usr/lib/python3/dist-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/usr/lib/python3/dist-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/usr/lib/python3/dist-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/usr/lib/python3/dist-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/usr/lib/python3/dist-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/usr/lib/python3/dist-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/usr/lib/python3/dist-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/usr/lib/python3/dist-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/usr/lib/python3/dist-packages/_pytest/stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/usr/lib/python3/dist-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/usr/lib/python3/dist-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/usr/lib/python3/dist-packages/_pytest/reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from '/usr/lib/python3/dist-packages/_pytest/unraisableexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from '/usr/lib/python3/dist-packages/_pytest/threadexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/usr/lib/python3/dist-packages/_pytest/faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cov.plugin' from '/home/jferard/.local/lib/python3.10/site-packages/pytest_cov/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=6 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=7 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=8 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=3 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='UTF-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <pytest_cov.plugin.CovPlugin object at 0x7f6ea6e50fa0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7f6ea6d2c520>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7f6ea6d2c640>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.faulthandler.FaultHandlerHooks object at 0x7f6ea6d2c6d0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x7f6ea6d2cbe0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x7f6ea6d2f010>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x7f6ea6d2f2e0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f6ea81536d0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x7f6ea7780b20>
          startdir: /home/jferard/prog/python/py4lo
      early skip of rewriting module: email.parser [assertion]
      early skip of rewriting module: email.feedparser [assertion]
      finish pytest_report_header --> [['rootdir: /home/jferard/prog/python/py4lo', 'plugins: cov-3.0.0'], ['using: pytest-6.2.5 pylib-1.10.0', 'setuptools registered plugins:', '  pytest-cov-3.0.0 at /home/jferard/.local/lib/python3.10/site-packages/pytest_cov/plugin.py']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
    perform_collect <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0> ['/home/jferard/prog/python/py4lo'] [collection]
        pytest_collectstart [hook]
            collector: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        processing argument (local('/home/jferard/prog/python/py4lo'), []) [collection]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/.coveragerc
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/.coveragerc
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            early skip of rewriting module: py._code [assertion]
            early skip of rewriting module: py._code.code [assertion]
            early skip of rewriting module: repr [assertion]
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/.gitignore
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/.gitignore
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/.travis.yml
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/.travis.yml
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/LICENSE.txt
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/LICENSE.txt
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/MANIFEST.in
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/MANIFEST.in
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/README.rst
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/README.rst
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/coverage.xml
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/coverage.xml
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/default-py4lo.toml
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/default-py4lo.toml
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/py4lo.log
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/py4lo.log
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/pytestdebug.log
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/pytestdebug.log
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/requirements.txt
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/requirements.txt
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/setup.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/setup.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/.cache
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/.git
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/.github
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/.idea
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/.pytest_cache
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/.ruff_cache
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/build
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/dist
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/examples
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> True [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/history
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/history/history.db
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/history/history.db
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/inc
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/inc/debug.ods
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/inc/debug.ods
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/inc/py4lo.xml.tpl
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/inc/py4lo.xml.tpl
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/inc/py4lo_bootstrap.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/inc/py4lo_bootstrap.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/inc/py4lo_import.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/inc/py4lo_import.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/inc/script-lb.xml
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/inc/script-lb.xml
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/inc/script-lc.xml
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/inc/script-lc.xml
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/lib
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/lib/mock_constants.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/lib/mock_constants.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/lib/py4lo_base.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/lib/py4lo_base.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/lib/py4lo_commons.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/lib/py4lo_commons.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/lib/py4lo_dialogs.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/lib/py4lo_dialogs.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/lib/py4lo_helper.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/lib/py4lo_helper.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/lib/py4lo_io.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/lib/py4lo_io.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/lib/py4lo_ods.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/lib/py4lo_ods.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/lib/py4lo_sqlite3.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/lib/py4lo_sqlite3.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/lib/py4lo_typing.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/lib/py4lo_typing.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/py4lo
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/.coverage
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/.coverage
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/__main__.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/__main__.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/branch_processor.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/branch_processor.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/comparator.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/comparator.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/directive_processor.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/directive_processor.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/main.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/main.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/script_processor.pyc
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/script_processor.pyc
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/script_set_processor.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/script_set_processor.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/toml_helper.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/toml_helper.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/tools.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/tools.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/zip_updater.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/zip_updater.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/callbacks
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/callbacks/__init__.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/callbacks/__init__.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/py4lo/callbacks/__init__.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package callbacks> [hook]
            finish pytest_collect_file --> [<Package callbacks>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/commands
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/commands/__init__.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/commands/__init__.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/py4lo/commands/__init__.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package commands> [hook]
            finish pytest_collect_file --> [<Package commands>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/core
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/core/__init__.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/core/__init__.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/py4lo/core/__init__.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package core> [hook]
            finish pytest_collect_file --> [<Package core>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/directives
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/directives/__init__.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/py4lo/directives/__init__.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/py4lo/directives/__init__.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package directives> [hook]
            finish pytest_collect_file --> [<Package directives>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/py4lo.egg-info
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/py4lo.egg-info/PKG-INFO
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/py4lo.egg-info/PKG-INFO
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/py4lo.egg-info/SOURCES.txt
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/py4lo.egg-info/SOURCES.txt
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/py4lo.egg-info/dependency_links.txt
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/py4lo.egg-info/dependency_links.txt
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/py4lo.egg-info/entry_points.txt
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/py4lo.egg-info/entry_points.txt
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/py4lo.egg-info/top_level.txt
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/py4lo.egg-info/top_level.txt
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/target
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/test_helper.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/test_helper.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/test_helper.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/test_helper.py> [hook]
            finish pytest_collect_file --> [<Module test/test_helper.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/lib
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/lib/test.sqlite3
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/lib/test.sqlite3
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/lib/test_py4lo_commons.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/lib/test_py4lo_commons.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/lib/test_py4lo_commons.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/lib/test_py4lo_commons.py> [hook]
            finish pytest_collect_file --> [<Module test/lib/test_py4lo_commons.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/lib/test_py4lo_dialogs.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/lib/test_py4lo_dialogs.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/lib/test_py4lo_dialogs.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/lib/test_py4lo_dialogs.py> [hook]
            finish pytest_collect_file --> [<Module test/lib/test_py4lo_dialogs.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/lib/test_py4lo_helper.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/lib/test_py4lo_helper.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/lib/test_py4lo_helper.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/lib/test_py4lo_helper.py> [hook]
            finish pytest_collect_file --> [<Module test/lib/test_py4lo_helper.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/lib/test_py4lo_io.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/lib/test_py4lo_io.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/lib/test_py4lo_io.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/lib/test_py4lo_io.py> [hook]
            finish pytest_collect_file --> [<Module test/lib/test_py4lo_io.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/lib/test_py4lo_ods.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/lib/test_py4lo_ods.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/lib/test_py4lo_ods.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/lib/test_py4lo_ods.py> [hook]
            finish pytest_collect_file --> [<Module test/lib/test_py4lo_ods.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/lib/test_py4lo_sqlite3.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/lib/test_py4lo_sqlite3.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/lib/test_py4lo_sqlite3.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/lib/test_py4lo_sqlite3.py> [hook]
            finish pytest_collect_file --> [<Module test/lib/test_py4lo_sqlite3.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/lib/tst_env.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/lib/tst_env.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/branch_processor_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/branch_processor_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/branch_processor_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/branch_processor_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/branch_processor_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/comparator_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/comparator_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/comparator_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/comparator_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/comparator_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/directive_processor_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/directive_processor_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/directive_processor_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/directive_processor_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/directive_processor_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/main_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/main_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/main_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/main_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/main_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/script_parser_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/script_parser_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/script_parser_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/script_parser_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/script_parser_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/script_processor_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/script_processor_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/script_processor_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/script_processor_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/script_processor_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/script_set_processor_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/script_set_processor_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/script_set_processor_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/script_set_processor_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/script_set_processor_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/toml_helper_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/toml_helper_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/toml_helper_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/toml_helper_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/toml_helper_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/tools_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/tools_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/tools_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/tools_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/tools_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/tst_env.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/tst_env.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/zip_updater_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/zip_updater_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/zip_updater_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/zip_updater_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/zip_updater_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/.pytest_cache
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/callbacks
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/callbacks/add_assets_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/callbacks/add_assets_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/callbacks/add_assets_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/callbacks/add_assets_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/callbacks/add_assets_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/callbacks/add_debug_content_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/callbacks/add_debug_content_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/callbacks/add_debug_content_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/callbacks/add_debug_content_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/callbacks/add_debug_content_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/callbacks/add_readme_with_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/callbacks/add_readme_with_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/callbacks/add_readme_with_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/callbacks/add_readme_with_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/callbacks/add_readme_with_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/callbacks/add_scripts_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/callbacks/add_scripts_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/callbacks/add_scripts_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/callbacks/add_scripts_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/callbacks/add_scripts_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/callbacks/ignore_item_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/callbacks/ignore_item_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/callbacks/ignore_item_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/callbacks/ignore_item_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/callbacks/ignore_item_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/callbacks/rewrite_manifest_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/callbacks/rewrite_manifest_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/callbacks/rewrite_manifest_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/callbacks/rewrite_manifest_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/callbacks/rewrite_manifest_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/commands
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/commands/command_executor_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/commands/command_executor_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/commands/command_executor_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/commands/command_executor_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/commands/command_executor_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/commands/commands_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/commands/commands_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/commands/commands_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/commands/commands_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/commands/commands_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/commands/debug_command_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/commands/debug_command_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/commands/debug_command_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/commands/debug_command_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/commands/debug_command_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/commands/help_command_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/commands/help_command_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/commands/help_command_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/commands/help_command_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/commands/help_command_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/commands/init_command_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/commands/init_command_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/commands/init_command_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/commands/init_command_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/commands/init_command_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/commands/ods_updater_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/commands/ods_updater_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/commands/ods_updater_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/commands/ods_updater_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/commands/ods_updater_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/commands/run_command_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/commands/run_command_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/commands/run_command_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/commands/run_command_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/commands/run_command_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/commands/test_command_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/commands/test_command_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/commands/test_command_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/commands/test_command_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/commands/test_command_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/commands/tst_env.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/commands/tst_env.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/commands/update_command_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/commands/update_command_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/commands/update_command_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/commands/update_command_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/commands/update_command_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/core
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/core/properties_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/core/properties_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/core/properties_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/core/properties_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/core/properties_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/core/source_dest_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/core/source_dest_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/core/source_dest_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/core/source_dest_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/core/source_dest_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/core/tst_env.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/core/tst_env.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/directives
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/directives/directive_provider_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/directives/directive_provider_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/directives/directive_provider_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/directives/directive_provider_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/directives/directive_provider_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/directives/directive_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/directives/directive_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/directives/directive_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/directives/directive_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/directives/directive_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/directives/embed_lib_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/directives/embed_lib_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/directives/embed_lib_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/directives/embed_lib_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/directives/embed_lib_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/directives/embed_script_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/directives/embed_script_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/directives/embed_script_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/directives/embed_script_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/directives/embed_script_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/directives/env.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/directives/env.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/directives/include_test.py
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/directives/include_test.py
                parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/jferard/prog/python/py4lo/test/py4lo/directives/include_test.py
                  parent: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test/py4lo/directives/include_test.py> [hook]
            finish pytest_collect_file --> [<Module test/py4lo/directives/include_test.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/test/py4lo/target
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/jferard/prog/python/py4lo/venv
                config: <_pytest.config.Config object at 0x7f6ea7780b20>
            finish pytest_ignore_collect --> True [hook]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=43 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=43 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Package callbacks> [collection]
      pytest_collectstart [hook]
          collector: <Package callbacks>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package callbacks>
        pytest_ignore_collect [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/callbacks/add_assets.py
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/callbacks/add_assets.py
            parent: <Package callbacks>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/callbacks/add_debug_content.py
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/callbacks/add_debug_content.py
            parent: <Package callbacks>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/callbacks/add_readme_with.py
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/callbacks/add_readme_with.py
            parent: <Package callbacks>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/callbacks/add_scripts.py
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/callbacks/add_scripts.py
            parent: <Package callbacks>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/callbacks/callback.py
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/callbacks/callback.py
            parent: <Package callbacks>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/callbacks/ignore_item.py
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/callbacks/ignore_item.py
            parent: <Package callbacks>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/callbacks/rewrite_manifest.py
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/callbacks/rewrite_manifest.py
            parent: <Package callbacks>
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'py4lo/callbacks/__init__.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'py4lo/callbacks/__init__.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package commands> [collection]
      pytest_collectstart [hook]
          collector: <Package commands>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package commands>
        pytest_ignore_collect [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/commands/command.py
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/commands/command.py
            parent: <Package commands>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/commands/command_executor.py
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/commands/command_executor.py
            parent: <Package commands>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/commands/debug_command.py
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/commands/debug_command.py
            parent: <Package commands>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/commands/help_command.py
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/commands/help_command.py
            parent: <Package commands>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/commands/init_command.py
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/commands/init_command.py
            parent: <Package commands>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/commands/ods_updater.py
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/commands/ods_updater.py
            parent: <Package commands>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/commands/real_command_factory_by_name.py
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/commands/real_command_factory_by_name.py
            parent: <Package commands>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/commands/real_command_factory_by_name.pyc
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/commands/real_command_factory_by_name.pyc
            parent: <Package commands>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/commands/run_command.py
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/commands/run_command.py
            parent: <Package commands>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/commands/test_command.py
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/commands/test_command.py
            parent: <Package commands>
          pytest_pycollect_makemodule [hook]
              path: /home/jferard/prog/python/py4lo/py4lo/commands/test_command.py
              parent: <Package commands>
          finish pytest_pycollect_makemodule --> <Module test_command.py> [hook]
        finish pytest_collect_file --> [<Module test_command.py>] [hook]
        pytest_ignore_collect [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/commands/update_command.py
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/commands/update_command.py
            parent: <Package commands>
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'py4lo/commands/__init__.py' lenresult=1 outcome='passed'> [hook]
    genitems <Module test_command.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_command.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_command.py>
      early skip of rewriting module: commands [assertion]
      early skip of rewriting module: commands.command [assertion]
      early skip of rewriting module: core [assertion]
      early skip of rewriting module: core.properties [assertion]
      early skip of rewriting module: callbacks [assertion]
      early skip of rewriting module: callbacks.callback [assertion]
      early skip of rewriting module: callbacks.add_readme_with [assertion]
      early skip of rewriting module: callbacks.add_assets [assertion]
      early skip of rewriting module: core.asset [assertion]
      early skip of rewriting module: callbacks.add_debug_content [assertion]
      early skip of rewriting module: callbacks.add_scripts [assertion]
      early skip of rewriting module: core.script [assertion]
      early skip of rewriting module: callbacks.ignore_item [assertion]
      early skip of rewriting module: callbacks.rewrite_manifest [assertion]
      early skip of rewriting module: core.source_dest [assertion]
      early skip of rewriting module: toml_helper [assertion]
      early skip of rewriting module: toml [assertion]
      early skip of rewriting module: toml.encoder [assertion]
      early skip of rewriting module: toml.decoder [assertion]
      early skip of rewriting module: toml.tz [assertion]
      early skip of rewriting module: tools [assertion]
      early skip of rewriting module: commands.command_executor [assertion]
      early skip of rewriting module: commands.real_command_factory_by_name [assertion]
      early skip of rewriting module: commands.debug_command [assertion]
      early skip of rewriting module: zip_updater [assertion]
      early skip of rewriting module: commands.ods_updater [assertion]
      early skip of rewriting module: directives [assertion]
      early skip of rewriting module: directives.directive_provider [assertion]
      early skip of rewriting module: directives.directive [assertion]
      early skip of rewriting module: directives.embed_script [assertion]
      early skip of rewriting module: directives.embed_lib [assertion]
      early skip of rewriting module: directives.include [assertion]
      early skip of rewriting module: directives.entry [assertion]
      early skip of rewriting module: script_set_processor [assertion]
      early skip of rewriting module: py_compile [assertion]
      early skip of rewriting module: directive_processor [assertion]
      early skip of rewriting module: branch_processor [assertion]
      early skip of rewriting module: comparator [assertion]
      find_module called for: commands.test_command [assertion]
      matched test file '/home/jferard/prog/python/py4lo/py4lo/commands/test_command.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/py4lo/commands/test_command.py [assertion]
      early skip of rewriting module: commands.init_command [assertion]
      early skip of rewriting module: commands.run_command [assertion]
      early skip of rewriting module: commands.update_command [assertion]
      early skip of rewriting module: commands.help_command [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_command.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_command.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_command.py>
            name: os
            obj: <module 'os' from '/usr/lib/python3.10/os.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_command.py>
            name: subprocess
            obj: <module 'subprocess' from '/usr/lib/python3.10/subprocess.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_command.py>
            name: sys
            obj: <module 'sys' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_command.py>
            name: Logger
            obj: <class 'logging.Logger'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_command.py>
            name: Path
            obj: <class 'pathlib.Path'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_command.py>
            name: Dict
            obj: typing.Dict
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_command.py>
            name: Callable
            obj: typing.Callable
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_command.py>
            name: Iterator
            obj: typing.Iterator
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_command.py>
            name: Command
            obj: <class 'commands.command.Command'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_command.py>
            name: CommandExecutor
            obj: <class 'commands.command_executor.CommandExecutor'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_command.py>
            name: PropertiesProvider
            obj: <class 'core.properties.PropertiesProvider'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_command.py>
            name: Sources
            obj: <class 'core.source_dest.Sources'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_command.py>
            name: TestCommand
            obj: <class 'commands.test_command.TestCommand'>
        finish pytest_pycollect_makeitem --> <Class TestCommand> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_command.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'py4lo/commands/test_command.py' lenresult=1 outcome='passed'> [hook]
    genitems <Class TestCommand> [collection]
      pytest_collectstart [hook]
          collector: <Class TestCommand>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class TestCommand>
      finish pytest_make_collect_report --> <CollectReport 'py4lo/commands/test_command.py::TestCommand' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'py4lo/commands/test_command.py::TestCommand' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'py4lo/commands/test_command.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'py4lo/commands/__init__.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package core> [collection]
      pytest_collectstart [hook]
          collector: <Package core>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package core>
        pytest_ignore_collect [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/core/asset.py
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/core/asset.py
            parent: <Package core>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/core/properties.py
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/core/properties.py
            parent: <Package core>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/core/script.py
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/core/script.py
            parent: <Package core>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/core/source_dest.py
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/core/source_dest.py
            parent: <Package core>
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'py4lo/core/__init__.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'py4lo/core/__init__.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package directives> [collection]
      pytest_collectstart [hook]
          collector: <Package directives>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package directives>
        pytest_ignore_collect [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/directives/directive.py
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/directives/directive.py
            parent: <Package directives>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/directives/directive_provider.py
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/directives/directive_provider.py
            parent: <Package directives>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/directives/embed_lib.py
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/directives/embed_lib.py
            parent: <Package directives>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/directives/embed_script.py
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/directives/embed_script.py
            parent: <Package directives>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/directives/entry.py
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/directives/entry.py
            parent: <Package directives>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/directives/include.py
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/jferard/prog/python/py4lo/py4lo/directives/include.py
            parent: <Package directives>
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'py4lo/directives/__init__.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'py4lo/directives/__init__.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/test_helper.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/test_helper.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/test_helper.py>
      find_module called for: test_helper [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/test_helper.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/test_helper.py [assertion]
      early skip of rewriting module: unittest [assertion]
      early skip of rewriting module: unittest.result [assertion]
      early skip of rewriting module: unittest.util [assertion]
      early skip of rewriting module: unittest.case [assertion]
      early skip of rewriting module: difflib [assertion]
      early skip of rewriting module: heapq [assertion]
      early skip of rewriting module: _heapq [assertion]
      early skip of rewriting module: unittest.suite [assertion]
      early skip of rewriting module: unittest.loader [assertion]
      early skip of rewriting module: unittest.main [assertion]
      early skip of rewriting module: unittest.runner [assertion]
      early skip of rewriting module: unittest.signals [assertion]
      early skip of rewriting module: unittest.mock [assertion]
      early skip of rewriting module: asyncio [assertion]
      early skip of rewriting module: asyncio.base_events [assertion]
      early skip of rewriting module: concurrent [assertion]
      early skip of rewriting module: concurrent.futures [assertion]
      early skip of rewriting module: concurrent.futures._base [assertion]
      early skip of rewriting module: ssl [assertion]
      early skip of rewriting module: _ssl [assertion]
      early skip of rewriting module: asyncio.constants [assertion]
      early skip of rewriting module: asyncio.coroutines [assertion]
      early skip of rewriting module: asyncio.base_futures [assertion]
      early skip of rewriting module: asyncio.format_helpers [assertion]
      early skip of rewriting module: asyncio.log [assertion]
      early skip of rewriting module: asyncio.events [assertion]
      early skip of rewriting module: contextvars [assertion]
      early skip of rewriting module: _contextvars [assertion]
      early skip of rewriting module: _asyncio [assertion]
      early skip of rewriting module: asyncio.exceptions [assertion]
      early skip of rewriting module: asyncio.base_tasks [assertion]
      early skip of rewriting module: asyncio.futures [assertion]
      early skip of rewriting module: asyncio.protocols [assertion]
      early skip of rewriting module: asyncio.sslproto [assertion]
      early skip of rewriting module: asyncio.transports [assertion]
      early skip of rewriting module: asyncio.staggered [assertion]
      early skip of rewriting module: asyncio.locks [assertion]
      early skip of rewriting module: asyncio.mixins [assertion]
      early skip of rewriting module: asyncio.tasks [assertion]
      early skip of rewriting module: asyncio.trsock [assertion]
      early skip of rewriting module: asyncio.runners [assertion]
      early skip of rewriting module: asyncio.queues [assertion]
      early skip of rewriting module: asyncio.streams [assertion]
      early skip of rewriting module: asyncio.subprocess [assertion]
      early skip of rewriting module: asyncio.threads [assertion]
      early skip of rewriting module: asyncio.unix_events [assertion]
      early skip of rewriting module: asyncio.base_subprocess [assertion]
      early skip of rewriting module: asyncio.selector_events [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/test_helper.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/test_helper.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/test_helper.py>
            name: sys
            obj: <module 'sys' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/test_helper.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/test_helper.py>
            name: Path
            obj: <class 'pathlib.Path'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/test_helper.py>
            name: IO
            obj: <class 'typing.IO'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/test_helper.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/test_helper.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/test_helper.py>
            name: call
            obj: call
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/test_helper.py>
            name: any_object
            obj: <function any_object at 0x7f6ea6c7d990>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/test_helper.py>
            name: test_dir
            obj: /home/jferard/prog/python/py4lo/test
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/test_helper.py>
            name: root_dir
            obj: /home/jferard/prog/python/py4lo
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/test_helper.py>
            name: py4lo_dir
            obj: /home/jferard/prog/python/py4lo/py4lo
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/test_helper.py>
            name: lib_dir
            obj: /home/jferard/prog/python/py4lo/lib
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/test_helper.py>
            name: inc_dir
            obj: /home/jferard/prog/python/py4lo/inc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/test_helper.py>
            name: p
            obj: /home/jferard/prog/python/py4lo/inc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/test_helper.py>
            name: file_path_mock
            obj: <function file_path_mock at 0x7f6ea69cc9d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/test_helper.py>
            name: file_path_error_mock
            obj: <function file_path_error_mock at 0x7f6ea69ccb80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/test_helper.py>
            name: verify_open_path
            obj: <function verify_open_path at 0x7f6ea69ccc10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/test_helper.py>
            name: compare_xml_strings
            obj: <function compare_xml_strings at 0x7f6ea69ccca0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/test_helper.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/test_helper.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/test_helper.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/lib/test_py4lo_commons.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/lib/test_py4lo_commons.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/lib/test_py4lo_commons.py>
      find_module called for: test_py4lo_commons [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/lib/test_py4lo_commons.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/lib/test_py4lo_commons.py [assertion]
      early skip of rewriting module: py4lo_commons [assertion]
      early skip of rewriting module: py4lo_typing [assertion]
      early skip of rewriting module: uno [assertion]
      early skip of rewriting module: pyuno [assertion]
      early skip of rewriting module: __builtin__ [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_commons.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_commons.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_commons.py>
            name: configparser
            obj: <module 'configparser' from '/usr/lib/python3.10/configparser.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_commons.py>
            name: subprocess
            obj: <module 'subprocess' from '/usr/lib/python3.10/subprocess.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_commons.py>
            name: tempfile
            obj: <module 'tempfile' from '/usr/lib/python3.10/tempfile.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_commons.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_commons.py>
            name: zipfile
            obj: <module 'zipfile' from '/usr/lib/python3.10/zipfile.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_commons.py>
            name: TextIOWrapper
            obj: <class '_io.TextIOWrapper'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_commons.py>
            name: os
            obj: <module 'os' from '/usr/lib/python3.10/os.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_commons.py>
            name: dt
            obj: <module 'datetime' from '/usr/lib/python3.10/datetime.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_commons.py>
            name: Path
            obj: <class 'pathlib.Path'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_commons.py>
            name: mock
            obj: <module 'unittest.mock' from '/usr/lib/python3.10/unittest/mock.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_commons.py>
            name: uno_url_to_path
            obj: <function uno_url_to_path at 0x7f6ea69cd090>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_commons.py>
            name: uno_path_to_url
            obj: <function uno_path_to_url at 0x7f6ea69cf010>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_commons.py>
            name: create_bus
            obj: <function create_bus at 0x7f6ea69cf130>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_commons.py>
            name: Commons
            obj: <class 'py4lo_commons.Commons'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_commons.py>
            name: init
            obj: <function init at 0x7f6ea69cf0a0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_commons.py>
            name: sanitize
            obj: <function sanitize at 0x7f6ea69cfbe0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_commons.py>
            name: read_config
            obj: <function read_config at 0x7f6ea69cfac0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_commons.py>
            name: date_to_int
            obj: <function date_to_int at 0x7f6ea69cfc70>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_commons.py>
            name: date_to_float
            obj: <function date_to_float at 0x7f6ea69cfd00>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_commons.py>
            name: int_to_date
            obj: <function int_to_date at 0x7f6ea69cfd90>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_commons.py>
            name: float_to_date
            obj: <function float_to_date at 0x7f6ea69cfe20>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_commons.py>
            name: MiscTestCase
            obj: <class 'test_py4lo_commons.MiscTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase MiscTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_commons.py>
            name: TestBus
            obj: <class 'test_py4lo_commons.TestBus'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestBus> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_commons.py>
            name: TestCommons
            obj: <class 'test_py4lo_commons.TestCommons'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestCommons> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_commons.py>
            name: TestDate
            obj: <class 'test_py4lo_commons.TestDate'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestDate> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_commons.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/lib/test_py4lo_commons.py' lenresult=4 outcome='passed'> [hook]
    genitems <UnitTestCase MiscTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase MiscTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase MiscTestCase>
      finish pytest_make_collect_report --> <CollectReport 'test/lib/test_py4lo_commons.py::MiscTestCase' lenresult=5 outcome='passed'> [hook]
    genitems <TestCaseFunction test_uno> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_uno>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_uno_path_to_url> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_uno_path_to_url>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_uno_path_to_url_err> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_uno_path_to_url_err>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_uno_url_to_path> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_uno_url_to_path>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_uno_url_to_path_empty> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_uno_url_to_path_empty>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/lib/test_py4lo_commons.py::MiscTestCase' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestBus> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestBus>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestBus>
      finish pytest_make_collect_report --> <CollectReport 'test/lib/test_py4lo_commons.py::TestBus' lenresult=2 outcome='passed'> [hook]
    genitems <TestCaseFunction test> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test2> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test2>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/lib/test_py4lo_commons.py::TestBus' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestCommons> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestCommons>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestCommons>
      finish pytest_make_collect_report --> <CollectReport 'test/lib/test_py4lo_commons.py::TestCommons' lenresult=14 outcome='passed'> [hook]
    genitems <TestCaseFunction testCurDir> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction testCurDir>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction testSanitize> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction testSanitize>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_linux> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_linux>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_linux2> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_linux2>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_get_logger> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_logger>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_init> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_init>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_logger> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_logger>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_logger_err> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_logger_err>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_logger_init_twice> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_logger_init_twice>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_logger_none> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_logger_none>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_read_asset> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_read_asset>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_read_empty_config> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_read_empty_config>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_read_internal_config> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_read_internal_config>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_read_internal_config_missing> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_read_internal_config_missing>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/lib/test_py4lo_commons.py::TestCommons' lenresult=14 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestDate> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestDate>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestDate>
      finish pytest_make_collect_report --> <CollectReport 'test/lib/test_py4lo_commons.py::TestDate' lenresult=4 outcome='passed'> [hook]
    genitems <TestCaseFunction test_date_to_float> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_date_to_float>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_date_to_int> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_date_to_int>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_float_to_date> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_float_to_date>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_int_to_date> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_int_to_date>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/lib/test_py4lo_commons.py::TestDate' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/lib/test_py4lo_commons.py' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/lib/test_py4lo_dialogs.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/lib/test_py4lo_dialogs.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/lib/test_py4lo_dialogs.py>
      find_module called for: test_py4lo_dialogs [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/lib/test_py4lo_dialogs.py' [assertion]
      _read_pyc(/home/jferard/prog/python/py4lo/test/lib/test_py4lo_dialogs.py): out of date [assertion]
      rewriting PosixPath('/home/jferard/prog/python/py4lo/test/lib/test_py4lo_dialogs.py') [assertion]
      early skip of rewriting module: mock_constants [assertion]
      early skip of rewriting module: py4lo_dialogs [assertion]
      early skip of rewriting module: py4lo_helper [assertion]
      early skip of rewriting module: unohelper [assertion]
      early skip of rewriting module: com [assertion]
      early skip of rewriting module: com [assertion]
      early skip of rewriting module: com [assertion]
      early skip of rewriting module: com [assertion]
      early skip of rewriting module: com [assertion]
      early skip of rewriting module: com [assertion]
      early skip of rewriting module: com [assertion]
      early skip of rewriting module: com [assertion]
      early skip of rewriting module: com [assertion]
      early skip of rewriting module: com [assertion]
      early skip of rewriting module: com [assertion]
      early skip of rewriting module: com [assertion]
      early skip of rewriting module: com [assertion]
      early skip of rewriting module: com [assertion]
      early skip of rewriting module: com [assertion]
      early skip of rewriting module: com [assertion]
      early skip of rewriting module: com [assertion]
      early skip of rewriting module: com [assertion]
      early skip of rewriting module: com [assertion]
      early skip of rewriting module: com [assertion]
      early skip of rewriting module: com [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_dialogs.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_dialogs.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_dialogs.py>
            name: time
            obj: <module 'time' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_dialogs.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_dialogs.py>
            name: mock
            obj: <module 'unittest.mock' from '/usr/lib/python3.10/unittest/mock.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_dialogs.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_dialogs.py>
            name: call
            obj: call
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_dialogs.py>
            name: MessageBoxType
            obj: <class 'mock_constants.MessageBoxType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_dialogs.py>
            name: ExecutableDialogResults
            obj: <class 'mock_constants.ExecutableDialogResults'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_dialogs.py>
            name: message_box
            obj: <function message_box at 0x7f6ea59cfa30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_dialogs.py>
            name: place_widget
            obj: <function place_widget at 0x7f6ea69fe3b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_dialogs.py>
            name: get_text_size
            obj: <function get_text_size at 0x7f6ea59cf9a0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_dialogs.py>
            name: file_dialog
            obj: <function file_dialog at 0x7f6ea59d8550>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_dialogs.py>
            name: Size
            obj: <class 'py4lo_dialogs.Size'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_dialogs.py>
            name: FileFilter
            obj: <class 'py4lo_dialogs.FileFilter'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_dialogs.py>
            name: folder_dialog
            obj: <function folder_dialog at 0x7f6ea59d85e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_dialogs.py>
            name: ProgressExecutorBuilder
            obj: <class 'py4lo_dialogs.ProgressExecutorBuilder'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_dialogs.py>
            name: ProgressHandler
            obj: <class 'py4lo_dialogs.ProgressHandler'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_dialogs.py>
            name: ConsoleExecutorBuilder
            obj: <class 'py4lo_dialogs.ConsoleExecutorBuilder'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_dialogs.py>
            name: ConsoleHandler
            obj: <class 'py4lo_dialogs.ConsoleHandler'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_dialogs.py>
            name: Py4LODialogsTestCase
            obj: <class 'test_py4lo_dialogs.Py4LODialogsTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase Py4LODialogsTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_dialogs.py>
            name: ProgressExecutorTestCase
            obj: <class 'test_py4lo_dialogs.ProgressExecutorTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ProgressExecutorTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_dialogs.py>
            name: ConsoleExecutorTestCase
            obj: <class 'test_py4lo_dialogs.ConsoleExecutorTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase ConsoleExecutorTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_dialogs.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/lib/test_py4lo_dialogs.py' lenresult=3 outcome='passed'> [hook]
    genitems <UnitTestCase Py4LODialogsTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase Py4LODialogsTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase Py4LODialogsTestCase>
      finish pytest_make_collect_report --> <CollectReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase' lenresult=11 outcome='passed'> [hook]
    genitems <TestCaseFunction test_file_dialog_multiple> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_file_dialog_multiple>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_file_dialog_multiple_empty> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_file_dialog_multiple_empty>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_file_dialog_single> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_file_dialog_single>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_file_dialog_single_no_filter> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_file_dialog_single_no_filter>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_file_dialog_single_none> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_file_dialog_single_none>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_folder_dialog> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_folder_dialog>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_folder_dialog_none> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_folder_dialog_none>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_get_text_size> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_text_size>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_message_box> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_message_box>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_message_box_parent_win> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_message_box_parent_win>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_place_widget> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_place_widget>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase' lenresult=11 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase ProgressExecutorTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ProgressExecutorTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ProgressExecutorTestCase>
      finish pytest_make_collect_report --> <CollectReport 'test/lib/test_py4lo_dialogs.py::ProgressExecutorTestCase' lenresult=2 outcome='passed'> [hook]
    genitems <TestCaseFunction test_build> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_build>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_simple> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_simple>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/lib/test_py4lo_dialogs.py::ProgressExecutorTestCase' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase ConsoleExecutorTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase ConsoleExecutorTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase ConsoleExecutorTestCase>
      finish pytest_make_collect_report --> <CollectReport 'test/lib/test_py4lo_dialogs.py::ConsoleExecutorTestCase' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test_simple> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_simple>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/lib/test_py4lo_dialogs.py::ConsoleExecutorTestCase' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/lib/test_py4lo_dialogs.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/lib/test_py4lo_helper.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/lib/test_py4lo_helper.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/lib/test_py4lo_helper.py>
      find_module called for: test_py4lo_helper [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/lib/test_py4lo_helper.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/lib/test_py4lo_helper.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: mock
            obj: <module 'unittest.mock' from '/usr/lib/python3.10/unittest/mock.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: patch
            obj: <function patch at 0x7f6ea69c20e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: sentinel
            obj: <unittest.mock._Sentinel object at 0x7f6ea6d151b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: DEFAULT
            obj: sentinel.DEFAULT
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: ANY
            obj: <ANY>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: call
            obj: call
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: create_autospec
            obj: <function create_autospec at 0x7f6ea69c3e20>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: AsyncMock
            obj: <class 'unittest.mock.AsyncMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: FILTER_DIR
            obj: True
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: NonCallableMock
            obj: <class 'unittest.mock.NonCallableMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: NonCallableMagicMock
            obj: <class 'unittest.mock.NonCallableMagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: mock_open
            obj: <function mock_open at 0x7f6ea69cc700>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: PropertyMock
            obj: <class 'unittest.mock.PropertyMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: seal
            obj: <function seal at 0x7f6ea69cc790>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: Enum
            obj: <enum 'Enum'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: Path
            obj: <class 'pathlib.Path'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: Any
            obj: typing.Any
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: Optional
            obj: typing.Optional
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: List
            obj: typing.List
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: cast
            obj: <function cast at 0x7f6ea7fe3eb0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: Callable
            obj: typing.Callable
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: Mapping
            obj: typing.Mapping
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: Tuple
            obj: typing.Tuple
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: Iterator
            obj: typing.Iterator
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: Union
            obj: typing.Union
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: Iterable
            obj: typing.Iterable
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: uno_path_to_url
            obj: <function uno_path_to_url at 0x7f6ea69cf010>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: UnoSpreadsheet
            obj: py4lo_typing.UnoSpreadsheet
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: UnoController
            obj: py4lo_typing.UnoController
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: UnoContext
            obj: py4lo_typing.UnoContext
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: UnoService
            obj: py4lo_typing.UnoService
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: UnoSheet
            obj: py4lo_typing.UnoSheet
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: UnoRangeAddress
            obj: py4lo_typing.UnoRangeAddress
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: UnoRange
            obj: py4lo_typing.UnoRange
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: UnoCell
            obj: py4lo_typing.UnoCell
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: UnoObject
            obj: py4lo_typing.UnoObject
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: DATA_ARRAY
            obj: typing.Union[typing.Tuple[typing.Union[typing.Tuple[typing.Union[str, float], ...], typing.List[typing.Union[str, float]]], ...], typing.List[typing.Union[typing.Tuple[typing.Union[str, float], ...], typing.List[typing.Union[str, float]]]]]
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: UnoCellAddress
            obj: py4lo_typing.UnoCellAddress
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: UnoPropertyValue
            obj: py4lo_typing.UnoPropertyValue
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: DATA_ROW
            obj: typing.Union[typing.Tuple[typing.Union[str, float], ...], typing.List[typing.Union[str, float]]]
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: UnoXScriptContext
            obj: py4lo_typing.UnoXScriptContext
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: UnoColumn
            obj: py4lo_typing.UnoColumn
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: UnoStruct
            obj: py4lo_typing.UnoStruct
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: UnoEnum
            obj: py4lo_typing.UnoEnum
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: UnoRow
            obj: py4lo_typing.UnoRow
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: DATA_VALUE
            obj: typing.Union[str, float]
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: UnoPropertyValues
            obj: typing.Union[typing.List[py4lo_typing.UnoPropertyValue], typing.Tuple[py4lo_typing.UnoPropertyValue, ...]]
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: unohelper
            obj: <module 'unohelper' from '/usr/lib/python3/dist-packages/unohelper.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: uno
            obj: <module 'uno' from '/usr/lib/python3/dist-packages/uno.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: XTransferable
            obj: <class 'uno.com.sun.star.datatransfer.XTransferable'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: FrameSearchFlag
            obj: <class 'py4lo_helper.FrameSearchFlag'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: BorderLineStyle
            obj: <class 'py4lo_helper.BorderLineStyle'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: ConditionOperator
            obj: <class 'py4lo_helper.ConditionOperator'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: FontWeight
            obj: <class 'py4lo_helper.FontWeight'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: ValidationType
            obj: <class 'py4lo_helper.ValidationType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: TableValidationVisibility
            obj: <class 'py4lo_helper.TableValidationVisibility'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: ScriptFrameworkErrorException
            obj: <class 'uno.com.sun.star.script.provider.ScriptFrameworkErrorException'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: UnoRuntimeException
            obj: <class 'uno.com.sun.star.uno.RuntimeException'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: UnoException
            obj: <class 'uno.com.sun.star.uno.Exception'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: PropertyState
            obj: <class 'py4lo_helper.PropertyState'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: provider
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: xray
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: mri
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: init
            obj: <function init at 0x7f6ea69fed40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: create_uno_service
            obj: <function create_uno_service at 0x7f6ea69ffac0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: create_uno_service_ctxt
            obj: <function create_uno_service_ctxt at 0x7f6ea59cc4c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: uno_service
            obj: <function create_uno_service at 0x7f6ea69ffac0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: uno_service_ctxt
            obj: <function create_uno_service_ctxt at 0x7f6ea59cc4c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: to_iter
            obj: <function to_iter at 0x7f6ea59cc550>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: to_enumerate
            obj: <function to_enumerate at 0x7f6ea59cc5e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: to_dict
            obj: <function to_dict at 0x7f6ea59cc670>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: to_items
            obj: <function to_items at 0x7f6ea59cc700>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: remove_all
            obj: <function remove_all at 0x7f6ea59cc790>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: parent_doc
            obj: <function parent_doc at 0x7f6ea59cc820>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: get_cell_type
            obj: <function get_cell_type at 0x7f6ea59cc8b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: get_named_cells
            obj: <function get_named_cells at 0x7f6ea59cc940>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: get_named_cell
            obj: <function get_named_cell at 0x7f6ea59cc9d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: get_main_cell
            obj: <function get_main_cell at 0x7f6ea59cca60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: create_uno_struct
            obj: <function create_uno_struct at 0x7f6ea59ccaf0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: make_struct
            obj: <function create_uno_struct at 0x7f6ea59ccaf0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: make_pv
            obj: <function make_pv at 0x7f6ea59ccb80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: make_full_pv
            obj: <function make_full_pv at 0x7f6ea59ccc10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: make_pvs
            obj: <function make_pvs at 0x7f6ea59ccca0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: update_pvs
            obj: <function update_pvs at 0x7f6ea59ccd30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: make_locale
            obj: <function make_locale at 0x7f6ea59ccdc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: make_border
            obj: <function make_border at 0x7f6ea59cce50>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: make_sort_field
            obj: <function make_sort_field at 0x7f6ea59ccee0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: get_last_used_row
            obj: <function get_last_used_row at 0x7f6ea59ccf70>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: get_used_range_address
            obj: <function get_used_range_address at 0x7f6ea59cd000>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: get_used_range
            obj: <function get_used_range at 0x7f6ea59cd090>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: narrow_range_to_address
            obj: <function narrow_range_to_address at 0x7f6ea59cd120>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: get_range_size
            obj: <function get_range_size at 0x7f6ea59cd1b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: copy_range
            obj: <function copy_range at 0x7f6ea59cd240>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: paste_range
            obj: <function paste_range at 0x7f6ea59cd2d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: narrow_range
            obj: <function narrow_range at 0x7f6ea59cd360>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: data_array
            obj: <function data_array at 0x7f6ea59cd3f0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: top_void_row_count
            obj: <function top_void_row_count at 0x7f6ea59cd480>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: bottom_void_row_count
            obj: <function bottom_void_row_count at 0x7f6ea59cd510>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: left_void_row_count
            obj: <function left_void_row_count at 0x7f6ea59cd5a0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: right_void_row_count
            obj: <function right_void_row_count at 0x7f6ea59cd630>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: set_validation_list_by_cell
            obj: <function set_validation_list_by_cell at 0x7f6ea59cd750>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: ValidationFactory
            obj: <class 'py4lo_helper.ValidationFactory'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: ListValidationBuilder
            obj: <class 'py4lo_helper.ListValidationBuilder'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: quote_element
            obj: <function quote_element at 0x7f6ea59cd7e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: sort_range
            obj: <function sort_range at 0x7f6ea59cdcf0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: clear_conditional_format
            obj: <function clear_conditional_format at 0x7f6ea59cdd80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: conditional_format_on_formulas
            obj: <function conditional_format_on_formulas at 0x7f6ea59cde10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: get_formula_conditional_entry
            obj: <function get_formula_conditional_entry at 0x7f6ea59cdea0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: get_conditional_entry
            obj: <function get_conditional_entry at 0x7f6ea59cdfc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: find_or_create_number_format_style
            obj: <function find_or_create_number_format_style at 0x7f6ea59ce050>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: create_filter
            obj: <function create_filter at 0x7f6ea59ce0e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: remove_filter
            obj: <function remove_filter at 0x7f6ea59ce170>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: row_as_header
            obj: <function row_as_header at 0x7f6ea59ce200>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: column_optimal_width
            obj: <function column_optimal_width at 0x7f6ea59ce290>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: set_print_area
            obj: <function set_print_area at 0x7f6ea59ce320>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: A3_LARGE
            obj: 42000
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: A4_LARGE
            obj: 29700
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: A3_SMALL
            obj: 29700
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: A4_SMALL
            obj: 21000
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: get_page_style
            obj: <function get_page_style at 0x7f6ea59ce3b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: set_paper
            obj: <function set_paper at 0x7f6ea59ce440>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: set_paper_to_size
            obj: <function set_paper_to_size at 0x7f6ea59ce4d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: add_link
            obj: <function add_link at 0x7f6ea59ce560>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: NewDocumentUrl
            obj: <enum 'NewDocumentUrl'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: Target
            obj: <enum 'Target'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: open_in_calc
            obj: <function open_in_calc at 0x7f6ea59ce680>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: doc_builder
            obj: <function doc_builder at 0x7f6ea59ce710>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: new_doc
            obj: <function new_doc at 0x7f6ea59ce7a0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: DocBuilder
            obj: <class 'py4lo_helper.DocBuilder'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: read_options
            obj: <function read_options at 0x7f6ea59cedd0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: rtrim_row
            obj: <function rtrim_row at 0x7f6ea59cee60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: read_options_from_sheet_name
            obj: <function read_options_from_sheet_name at 0x7f6ea59cef80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: copy_row_at_index
            obj: <function copy_row_at_index at 0x7f6ea59cf010>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: TEXT_FLAVOR
            obj: ('text/plain;charset=utf-16', 'Unicode-text')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: copy_to_clipboard
            obj: <function copy_to_clipboard at 0x7f6ea59cf0a0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: get_from_clipboard
            obj: <function get_from_clipboard at 0x7f6ea59cf370>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: Transferable
            obj: <class 'py4lo_helper.Transferable'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: py4lo_helper
            obj: <module 'py4lo_helper' from '/home/jferard/prog/python/py4lo/lib/py4lo_helper.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: _ObjectProvider
            obj: <class 'py4lo_helper._ObjectProvider'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: _Inspector
            obj: <class 'py4lo_helper._Inspector'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: HelperBaseTestCase
            obj: <class 'test_py4lo_helper.HelperBaseTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase HelperBaseTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: HelperStructTestCase
            obj: <class 'test_py4lo_helper.HelperStructTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase HelperStructTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: HelperRangesTestCase
            obj: <class 'test_py4lo_helper.HelperRangesTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase HelperRangesTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: HelperDataArrayTestCase
            obj: <class 'test_py4lo_helper.HelperDataArrayTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase HelperDataArrayTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: HelperFormattingTestCase
            obj: <class 'test_py4lo_helper.HelperFormattingTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase HelperFormattingTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: HelperOpenTestCase
            obj: <class 'test_py4lo_helper.HelperOpenTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase HelperOpenTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: HelperMiscTestCase
            obj: <class 'test_py4lo_helper.HelperMiscTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase HelperMiscTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: MiscTestCase
            obj: <class 'test_py4lo_helper.MiscTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase MiscTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_helper.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/lib/test_py4lo_helper.py' lenresult=8 outcome='passed'> [hook]
    genitems <UnitTestCase HelperBaseTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase HelperBaseTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase HelperBaseTestCase>
      finish pytest_make_collect_report --> <CollectReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase' lenresult=16 outcome='passed'> [hook]
    genitems <TestCaseFunction test_dispatcher> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_dispatcher>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_dispatcher_twice> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_dispatcher_twice>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_get_cell_type> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_cell_type>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_get_cell_type_formula> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_cell_type_formula>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_get_main_cell> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_main_cell>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_get_named_cell> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_named_cell>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_get_named_cells> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_named_cells>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_get_script_provider> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_script_provider>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_get_script_provider_factory_twice> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_script_provider_factory_twice>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_get_script_provider_twice> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_script_provider_twice>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_init> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_init>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_parent_doc> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_parent_doc>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_reflect> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_reflect>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_reflect_twice> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_reflect_twice>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_to_dict> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_to_dict>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_to_iter> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_to_iter>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase' lenresult=16 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase HelperStructTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase HelperStructTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase HelperStructTestCase>
      finish pytest_make_collect_report --> <CollectReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase' lenresult=13 outcome='passed'> [hook]
    genitems <TestCaseFunction test_make_border> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_make_border>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_make_full_pv> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_make_full_pv>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_make_full_pv2> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_make_full_pv2>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_make_locale> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_make_locale>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_make_locale_subtags> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_make_locale_subtags>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_make_locale_subtags_wo_region> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_make_locale_subtags_wo_region>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_make_pv> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_make_pv>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_make_pvs> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_make_pvs>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_make_pvs_none> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_make_pvs_none>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_make_sort_field> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_make_sort_field>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_struct> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_struct>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_update_pvs> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_update_pvs>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_update_pvs_non_existing> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_update_pvs_non_existing>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase' lenresult=13 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase HelperRangesTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase HelperRangesTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase HelperRangesTestCase>
      finish pytest_make_collect_report --> <CollectReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase' lenresult=12 outcome='passed'> [hook]
    genitems <TestCaseFunction test_copy_range> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_copy_range>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_get_last_used_row> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_last_used_row>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_get_range_size> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_range_size>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_get_used_range_address> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_used_range_address>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_narrow_range> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_narrow_range>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_narrow_range2> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_narrow_range2>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_narrow_range_dont_narrow_data> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_narrow_range_dont_narrow_data>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_narrow_range_to_address> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_narrow_range_to_address>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_paste_range> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_paste_range>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_paste_range_formulas> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_paste_range_formulas>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_used_range> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_used_range>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_used_range2> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_used_range2>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase' lenresult=12 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase HelperDataArrayTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase HelperDataArrayTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase HelperDataArrayTestCase>
      finish pytest_make_collect_report --> <CollectReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase' lenresult=9 outcome='passed'> [hook]
    genitems <TestCaseFunction test_data_array> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_data_array>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_data_array_no_row> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_data_array_no_row>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_row_count> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_row_count>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_row_count2> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_row_count2>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_row_count_empty> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_row_count_empty>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_row_count_no_row> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_row_count_no_row>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_row_count_one_cell> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_row_count_one_cell>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_row_count_one_col> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_row_count_one_col>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_row_count_one_row> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_row_count_one_row>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase' lenresult=9 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase HelperFormattingTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase HelperFormattingTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase HelperFormattingTestCase>
      finish pytest_make_collect_report --> <CollectReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase' lenresult=28 outcome='passed'> [hook]
    genitems <TestCaseFunction test_add_link> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_add_link>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_add_link_wrapped> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_add_link_wrapped>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_clear_conditional_format> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_clear_conditional_format>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_column_optimal_width_large> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_column_optimal_width_large>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_column_optimal_width_medium> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_column_optimal_width_medium>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_column_optimal_width_small> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_column_optimal_width_small>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_conditional_format_on_formulas> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_conditional_format_on_formulas>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_filter> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_filter>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_number_format_style> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_number_format_style>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_find_number_format_style> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_find_number_format_style>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_find_number_format_style_no_locale> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_find_number_format_style_no_locale>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_get_formula_conditional_entry> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_formula_conditional_entry>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_get_page_style> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_page_style>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_quote_element> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_quote_element>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_row_as_header> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_row_as_header>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_set_paper_1> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_set_paper_1>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_set_paper_2> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_set_paper_2>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_set_paper_3> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_set_paper_3>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_set_paper_4> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_set_paper_4>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_set_print_area> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_set_print_area>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_set_print_area_no_title> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_set_print_area_no_title>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_set_validation_list> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_set_validation_list>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_set_validation_list2> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_set_validation_list2>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_set_validation_list3> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_set_validation_list3>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sort_range> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sort_range>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sort_range_no_header> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sort_range_no_header>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_validation_builder> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_validation_builder>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_wrap_text> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_wrap_text>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase' lenresult=28 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase HelperOpenTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase HelperOpenTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase HelperOpenTestCase>
      finish pytest_make_collect_report --> <CollectReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase' lenresult=14 outcome='passed'> [hook]
    genitems <TestCaseFunction test_doc_builder> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_doc_builder>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_doc_builder_apply> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_doc_builder_apply>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_doc_builder_apply_list> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_doc_builder_apply_list>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_doc_builder_duplicate_base_sheet> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_doc_builder_duplicate_base_sheet>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_doc_builder_duplicate_to> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_doc_builder_duplicate_to>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_doc_builder_make_base_sheet> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_doc_builder_make_base_sheet>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_doc_builder_pvs> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_doc_builder_pvs>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_doc_builder_sheet_names_four> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_doc_builder_sheet_names_four>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_doc_builder_sheet_names_three> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_doc_builder_sheet_names_three>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_doc_builder_sheet_names_two> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_doc_builder_sheet_names_two>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_doc_builder_sheet_names_two_trunc> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_doc_builder_sheet_names_two_trunc>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_new_doc> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_new_doc>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_open_in_calc> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_open_in_calc>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_open_in_calc_no_params> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_open_in_calc_no_params>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase' lenresult=14 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase HelperMiscTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase HelperMiscTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase HelperMiscTestCase>
      finish pytest_make_collect_report --> <CollectReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase' lenresult=6 outcome='passed'> [hook]
    genitems <TestCaseFunction testUnoService> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction testUnoService>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_copy_row_at_index> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_copy_row_at_index>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_read_empty_options> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_read_empty_options>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_read_options> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_read_options>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_read_options_from_sheet_name> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_read_options_from_sheet_name>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_rtrim_row> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_rtrim_row>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase' lenresult=6 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase MiscTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase MiscTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase MiscTestCase>
      finish pytest_make_collect_report --> <CollectReport 'test/lib/test_py4lo_helper.py::MiscTestCase' lenresult=12 outcome='passed'> [hook]
    genitems <TestCaseFunction test_mri> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_mri>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_mri_fail> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_mri_fail>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_mri_fail_err> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_mri_fail_err>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_mri_fail_twice> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_mri_fail_twice>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_mri_twice> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_mri_twice>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_use_xray_ignore> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_use_xray_ignore>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_use_xray_ok> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_use_xray_ok>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_use_xray_raise> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_use_xray_raise>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_xray> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_xray>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_xray2> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_xray2>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_xray_fail> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_xray_fail>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_xray_twice> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_xray_twice>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/lib/test_py4lo_helper.py::MiscTestCase' lenresult=12 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/lib/test_py4lo_helper.py' lenresult=8 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/lib/test_py4lo_io.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/lib/test_py4lo_io.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/lib/test_py4lo_io.py>
      find_module called for: test_py4lo_io [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/lib/test_py4lo_io.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/lib/test_py4lo_io.py [assertion]
      early skip of rewriting module: py4lo_io [assertion]
      early skip of rewriting module: com [assertion]
      early skip of rewriting module: com [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_io.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_io.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_io.py>
            name: csv
            obj: <module 'csv' from '/usr/lib/python3.10/csv.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_io.py>
            name: dt
            obj: <module 'datetime' from '/usr/lib/python3.10/datetime.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_io.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_io.py>
            name: Any
            obj: typing.Any
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_io.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_io.py>
            name: patch
            obj: <function patch at 0x7f6ea69c20e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_io.py>
            name: call
            obj: call
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_io.py>
            name: ANY
            obj: <ANY>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_io.py>
            name: make_pv
            obj: <function make_pv at 0x7f6ea59ccb80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_io.py>
            name: create_import_filter_options
            obj: <function create_import_filter_options at 0x7f6ea5a437f0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_io.py>
            name: create_export_filter_options
            obj: <function create_export_filter_options at 0x7f6ea5a43b50>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_io.py>
            name: Format
            obj: <enum 'Format'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_io.py>
            name: create_read_cell
            obj: <function create_read_cell at 0x7f6ea5a42dd0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_io.py>
            name: CellTyping
            obj: <enum 'CellTyping'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_io.py>
            name: reader
            obj: <class 'py4lo_io.reader'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_io.py>
            name: dict_reader
            obj: <class 'py4lo_io.dict_reader'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_io.py>
            name: find_number_format_style
            obj: <function find_number_format_style at 0x7f6ea5a42e60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_io.py>
            name: create_write_cell
            obj: <function create_write_cell at 0x7f6ea5a432e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_io.py>
            name: writer
            obj: <class 'py4lo_io.writer'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_io.py>
            name: dict_writer
            obj: <class 'py4lo_io.dict_writer'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_io.py>
            name: import_from_csv
            obj: <function import_from_csv at 0x7f6ea5a43370>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_io.py>
            name: export_to_csv
            obj: <function export_to_csv at 0x7f6ea5a43910>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_io.py>
            name: UnoCell
            obj: py4lo_typing.UnoCell
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_io.py>
            name: NumberFormat
            obj: <class 'mock_constants.NumberFormat'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_io.py>
            name: Py4LOIOTestCase
            obj: <class 'test_py4lo_io.Py4LOIOTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase Py4LOIOTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_io.py>
            name: IOCSVTestCase
            obj: <class 'test_py4lo_io.IOCSVTestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase IOCSVTestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_io.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/lib/test_py4lo_io.py' lenresult=2 outcome='passed'> [hook]
    genitems <UnitTestCase Py4LOIOTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase Py4LOIOTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase Py4LOIOTestCase>
      finish pytest_make_collect_report --> <CollectReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase' lenresult=40 outcome='passed'> [hook]
    genitems <TestCaseFunction test_create_read_cell_accurate_date> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_read_cell_accurate_date>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_read_cell_accurate_empty> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_read_cell_accurate_empty>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_read_cell_accurate_logical> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_read_cell_accurate_logical>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_read_cell_accurate_number> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_read_cell_accurate_number>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_read_cell_accurate_other> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_read_cell_accurate_other>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_read_cell_accurate_text> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_read_cell_accurate_text>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_read_cell_accurate_wo_formats> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_read_cell_accurate_wo_formats>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_read_cell_minimal_empty> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_read_cell_minimal_empty>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_read_cell_minimal_other> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_read_cell_minimal_other>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_read_cell_minimal_text> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_read_cell_minimal_text>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_read_cell_minimal_value> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_read_cell_minimal_value>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_read_cell_none> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_read_cell_none>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_read_cell_other> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_read_cell_other>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_write_cell_accurate_bool> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_write_cell_accurate_bool>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_write_cell_accurate_date> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_write_cell_accurate_date>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_write_cell_accurate_datetime> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_write_cell_accurate_datetime>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_write_cell_accurate_no_format> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_write_cell_accurate_no_format>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_write_cell_accurate_none> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_write_cell_accurate_none>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_write_cell_accurate_number> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_write_cell_accurate_number>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_write_cell_accurate_string> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_write_cell_accurate_string>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_write_cell_minimal_bool> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_write_cell_minimal_bool>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_write_cell_minimal_date> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_write_cell_minimal_date>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_write_cell_minimal_none> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_write_cell_minimal_none>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_write_cell_minimal_number> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_write_cell_minimal_number>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_write_cell_minimal_string> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_write_cell_minimal_string>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_write_cell_other> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_write_cell_other>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create_write_cell_string> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create_write_cell_string>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_dict_reader> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_dict_reader>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_dict_reader_fieldnames> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_dict_reader_fieldnames>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_dict_reader_fieldnames_rest> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_dict_reader_fieldnames_rest>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_dict_writer_wc> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_dict_writer_wc>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_dict_writer_wc_raise> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_dict_writer_wc_raise>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_dict_writer_wc_restval> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_dict_writer_wc_restval>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_find_number_format_style> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_find_number_format_style>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_reader> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_reader>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_reader_accurate> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_reader_accurate>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_reader_rc> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_reader_rc>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_writer_formats> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_writer_formats>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_writer_no_formats> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_writer_no_formats>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_writer_wc> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_writer_wc>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase' lenresult=40 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase IOCSVTestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase IOCSVTestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase IOCSVTestCase>
      finish pytest_make_collect_report --> <CollectReport 'test/lib/test_py4lo_io.py::IOCSVTestCase' lenresult=9 outcome='passed'> [hook]
    genitems <TestCaseFunction test_empty_export_options> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_empty_export_options>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_empty_import_options> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_empty_import_options>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_export_options_dialect> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_export_options_dialect>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_export_options_two_parameters> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_export_options_two_parameters>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_export_to_csv> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_export_to_csv>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_import_from_csv> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_import_from_csv>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_import_options> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_import_options>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_import_options_dialect> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_import_options_dialect>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_import_options_two_args> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_import_options_two_args>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/lib/test_py4lo_io.py::IOCSVTestCase' lenresult=9 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/lib/test_py4lo_io.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/lib/test_py4lo_ods.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/lib/test_py4lo_ods.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/lib/test_py4lo_ods.py>
      find_module called for: test_py4lo_ods [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/lib/test_py4lo_ods.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/lib/test_py4lo_ods.py [assertion]
      early skip of rewriting module: py4lo_ods [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: itertools
            obj: <module 'itertools' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: ET
            obj: <module 'xml.etree.ElementTree' from '/usr/lib/python3.10/xml/etree/ElementTree.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: zipfile
            obj: <module 'zipfile' from '/usr/lib/python3.10/zipfile.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: Path
            obj: <class 'pathlib.Path'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: List
            obj: typing.List
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: cast
            obj: <function cast at 0x7f6ea7fe3eb0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: Dict
            obj: typing.Dict
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: Callable
            obj: typing.Callable
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: IO
            obj: <class 'typing.IO'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: Iterator
            obj: typing.Iterator
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: Optional
            obj: typing.Optional
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: Union
            obj: typing.Union
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: ACTIVE_TABLE_XPATH
            obj: ./office:settings/config:config-item-set[@config:name='ooo:view-settings']/config:config-item-map-indexed[@config:name='Views']/config:config-item-map-entry/config:config-item[@config:name='ActiveTable']
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: OFFICE_NS_DICT
            obj: {'office': 'urn:oasis:names:tc:opendocument:xmlns:office:1.0', 'table': 'urn:oasis:names:tc:opendocument:xmlns:table:1.0', 'text': 'urn:oasis:names:tc:opendocument:xmlns:text:1.0', 'config': 'urn:oasis:names:tc:opendocument:xmlns:config:1.0'}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: NameSpace
            obj: <class 'py4lo_ods.NameSpace'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: OFFICE_NS
            obj: <py4lo_ods.NameSpace object at 0x7f6ea57ecc40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: SortFunc
            obj: typing.Callable[[typing.List[xml.etree.ElementTree.Element]], typing.List[xml.etree.ElementTree.Element]]
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: OdsTables
            obj: <class 'py4lo_ods.OdsTables'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: OdsTablesBuilder
            obj: <class 'py4lo_ods.OdsTablesBuilder'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: dont_sort
            obj: <function dont_sort at 0x7f6ea5678820>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: put_active_first
            obj: <function put_active_first at 0x7f6ea5678e50>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: OdsRows
            obj: <class 'py4lo_ods.OdsRows'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: omit_filtered
            obj: <function omit_filtered at 0x7f6ea5679000>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: py4lo_ods
            obj: <module 'py4lo_ods' from '/home/jferard/prog/python/py4lo/lib/py4lo_ods.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: SETTINGS_XML
            obj: <?xml version="1.0" encoding="UTF-8"?>
<office:document-settings
    xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:config="urn:oasis:names:tc:opendocument:xmlns:config:1.0"
    xmlns:ooo="http://openoffice.org/2004/office"
    office:version="1.2">
    <office:settings>
        <config:config-item-set config:name="ooo:view-settings">
            <config:config-item-map-indexed config:name="Views">
                <config:config-item-map-entry>
                    <config:config-item config:name="ViewId" config:type="string">view1</config:config-item>
                    <config:config-item-map-named config:name="Tables">
                        <config:config-item-map-entry config:name="Sheet1">
                            <config:config-item config:name="AnchoredTextOverflowLegacy" config:type="boolean">false</config:config-item>
                        </config:config-item-map-entry>
                        <config:config-item-map-entry config:name="Sheet2">
                            <config:config-item config:name="AnchoredTextOverflowLegacy" config:type="boolean">false</config:config-item>
                        </config:config-item-map-entry>
                    </config:config-item-map-named>
                    <config:config-item config:name="ActiveTable" config:type="string">Sheet2</config:config-item>
                </config:config-item-map-entry>
            </config:config-item-map-indexed>
        </config:config-item-set>
        <config:config-item-set config:name="ooo:configuration-settings">
            <config:config-item config:name="AllowPrintJobCancel" config:type="boolean">true</config:config-item>
        </config:config-item-set>
    </office:settings>
</office:document-settings>


        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: CONTENT_XML
            obj: <?xml version="1.0" encoding="UTF-8"?>
<office:document-content
    xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0"
    xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0"
    xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0"
    xmlns:table="urn:oasis:names:tc:opendocument:xmlns:table:1.0"
    office:version="1.2"><office:scripts/>
    <office:font-face-decls/>
    <office:automatic-styles/>
    <office:body>
        <office:spreadsheet>
            <table:table table:name="Test"><table:table-column  table:number-columns-repeated="4" table:default-cell-style-name="Default"/>
                <table:table-row table:style-name="ro1">
                    <table:table-cell office:value-type="string" table:number-columns-spanned="2" table:number-rows-spanned="1">
                        <text:p>A1:B1</text:p>
                    </table:table-cell>
                    <table:covered-table-cell/>
                    <table:table-cell office:value-type="string">
                        <text:p>C1</text:p>
                    </table:table-cell>
                    <table:table-cell office:value-type="string">
                        <text:p>D1</text:p>
                    </table:table-cell>
                </table:table-row><table:table-row table:style-name="ro1">
                    <table:table-cell office:value-type="string" table:number-columns-spanned="1" table:number-rows-spanned="2">
                        <text:p>A2:A3</text:p>
                    </table:table-cell>
                    <table:table-cell office:value-type="string" table:number-columns-spanned="3" table:number-rows-spanned="2">
                        <text:p>B2:D3</text:p>
                    </table:table-cell><table:covered-table-cell table:number-columns-repeated="2"/>
                </table:table-row><table:table-row table:style-name="ro1">
                    <table:covered-table-cell table:number-columns-repeated="4"/><table:table-cell office:value-type="string">
                        <text:p>E3</text:p>
                    </table:table-cell>
                </table:table-row><table:table-row table:style-name="ro1">
                    <table:table-cell office:value-type="string">
                        <text:p>A4</text:p>
                    </table:table-cell>
                    <table:table-cell office:value-type="string">
                        <text:p>B4</text:p>
                    </table:table-cell>
                    <table:table-cell office:value-type="string">
                        <text:p>C4</text:p>
                    </table:table-cell>
                    <table:table-cell office:value-type="string">
                        <text:p>D4</text:p>
                    </table:table-cell>
                </table:table-row>
                <table:table-row table:style-name="ro1">
                    <table:table-cell office:value-type="string">
                        <text:p>A5</text:p>
                    </table:table-cell>
                    <table:table-cell office:value-type="string">
                        <text:p>B5</text:p>
                    </table:table-cell>
                    <table:table-cell office:value-type="string">
                        <text:p>C5</text:p>
                    </table:table-cell>
                    <table:table-cell office:value-type="string">
                        <text:p>D5</text:p>
                    </table:table-cell>
                </table:table-row>
                <table:table-row table:style-name="ro1">
                    <table:table-cell office:value-type="string">
                        <text:p>A6</text:p>
                    </table:table-cell>
                    <table:table-cell office:value-type="string">
                        <text:p>B6</text:p>
                    </table:table-cell>
                    <table:table-cell office:value-type="string">
                        <text:p>C6</text:p>
                    </table:table-cell>
                    <table:table-cell office:value-type="string">
                        <text:p>D6</text:p>
                    </table:table-cell>
                </table:table-row>
            </table:table><table:named-expressions/></office:spreadsheet>
    </office:body>
</office:document-content>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: CONTENT_XML2
            obj: <?xml version="1.0" encoding="UTF-8"?>
<office:document-content
    xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0"
    xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0"
    xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0"
    xmlns:table="urn:oasis:names:tc:opendocument:xmlns:table:1.0"
    office:version="1.2"><office:scripts/>
    <office:font-face-decls/>
    <office:automatic-styles/>
    <office:body>
        <office:spreadsheet>
            <table:table table:name="Test"><table:table-column  table:number-columns-repeated="4" table:default-cell-style-name="Default"/>
                <table:table-row table:style-name="ro1">
                    <table:table-cell office:value-type="string" table:number-columns-spanned="4" table:number-rows-spanned="4">
                        <text:p>A1:D4</text:p>
                    </table:table-cell>
                    <table:covered-table-cell table:number-columns-repeated="3"/>
                    <table:table-cell office:value-type="string">
                        <text:p>E1</text:p>
                    </table:table-cell>
                </table:table-row><table:table-row table:style-name="ro1">
                    <table:covered-table-cell table:number-columns-repeated="4"/>
                    <table:table-cell office:value-type="string">
                        <text:p>E2</text:p>
                    </table:table-cell>
                </table:table-row><table:table-row table:style-name="ro1">
                    <table:covered-table-cell table:number-columns-repeated="4"/>
                    <table:table-cell office:value-type="string">
                        <text:p>E3</text:p>
                    </table:table-cell>
                </table:table-row><table:table-row table:style-name="ro1">
                    <table:covered-table-cell table:number-columns-repeated="4"/>
                    <table:table-cell office:value-type="string">
                        <text:p>E4</text:p>
                    </table:table-cell>
                </table:table-row><table:table-row table:style-name="ro1">
                    <table:table-cell office:value-type="string">
                        <text:p>A5</text:p>
                    </table:table-cell>
                    <table:table-cell office:value-type="string">
                        <text:p>B5</text:p>
                    </table:table-cell>
                    <table:table-cell office:value-type="string">
                        <text:p>C5</text:p>
                    </table:table-cell>
                    <table:table-cell office:value-type="string">
                        <text:p>D5</text:p>
                    </table:table-cell>
                    <table:table-cell office:value-type="string">
                        <text:p>E5</text:p>
                    </table:table-cell>
                </table:table-row>
            </table:table><table:named-expressions/></office:spreadsheet>
    </office:body>
</office:document-content>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: CONTENT_XML3
            obj: <?xml version="1.0" encoding="UTF-8"?>
<office:document-content
    xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0"
    xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0"
    xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0"
    xmlns:table="urn:oasis:names:tc:opendocument:xmlns:table:1.0"
    office:version="1.2"><office:scripts/>
    <office:font-face-decls/>
    <office:automatic-styles/>
    <office:body>
        <office:spreadsheet>
            <table:table table:name="Test"><table:table-column  table:number-columns-repeated="4" table:default-cell-style-name="Default"/>
                <table:table-row table:style-name="ro1">
                    <table:table-cell office:value-type="string" table:number-columns-spanned="4" table:number-rows-spanned="2">
                        <text:p>A1:D2</text:p>
                    </table:table-cell>
                    <table:covered-table-cell table:number-columns-repeated="3"/>
                    <table:table-cell office:value-type="string" table:number-rows-spanned="3">
                        <text:p>E1:E3</text:p>
                    </table:table-cell>
                    <table:table-cell office:value-type="string" table:number-columns-spanned="4" table:number-rows-spanned="2">
                        <text:p>F1:I2</text:p>
                    </table:table-cell>
                    <table:covered-table-cell table:number-columns-repeated="3"/>
                </table:table-row><table:table-row table:style-name="ro1">
                    <table:covered-table-cell table:number-columns-repeated="4"/>
                    <table:covered-table-cell/>
                    <table:covered-table-cell table:number-columns-repeated="4"/>
                </table:table-row><table:table-row table:style-name="ro1">
                    <table:table-cell office:value-type="string">
                        <text:p>A3</text:p>
                    </table:table-cell>
                    <table:table-cell office:value-type="string">
                        <text:p>B3</text:p>
                    </table:table-cell>
                    <table:table-cell office:value-type="string">
                        <text:p>C3</text:p>
                    </table:table-cell>
                    <table:table-cell office:value-type="string">
                        <text:p>D3</text:p>
                    </table:table-cell>
                    <table:covered-table-cell/>
                    <table:table-cell office:value-type="string">
                        <text:p>F3</text:p>
                    </table:table-cell>
                    <table:table-cell office:value-type="string">
                        <text:p>G3</text:p>
                    </table:table-cell>
                    <table:table-cell office:value-type="string">
                        <text:p>H3</text:p>
                    </table:table-cell>
                    <table:table-cell office:value-type="string">
                        <text:p>I3</text:p>
                    </table:table-cell>
                </table:table-row>
            </table:table><table:named-expressions/></office:spreadsheet>
    </office:body>
</office:document-content>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: TestOds1
            obj: <class 'test_py4lo_ods.TestOds1'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestOds1> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: TestOds2
            obj: <class 'test_py4lo_ods.TestOds2'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestOds2> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: TestOds3
            obj: <class 'test_py4lo_ods.TestOds3'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestOds3> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_ods.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/lib/test_py4lo_ods.py' lenresult=3 outcome='passed'> [hook]
    genitems <UnitTestCase TestOds1> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestOds1>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestOds1>
      finish pytest_make_collect_report --> <CollectReport 'test/lib/test_py4lo_ods.py::TestOds1' lenresult=5 outcome='passed'> [hook]
    genitems <TestCaseFunction test_active_table_name> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_active_table_name>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_get_item1> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_item1>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_get_item_neg1> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_item_neg1>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_get_slice> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_slice>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_list> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_list>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/lib/test_py4lo_ods.py::TestOds1' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestOds2> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestOds2>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestOds2>
      finish pytest_make_collect_report --> <CollectReport 'test/lib/test_py4lo_ods.py::TestOds2' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test_list> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_list>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/lib/test_py4lo_ods.py::TestOds2' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestOds3> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestOds3>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestOds3>
      finish pytest_make_collect_report --> <CollectReport 'test/lib/test_py4lo_ods.py::TestOds3' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test_list> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_list>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/lib/test_py4lo_ods.py::TestOds3' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/lib/test_py4lo_ods.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/lib/test_py4lo_sqlite3.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/lib/test_py4lo_sqlite3.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/lib/test_py4lo_sqlite3.py>
      find_module called for: test_py4lo_sqlite3 [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/lib/test_py4lo_sqlite3.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/lib/test_py4lo_sqlite3.py [assertion]
      early skip of rewriting module: ctypes [assertion]
      early skip of rewriting module: _ctypes [assertion]
      early skip of rewriting module: ctypes._endian [assertion]
      early skip of rewriting module: py4lo_sqlite3 [assertion]
      early skip of rewriting module: ctypes.util [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_sqlite3.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_sqlite3.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_sqlite3.py>
            name: ctypes
            obj: <module 'ctypes' from '/usr/lib/python3.10/ctypes/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_sqlite3.py>
            name: random
            obj: <module 'random' from '/usr/lib/python3.10/random.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_sqlite3.py>
            name: string
            obj: <module 'string' from '/usr/lib/python3.10/string.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_sqlite3.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_sqlite3.py>
            name: datetime
            obj: <class 'datetime.datetime'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_sqlite3.py>
            name: Path
            obj: <class 'pathlib.Path'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_sqlite3.py>
            name: sqlite_open
            obj: <function sqlite_open at 0x7f6ea567be20>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_sqlite3.py>
            name: SQLiteError
            obj: <class 'py4lo_sqlite3.SQLiteError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_sqlite3.py>
            name: TransactionMode
            obj: <enum 'TransactionMode'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_sqlite3.py>
            name: SQLITE_BUSY
            obj: 5
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_sqlite3.py>
            name: SQLITE_ERROR
            obj: 1
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_sqlite3.py>
            name: SQLITE_CONSTRAINT
            obj: 19
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_sqlite3.py>
            name: Sqlite3TestCase
            obj: <class 'test_py4lo_sqlite3.Sqlite3TestCase'>
        finish pytest_pycollect_makeitem --> <UnitTestCase Sqlite3TestCase> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/lib/test_py4lo_sqlite3.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/lib/test_py4lo_sqlite3.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase Sqlite3TestCase> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase Sqlite3TestCase>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase Sqlite3TestCase>
      finish pytest_make_collect_report --> <CollectReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase' lenresult=7 outcome='passed'> [hook]
    genitems <TestCaseFunction test_bindings> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_bindings>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_busy> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_busy>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_exec> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_exec>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_index> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_index>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_open_r_missing_file> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_open_r_missing_file>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_open_rw_missing_file> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_open_rw_missing_file>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sqlite3> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sqlite3>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase' lenresult=7 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/lib/test_py4lo_sqlite3.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/branch_processor_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/branch_processor_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/branch_processor_test.py>
      find_module called for: branch_processor_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/branch_processor_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/branch_processor_test.py [assertion]
      early skip of rewriting module: tst_env [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/branch_processor_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/branch_processor_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/branch_processor_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/branch_processor_test.py>
            name: tst_env
            obj: <module 'tst_env' from '/home/jferard/prog/python/py4lo/test/py4lo/tst_env.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/branch_processor_test.py>
            name: BranchProcessor
            obj: <class 'branch_processor.BranchProcessor'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/branch_processor_test.py>
            name: TestBranchProcessor
            obj: <class 'branch_processor_test.TestBranchProcessor'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestBranchProcessor> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/branch_processor_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/branch_processor_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase TestBranchProcessor> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestBranchProcessor>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestBranchProcessor>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor' lenresult=4 outcome='passed'> [hook]
    genitems <TestCaseFunction test_branch> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_branch>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_closed> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_closed>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_false_branch> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_false_branch>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_not_closed> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_not_closed>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/branch_processor_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/comparator_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/comparator_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/comparator_test.py>
      find_module called for: comparator_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/comparator_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/comparator_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/comparator_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/comparator_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/comparator_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/comparator_test.py>
            name: tst_env
            obj: <module 'tst_env' from '/home/jferard/prog/python/py4lo/test/py4lo/tst_env.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/comparator_test.py>
            name: Comparator
            obj: <class 'comparator.Comparator'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/comparator_test.py>
            name: TestComparator
            obj: <class 'comparator_test.TestComparator'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestComparator> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/comparator_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/comparator_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase TestComparator> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestComparator>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestComparator>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/comparator_test.py::TestComparator' lenresult=4 outcome='passed'> [hook]
    genitems <TestCaseFunction test_check_existing_var_but_number> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_check_existing_var_but_number>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_check_non_existing_var> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_check_non_existing_var>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_check_numbers> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_check_numbers>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_simple_check> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_simple_check>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/comparator_test.py::TestComparator' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/comparator_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/directive_processor_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/directive_processor_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/directive_processor_test.py>
      find_module called for: directive_processor_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/directive_processor_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/directive_processor_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: Path
            obj: <class 'pathlib.Path'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: mock
            obj: <module 'unittest.mock' from '/usr/lib/python3.10/unittest/mock.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: patch
            obj: <function patch at 0x7f6ea69c20e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: sentinel
            obj: <unittest.mock._Sentinel object at 0x7f6ea6d151b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: DEFAULT
            obj: sentinel.DEFAULT
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: ANY
            obj: <ANY>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: call
            obj: call
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: create_autospec
            obj: <function create_autospec at 0x7f6ea69c3e20>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: AsyncMock
            obj: <class 'unittest.mock.AsyncMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: FILTER_DIR
            obj: True
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: NonCallableMock
            obj: <class 'unittest.mock.NonCallableMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: NonCallableMagicMock
            obj: <class 'unittest.mock.NonCallableMagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: mock_open
            obj: <function mock_open at 0x7f6ea69cc700>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: PropertyMock
            obj: <class 'unittest.mock.PropertyMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: seal
            obj: <function seal at 0x7f6ea69cc790>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: tst_env
            obj: <module 'tst_env' from '/home/jferard/prog/python/py4lo/test/py4lo/tst_env.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: shlex
            obj: <module 'shlex' from '/usr/lib/python3.10/shlex.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: List
            obj: typing.List
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: Optional
            obj: typing.Optional
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: BranchProcessor
            obj: <class 'branch_processor.BranchProcessor'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: Comparator
            obj: <class 'comparator.Comparator'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: SourceScript
            obj: <class 'core.script.SourceScript'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: TempScript
            obj: <class 'core.script.TempScript'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: DirectiveProvider
            obj: <class 'directives.directive_provider.DirectiveProvider'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: IncludeStripper
            obj: <class 'directives.include.IncludeStripper'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: DirectiveProcessor
            obj: <class 'directive_processor.DirectiveProcessor'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: DirectiveLineProcessor
            obj: <class 'directive_processor.DirectiveLineProcessor'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: ScriptProcessor
            obj: <class 'script_set_processor.ScriptProcessor'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: TestDirectiveProcessor
            obj: <class 'directive_processor_test.TestDirectiveProcessor'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestDirectiveProcessor> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directive_processor_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/directive_processor_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase TestDirectiveProcessor> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestDirectiveProcessor>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestDirectiveProcessor>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor' lenresult=7 outcome='passed'> [hook]
    genitems <TestCaseFunction test_append_script> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_append_script>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_process_line_branch_directive> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_process_line_branch_directive>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_process_line_comment> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_process_line_comment>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_process_line_directive> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_process_line_directive>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_process_line_standard_directive> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_process_line_standard_directive>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_process_line_write> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_process_line_write>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor' lenresult=7 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/directive_processor_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/main_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/main_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/main_test.py>
      find_module called for: main_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/main_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/main_test.py [assertion]
      early skip of rewriting module: main [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/main_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/main_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/main_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/main_test.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/main_test.py>
            name: tst_env
            obj: <module 'tst_env' from '/home/jferard/prog/python/py4lo/test/py4lo/tst_env.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/main_test.py>
            name: main
            obj: <module 'main' from '/home/jferard/prog/python/py4lo/py4lo/main.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/main_test.py>
            name: MainTest
            obj: <class 'main_test.MainTest'>
        finish pytest_pycollect_makeitem --> <UnitTestCase MainTest> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/main_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/main_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase MainTest> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase MainTest>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase MainTest>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/main_test.py::MainTest' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/main_test.py::MainTest' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/main_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/script_parser_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/script_parser_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/script_parser_test.py>
      find_module called for: script_parser_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/script_parser_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/script_parser_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_parser_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_parser_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_parser_test.py>
            name: io
            obj: <module 'io' from '/usr/lib/python3.10/io.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_parser_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_parser_test.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_parser_test.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_parser_test.py>
            name: patch
            obj: <function patch at 0x7f6ea69c20e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_parser_test.py>
            name: sentinel
            obj: <unittest.mock._Sentinel object at 0x7f6ea6d151b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_parser_test.py>
            name: DEFAULT
            obj: sentinel.DEFAULT
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_parser_test.py>
            name: ANY
            obj: <ANY>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_parser_test.py>
            name: call
            obj: call
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_parser_test.py>
            name: create_autospec
            obj: <function create_autospec at 0x7f6ea69c3e20>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_parser_test.py>
            name: AsyncMock
            obj: <class 'unittest.mock.AsyncMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_parser_test.py>
            name: FILTER_DIR
            obj: True
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_parser_test.py>
            name: NonCallableMock
            obj: <class 'unittest.mock.NonCallableMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_parser_test.py>
            name: NonCallableMagicMock
            obj: <class 'unittest.mock.NonCallableMagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_parser_test.py>
            name: mock_open
            obj: <function mock_open at 0x7f6ea69cc700>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_parser_test.py>
            name: PropertyMock
            obj: <class 'unittest.mock.PropertyMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_parser_test.py>
            name: seal
            obj: <function seal at 0x7f6ea69cc790>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_parser_test.py>
            name: script_set_processor
            obj: <module 'script_set_processor' from '/home/jferard/prog/python/py4lo/py4lo/script_set_processor.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_parser_test.py>
            name: ParsedScriptContent
            obj: <class 'core.script.ParsedScriptContent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_parser_test.py>
            name: file_path_mock
            obj: <function file_path_mock at 0x7f6ea69cc9d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_parser_test.py>
            name: verify_open_path
            obj: <function verify_open_path at 0x7f6ea69ccc10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_parser_test.py>
            name: TestScriptParser
            obj: <class 'script_parser_test.TestScriptParser'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestScriptParser> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_parser_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/script_parser_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase TestScriptParser> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestScriptParser>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestScriptParser>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/script_parser_test.py::TestScriptParser' lenresult=5 outcome='passed'> [hook]
    genitems <TestCaseFunction test_one_line_function> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_one_line_function>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_one_public_function> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_one_public_function>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_script_parser_directve_line> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_script_parser_directve_line>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_script_parser_normal_line_dont_ignore> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_script_parser_normal_line_dont_ignore>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_script_parser_normal_line_ignore> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_script_parser_normal_line_ignore>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/script_parser_test.py::TestScriptParser' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/script_parser_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/script_processor_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/script_processor_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/script_processor_test.py>
      find_module called for: script_processor_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/script_processor_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/script_processor_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_processor_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_processor_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_processor_test.py>
            name: io
            obj: <module 'io' from '/usr/lib/python3.10/io.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_processor_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_processor_test.py>
            name: Logger
            obj: <class 'logging.Logger'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_processor_test.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_processor_test.py>
            name: call
            obj: call
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_processor_test.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_processor_test.py>
            name: logging
            obj: <module 'logging' from '/usr/lib/python3.10/logging/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_processor_test.py>
            name: py_compile
            obj: <module 'py_compile' from '/usr/lib/python3.10/py_compile.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_processor_test.py>
            name: re
            obj: <module 're' from '/usr/lib/python3.10/re.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_processor_test.py>
            name: Path
            obj: <class 'pathlib.Path'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_processor_test.py>
            name: List
            obj: typing.List
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_processor_test.py>
            name: Optional
            obj: typing.Optional
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_processor_test.py>
            name: Dict
            obj: typing.Dict
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_processor_test.py>
            name: Sequence
            obj: typing.Sequence
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_processor_test.py>
            name: TempScript
            obj: <class 'core.script.TempScript'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_processor_test.py>
            name: ParsedScriptContent
            obj: <class 'core.script.ParsedScriptContent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_processor_test.py>
            name: SourceScript
            obj: <class 'core.script.SourceScript'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_processor_test.py>
            name: DirectiveProcessor
            obj: <class 'directive_processor.DirectiveProcessor'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_processor_test.py>
            name: DirectiveProvider
            obj: <class 'directives.directive_provider.DirectiveProvider'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_processor_test.py>
            name: ScriptSetProcessor
            obj: <class 'script_set_processor.ScriptSetProcessor'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_processor_test.py>
            name: ScriptProcessor
            obj: <class 'script_set_processor.ScriptProcessor'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_processor_test.py>
            name: file_path_mock
            obj: <function file_path_mock at 0x7f6ea69cc9d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_processor_test.py>
            name: verify_open_path
            obj: <function verify_open_path at 0x7f6ea69ccc10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_processor_test.py>
            name: TestScriptsProcessor
            obj: <class 'script_processor_test.TestScriptsProcessor'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestScriptsProcessor> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_processor_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/script_processor_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase TestScriptsProcessor> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestScriptsProcessor>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestScriptsProcessor>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/script_processor_test.py::TestScriptsProcessor' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/script_processor_test.py::TestScriptsProcessor' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/script_processor_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/script_set_processor_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/script_set_processor_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/script_set_processor_test.py>
      find_module called for: script_set_processor_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/script_set_processor_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/script_set_processor_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: io
            obj: <module 'io' from '/usr/lib/python3.10/io.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: Logger
            obj: <class 'logging.Logger'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: patch
            obj: <function patch at 0x7f6ea69c20e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: sentinel
            obj: <unittest.mock._Sentinel object at 0x7f6ea6d151b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: DEFAULT
            obj: sentinel.DEFAULT
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: ANY
            obj: <ANY>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: call
            obj: call
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: create_autospec
            obj: <function create_autospec at 0x7f6ea69c3e20>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: AsyncMock
            obj: <class 'unittest.mock.AsyncMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: FILTER_DIR
            obj: True
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: NonCallableMock
            obj: <class 'unittest.mock.NonCallableMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: NonCallableMagicMock
            obj: <class 'unittest.mock.NonCallableMagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: mock_open
            obj: <function mock_open at 0x7f6ea69cc700>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: PropertyMock
            obj: <class 'unittest.mock.PropertyMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: seal
            obj: <function seal at 0x7f6ea69cc790>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: tst_env
            obj: <module 'tst_env' from '/home/jferard/prog/python/py4lo/test/py4lo/tst_env.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: logging
            obj: <module 'logging' from '/usr/lib/python3.10/logging/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: py_compile
            obj: <module 'py_compile' from '/usr/lib/python3.10/py_compile.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: re
            obj: <module 're' from '/usr/lib/python3.10/re.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: Path
            obj: <class 'pathlib.Path'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: List
            obj: typing.List
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: Optional
            obj: typing.Optional
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: Dict
            obj: typing.Dict
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: Sequence
            obj: typing.Sequence
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: TempScript
            obj: <class 'core.script.TempScript'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: ParsedScriptContent
            obj: <class 'core.script.ParsedScriptContent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: SourceScript
            obj: <class 'core.script.SourceScript'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: DirectiveProcessor
            obj: <class 'directive_processor.DirectiveProcessor'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: DirectiveProvider
            obj: <class 'directives.directive_provider.DirectiveProvider'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: ScriptSetProcessor
            obj: <class 'script_set_processor.ScriptSetProcessor'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: ScriptProcessor
            obj: <class 'script_set_processor.ScriptProcessor'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: script_set_processor
            obj: <module 'script_set_processor' from '/home/jferard/prog/python/py4lo/py4lo/script_set_processor.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: file_path_mock
            obj: <function file_path_mock at 0x7f6ea69cc9d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: verify_open_path
            obj: <function verify_open_path at 0x7f6ea69ccc10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: TestScriptSetProcessor
            obj: <class 'script_set_processor_test.TestScriptSetProcessor'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestScriptSetProcessor> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/script_set_processor_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/script_set_processor_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase TestScriptSetProcessor> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestScriptSetProcessor>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestScriptSetProcessor>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/script_set_processor_test.py::TestScriptSetProcessor' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test_scripts_processor> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_scripts_processor>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/script_set_processor_test.py::TestScriptSetProcessor' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/script_set_processor_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/toml_helper_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/toml_helper_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/toml_helper_test.py>
      find_module called for: toml_helper_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/toml_helper_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/toml_helper_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/toml_helper_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/toml_helper_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/toml_helper_test.py>
            name: io
            obj: <module 'io' from '/usr/lib/python3.10/io.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/toml_helper_test.py>
            name: sys
            obj: <module 'sys' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/toml_helper_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/toml_helper_test.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/toml_helper_test.py>
            name: TomlLoader
            obj: <class 'toml_helper.TomlLoader'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/toml_helper_test.py>
            name: load_toml
            obj: <function load_toml at 0x7f6ea6debc70>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/toml_helper_test.py>
            name: file_path_mock
            obj: <function file_path_mock at 0x7f6ea69cc9d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/toml_helper_test.py>
            name: file_path_error_mock
            obj: <function file_path_error_mock at 0x7f6ea69ccb80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/toml_helper_test.py>
            name: verify_open_path
            obj: <function verify_open_path at 0x7f6ea69ccc10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/toml_helper_test.py>
            name: TestTomlHelper
            obj: <class 'toml_helper_test.TestTomlHelper'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestTomlHelper> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/toml_helper_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/toml_helper_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase TestTomlHelper> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestTomlHelper>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestTomlHelper>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/toml_helper_test.py::TestTomlHelper' lenresult=4 outcome='passed'> [hook]
    genitems <TestCaseFunction test_exception> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_exception>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_load_toml> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_load_toml>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_load_toml_python_exe> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_load_toml_python_exe>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_loader> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_loader>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/toml_helper_test.py::TestTomlHelper' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/toml_helper_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/tools_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/tools_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/tools_test.py>
      find_module called for: tools_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/tools_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/tools_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/tools_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/tools_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/tools_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/tools_test.py>
            name: patch
            obj: <function patch at 0x7f6ea69c20e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/tools_test.py>
            name: call
            obj: call
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/tools_test.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/tools_test.py>
            name: subprocess
            obj: <module 'subprocess' from '/usr/lib/python3.10/subprocess.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/tools_test.py>
            name: Path
            obj: <class 'pathlib.Path'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/tools_test.py>
            name: List
            obj: typing.List
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/tools_test.py>
            name: Dict
            obj: typing.Dict
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/tools_test.py>
            name: Any
            obj: typing.Any
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/tools_test.py>
            name: Set
            obj: typing.Set
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/tools_test.py>
            name: Callable
            obj: typing.Callable
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/tools_test.py>
            name: open_with_calc
            obj: <function open_with_calc at 0x7f6ea6c2dab0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/tools_test.py>
            name: nested_merge
            obj: <function nested_merge at 0x7f6ea6c2e320>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/tools_test.py>
            name: TestTools
            obj: <class 'tools_test.TestTools'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestTools> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/tools_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/tools_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase TestTools> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestTools>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestTools>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/tools_test.py::TestTools' lenresult=2 outcome='passed'> [hook]
    genitems <TestCaseFunction test_merge> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_merge>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_open_with_calc> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_open_with_calc>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/tools_test.py::TestTools' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/tools_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/zip_updater_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/zip_updater_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/zip_updater_test.py>
      find_module called for: zip_updater_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/zip_updater_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/zip_updater_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: patch
            obj: <function patch at 0x7f6ea69c20e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: sentinel
            obj: <unittest.mock._Sentinel object at 0x7f6ea6d151b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: DEFAULT
            obj: sentinel.DEFAULT
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: ANY
            obj: <ANY>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: call
            obj: call
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: create_autospec
            obj: <function create_autospec at 0x7f6ea69c3e20>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: AsyncMock
            obj: <class 'unittest.mock.AsyncMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: FILTER_DIR
            obj: True
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: NonCallableMock
            obj: <class 'unittest.mock.NonCallableMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: NonCallableMagicMock
            obj: <class 'unittest.mock.NonCallableMagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: mock_open
            obj: <function mock_open at 0x7f6ea69cc700>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: PropertyMock
            obj: <class 'unittest.mock.PropertyMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: seal
            obj: <function seal at 0x7f6ea69cc790>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: tst_env
            obj: <module 'tst_env' from '/home/jferard/prog/python/py4lo/test/py4lo/tst_env.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: logging
            obj: <module 'logging' from '/usr/lib/python3.10/logging/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: Logger
            obj: <class 'logging.Logger'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: Path
            obj: <class 'pathlib.Path'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: List
            obj: typing.List
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: ZipFile
            obj: <class 'zipfile.ZipFile'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: ZipInfo
            obj: <class 'zipfile.ZipInfo'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: ZIP_DEFLATED
            obj: 8
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: AfterCallback
            obj: <class 'callbacks.callback.AfterCallback'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: BeforeCallback
            obj: <class 'callbacks.callback.BeforeCallback'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: ItemCallback
            obj: <class 'callbacks.callback.ItemCallback'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: ZipUpdaterBuilder
            obj: <class 'zip_updater.ZipUpdaterBuilder'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: ZipUpdater
            obj: <class 'zip_updater.ZipUpdater'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: file_path_mock
            obj: <function file_path_mock at 0x7f6ea69cc9d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: verify_open_path
            obj: <function verify_open_path at 0x7f6ea69ccc10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: TestZipUpdater
            obj: <class 'zip_updater_test.TestZipUpdater'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestZipUpdater> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/zip_updater_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/zip_updater_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase TestZipUpdater> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestZipUpdater>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestZipUpdater>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/zip_updater_test.py::TestZipUpdater' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/zip_updater_test.py::TestZipUpdater' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/zip_updater_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/callbacks/add_assets_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/callbacks/add_assets_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/callbacks/add_assets_test.py>
      find_module called for: add_assets_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/callbacks/add_assets_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/callbacks/add_assets_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_assets_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_assets_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_assets_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_assets_test.py>
            name: Path
            obj: <class 'pathlib.Path'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_assets_test.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_assets_test.py>
            name: call
            obj: call
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_assets_test.py>
            name: ZipFile
            obj: <class 'zipfile.ZipFile'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_assets_test.py>
            name: AddAssets
            obj: <class 'callbacks.add_assets.AddAssets'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_assets_test.py>
            name: DestinationAsset
            obj: <class 'core.asset.DestinationAsset'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_assets_test.py>
            name: AddAssetsTest
            obj: <class 'add_assets_test.AddAssetsTest'>
        finish pytest_pycollect_makeitem --> <UnitTestCase AddAssetsTest> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_assets_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/callbacks/add_assets_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase AddAssetsTest> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase AddAssetsTest>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase AddAssetsTest>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/callbacks/add_assets_test.py::AddAssetsTest' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test_empty> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_empty>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/callbacks/add_assets_test.py::AddAssetsTest' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/callbacks/add_assets_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/callbacks/add_debug_content_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/callbacks/add_debug_content_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/callbacks/add_debug_content_test.py>
      find_module called for: add_debug_content_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/callbacks/add_debug_content_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/callbacks/add_debug_content_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_debug_content_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_debug_content_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_debug_content_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_debug_content_test.py>
            name: tst_env
            obj: <module 'tst_env' from '/home/jferard/prog/python/py4lo/test/py4lo/tst_env.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_debug_content_test.py>
            name: callback
            obj: <module 'callbacks.callback' from '/home/jferard/prog/python/py4lo/py4lo/callbacks/callback.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_debug_content_test.py>
            name: BeforeCallback
            obj: <class 'callbacks.callback.BeforeCallback'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_debug_content_test.py>
            name: ItemCallback
            obj: <class 'callbacks.callback.ItemCallback'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_debug_content_test.py>
            name: AfterCallback
            obj: <class 'callbacks.callback.AfterCallback'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_debug_content_test.py>
            name: add_readme_with
            obj: <module 'callbacks.add_readme_with' from '/home/jferard/prog/python/py4lo/py4lo/callbacks/add_readme_with.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_debug_content_test.py>
            name: AddReadmeWith
            obj: <class 'callbacks.add_readme_with.AddReadmeWith'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_debug_content_test.py>
            name: add_assets
            obj: <module 'callbacks.add_assets' from '/home/jferard/prog/python/py4lo/py4lo/callbacks/add_assets.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_debug_content_test.py>
            name: AddAssets
            obj: <class 'callbacks.add_assets.AddAssets'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_debug_content_test.py>
            name: add_debug_content
            obj: <module 'callbacks.add_debug_content' from '/home/jferard/prog/python/py4lo/py4lo/callbacks/add_debug_content.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_debug_content_test.py>
            name: AddDebugContent
            obj: <class 'callbacks.add_debug_content.AddDebugContent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_debug_content_test.py>
            name: add_scripts
            obj: <module 'callbacks.add_scripts' from '/home/jferard/prog/python/py4lo/py4lo/callbacks/add_scripts.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_debug_content_test.py>
            name: AddScripts
            obj: <class 'callbacks.add_scripts.AddScripts'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_debug_content_test.py>
            name: ARC_SCRIPTS_PATH
            obj: Scripts/python
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_debug_content_test.py>
            name: ignore_item
            obj: <module 'callbacks.ignore_item' from '/home/jferard/prog/python/py4lo/py4lo/callbacks/ignore_item.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_debug_content_test.py>
            name: IgnoreItem
            obj: <class 'callbacks.ignore_item.IgnoreItem'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_debug_content_test.py>
            name: rewrite_manifest
            obj: <module 'callbacks.rewrite_manifest' from '/home/jferard/prog/python/py4lo/py4lo/callbacks/rewrite_manifest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_debug_content_test.py>
            name: RewriteManifest
            obj: <class 'callbacks.rewrite_manifest.RewriteManifest'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_debug_content_test.py>
            name: io
            obj: <module 'io' from '/usr/lib/python3.10/io.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_debug_content_test.py>
            name: zipfile
            obj: <module 'zipfile' from '/usr/lib/python3.10/zipfile.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_debug_content_test.py>
            name: TestAddDebugContent
            obj: <class 'add_debug_content_test.TestAddDebugContent'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestAddDebugContent> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_debug_content_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/callbacks/add_debug_content_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase TestAddDebugContent> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestAddDebugContent>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestAddDebugContent>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent' lenresult=5 outcome='passed'> [hook]
    genitems <TestCaseFunction test_add_debug_content_empty> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_add_debug_content_empty>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_add_debug_content_many_scripts> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_add_debug_content_many_scripts>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_add_debug_content_one_empty_script> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_add_debug_content_one_empty_script>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_add_debug_content_one_scripts_one_func> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_add_debug_content_one_scripts_one_func>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_add_debug_content_two_empty_scripts> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_add_debug_content_two_empty_scripts>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/callbacks/add_debug_content_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/callbacks/add_readme_with_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/callbacks/add_readme_with_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/callbacks/add_readme_with_test.py>
      find_module called for: add_readme_with_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/callbacks/add_readme_with_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/callbacks/add_readme_with_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_readme_with_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_readme_with_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_readme_with_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_readme_with_test.py>
            name: tst_env
            obj: <module 'tst_env' from '/home/jferard/prog/python/py4lo/test/py4lo/tst_env.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_readme_with_test.py>
            name: callback
            obj: <module 'callbacks.callback' from '/home/jferard/prog/python/py4lo/py4lo/callbacks/callback.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_readme_with_test.py>
            name: BeforeCallback
            obj: <class 'callbacks.callback.BeforeCallback'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_readme_with_test.py>
            name: ItemCallback
            obj: <class 'callbacks.callback.ItemCallback'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_readme_with_test.py>
            name: AfterCallback
            obj: <class 'callbacks.callback.AfterCallback'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_readme_with_test.py>
            name: add_readme_with
            obj: <module 'callbacks.add_readme_with' from '/home/jferard/prog/python/py4lo/py4lo/callbacks/add_readme_with.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_readme_with_test.py>
            name: AddReadmeWith
            obj: <class 'callbacks.add_readme_with.AddReadmeWith'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_readme_with_test.py>
            name: add_assets
            obj: <module 'callbacks.add_assets' from '/home/jferard/prog/python/py4lo/py4lo/callbacks/add_assets.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_readme_with_test.py>
            name: AddAssets
            obj: <class 'callbacks.add_assets.AddAssets'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_readme_with_test.py>
            name: add_debug_content
            obj: <module 'callbacks.add_debug_content' from '/home/jferard/prog/python/py4lo/py4lo/callbacks/add_debug_content.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_readme_with_test.py>
            name: AddDebugContent
            obj: <class 'callbacks.add_debug_content.AddDebugContent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_readme_with_test.py>
            name: add_scripts
            obj: <module 'callbacks.add_scripts' from '/home/jferard/prog/python/py4lo/py4lo/callbacks/add_scripts.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_readme_with_test.py>
            name: AddScripts
            obj: <class 'callbacks.add_scripts.AddScripts'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_readme_with_test.py>
            name: ARC_SCRIPTS_PATH
            obj: Scripts/python
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_readme_with_test.py>
            name: ignore_item
            obj: <module 'callbacks.ignore_item' from '/home/jferard/prog/python/py4lo/py4lo/callbacks/ignore_item.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_readme_with_test.py>
            name: IgnoreItem
            obj: <class 'callbacks.ignore_item.IgnoreItem'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_readme_with_test.py>
            name: rewrite_manifest
            obj: <module 'callbacks.rewrite_manifest' from '/home/jferard/prog/python/py4lo/py4lo/callbacks/rewrite_manifest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_readme_with_test.py>
            name: RewriteManifest
            obj: <class 'callbacks.rewrite_manifest.RewriteManifest'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_readme_with_test.py>
            name: io
            obj: <module 'io' from '/usr/lib/python3.10/io.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_readme_with_test.py>
            name: zipfile
            obj: <module 'zipfile' from '/usr/lib/python3.10/zipfile.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_readme_with_test.py>
            name: TestAddReadmeWith
            obj: <class 'add_readme_with_test.TestAddReadmeWith'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestAddReadmeWith> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_readme_with_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/callbacks/add_readme_with_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase TestAddReadmeWith> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestAddReadmeWith>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestAddReadmeWith>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/callbacks/add_readme_with_test.py::TestAddReadmeWith' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test_add_readme_with> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_add_readme_with>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/callbacks/add_readme_with_test.py::TestAddReadmeWith' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/callbacks/add_readme_with_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/callbacks/add_scripts_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/callbacks/add_scripts_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/callbacks/add_scripts_test.py>
      find_module called for: add_scripts_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/callbacks/add_scripts_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/callbacks/add_scripts_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_scripts_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_scripts_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_scripts_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_scripts_test.py>
            name: Logger
            obj: <class 'logging.Logger'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_scripts_test.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_scripts_test.py>
            name: call
            obj: call
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_scripts_test.py>
            name: ZipFile
            obj: <class 'zipfile.ZipFile'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_scripts_test.py>
            name: AddScripts
            obj: <class 'callbacks.add_scripts.AddScripts'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_scripts_test.py>
            name: DestinationScript
            obj: <class 'core.script.DestinationScript'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_scripts_test.py>
            name: TestAddScripts
            obj: <class 'add_scripts_test.TestAddScripts'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestAddScripts> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/add_scripts_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/callbacks/add_scripts_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase TestAddScripts> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestAddScripts>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestAddScripts>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/callbacks/add_scripts_test.py::TestAddScripts' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test_add_two_scripts> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_add_two_scripts>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/callbacks/add_scripts_test.py::TestAddScripts' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/callbacks/add_scripts_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/callbacks/ignore_item_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/callbacks/ignore_item_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/callbacks/ignore_item_test.py>
      find_module called for: ignore_item_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/callbacks/ignore_item_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/callbacks/ignore_item_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/ignore_item_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/ignore_item_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/ignore_item_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/ignore_item_test.py>
            name: Path
            obj: <class 'pathlib.Path'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/ignore_item_test.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/ignore_item_test.py>
            name: call
            obj: call
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/ignore_item_test.py>
            name: IgnoreItem
            obj: <class 'callbacks.ignore_item.IgnoreItem'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/ignore_item_test.py>
            name: TestIgnoreScripts
            obj: <class 'ignore_item_test.TestIgnoreScripts'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestIgnoreScripts> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/ignore_item_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/callbacks/ignore_item_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase TestIgnoreScripts> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestIgnoreScripts>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestIgnoreScripts>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/callbacks/ignore_item_test.py::TestIgnoreScripts' lenresult=2 outcome='passed'> [hook]
    genitems <TestCaseFunction test_dont_ignore> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_dont_ignore>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_ignore> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_ignore>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/callbacks/ignore_item_test.py::TestIgnoreScripts' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/callbacks/ignore_item_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/callbacks/rewrite_manifest_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
      find_module called for: rewrite_manifest_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/callbacks/rewrite_manifest_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/callbacks/rewrite_manifest_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: io
            obj: <module 'io' from '/usr/lib/python3.10/io.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: zipfile
            obj: <module 'zipfile' from '/usr/lib/python3.10/zipfile.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: callback
            obj: <module 'callbacks.callback' from '/home/jferard/prog/python/py4lo/py4lo/callbacks/callback.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: BeforeCallback
            obj: <class 'callbacks.callback.BeforeCallback'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: ItemCallback
            obj: <class 'callbacks.callback.ItemCallback'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: AfterCallback
            obj: <class 'callbacks.callback.AfterCallback'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: add_readme_with
            obj: <module 'callbacks.add_readme_with' from '/home/jferard/prog/python/py4lo/py4lo/callbacks/add_readme_with.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: AddReadmeWith
            obj: <class 'callbacks.add_readme_with.AddReadmeWith'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: add_assets
            obj: <module 'callbacks.add_assets' from '/home/jferard/prog/python/py4lo/py4lo/callbacks/add_assets.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: AddAssets
            obj: <class 'callbacks.add_assets.AddAssets'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: add_debug_content
            obj: <module 'callbacks.add_debug_content' from '/home/jferard/prog/python/py4lo/py4lo/callbacks/add_debug_content.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: AddDebugContent
            obj: <class 'callbacks.add_debug_content.AddDebugContent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: add_scripts
            obj: <module 'callbacks.add_scripts' from '/home/jferard/prog/python/py4lo/py4lo/callbacks/add_scripts.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: AddScripts
            obj: <class 'callbacks.add_scripts.AddScripts'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: ARC_SCRIPTS_PATH
            obj: Scripts/python
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: ignore_item
            obj: <module 'callbacks.ignore_item' from '/home/jferard/prog/python/py4lo/py4lo/callbacks/ignore_item.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: IgnoreItem
            obj: <class 'callbacks.ignore_item.IgnoreItem'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: rewrite_manifest
            obj: <module 'callbacks.rewrite_manifest' from '/home/jferard/prog/python/py4lo/py4lo/callbacks/rewrite_manifest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: RewriteManifest
            obj: <class 'callbacks.rewrite_manifest.RewriteManifest'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: DestinationAsset
            obj: <class 'core.asset.DestinationAsset'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: DestinationScript
            obj: <class 'core.script.DestinationScript'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: sys
            obj: <module 'sys' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: Path
            obj: <class 'pathlib.Path'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: test_dir
            obj: /home/jferard/prog/python/py4lo/test
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: IO
            obj: <class 'typing.IO'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: call
            obj: call
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: any_object
            obj: <function any_object at 0x7f6ea6c7d990>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: root_dir
            obj: /home/jferard/prog/python/py4lo
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: py4lo_dir
            obj: /home/jferard/prog/python/py4lo/py4lo
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: lib_dir
            obj: /home/jferard/prog/python/py4lo/lib
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: inc_dir
            obj: /home/jferard/prog/python/py4lo/inc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: p
            obj: /home/jferard/prog/python/py4lo/inc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: file_path_mock
            obj: <function file_path_mock at 0x7f6ea69cc9d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: file_path_error_mock
            obj: <function file_path_error_mock at 0x7f6ea69ccb80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: verify_open_path
            obj: <function verify_open_path at 0x7f6ea69ccc10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: compare_xml_strings
            obj: <function compare_xml_strings at 0x7f6ea69ccca0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: TestRewriteManifest
            obj: <class 'rewrite_manifest_test.TestRewriteManifest'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestRewriteManifest> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/callbacks/rewrite_manifest_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/callbacks/rewrite_manifest_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase TestRewriteManifest> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestRewriteManifest>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestRewriteManifest>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/callbacks/rewrite_manifest_test.py::TestRewriteManifest' lenresult=2 outcome='passed'> [hook]
    genitems <TestCaseFunction test_rewrite_manifest_empty> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_rewrite_manifest_empty>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_rewrite_manifest_one_script> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_rewrite_manifest_one_script>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/callbacks/rewrite_manifest_test.py::TestRewriteManifest' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/callbacks/rewrite_manifest_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/commands/command_executor_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/commands/command_executor_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/commands/command_executor_test.py>
      find_module called for: command_executor_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/commands/command_executor_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/commands/command_executor_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/command_executor_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/command_executor_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/command_executor_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/command_executor_test.py>
            name: Logger
            obj: <class 'logging.Logger'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/command_executor_test.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/command_executor_test.py>
            name: call
            obj: call
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/command_executor_test.py>
            name: Command
            obj: <class 'commands.command.Command'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/command_executor_test.py>
            name: CommandExecutor
            obj: <class 'commands.command_executor.CommandExecutor'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/command_executor_test.py>
            name: TestCommandExecutor
            obj: <class 'command_executor_test.TestCommandExecutor'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestCommandExecutor> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/command_executor_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/commands/command_executor_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase TestCommandExecutor> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestCommandExecutor>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestCommandExecutor>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/commands/command_executor_test.py::TestCommandExecutor' lenresult=2 outcome='passed'> [hook]
    genitems <TestCaseFunction test_with_previous> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_with_previous>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_without_previous> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_without_previous>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/commands/command_executor_test.py::TestCommandExecutor' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/commands/command_executor_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/commands/commands_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/commands/commands_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/commands/commands_test.py>
      find_module called for: commands_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/commands/commands_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/commands/commands_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/commands_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/commands_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/commands_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/commands_test.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/commands_test.py>
            name: commands
            obj: <commands.Commands object at 0x7f6ea6de0370>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/commands_test.py>
            name: PropertiesProvider
            obj: <class 'core.properties.PropertiesProvider'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/commands_test.py>
            name: TestCommands
            obj: <class 'commands_test.TestCommands'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestCommands> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/commands_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/commands/commands_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase TestCommands> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestCommands>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestCommands>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/commands/commands_test.py::TestCommands' lenresult=3 outcome='passed'> [hook]
    genitems <TestCaseFunction test> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_help> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_help>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_non_existing> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_non_existing>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/commands/commands_test.py::TestCommands' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/commands/commands_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/commands/debug_command_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/commands/debug_command_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/commands/debug_command_test.py>
      find_module called for: debug_command_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/commands/debug_command_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/commands/debug_command_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: Logger
            obj: <class 'logging.Logger'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: patch
            obj: <function patch at 0x7f6ea69c20e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: call
            obj: call
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: logging
            obj: <module 'logging' from '/usr/lib/python3.10/logging/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: Path
            obj: <class 'pathlib.Path'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: List
            obj: typing.List
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: Tuple
            obj: typing.Tuple
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: Dict
            obj: typing.Dict
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: zip_updater
            obj: <module 'zip_updater' from '/home/jferard/prog/python/py4lo/py4lo/zip_updater.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: IgnoreItem
            obj: <class 'callbacks.ignore_item.IgnoreItem'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: RewriteManifest
            obj: <class 'callbacks.rewrite_manifest.RewriteManifest'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: AddScripts
            obj: <class 'callbacks.add_scripts.AddScripts'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: AddAssets
            obj: <class 'callbacks.add_assets.AddAssets'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: AddDebugContent
            obj: <class 'callbacks.add_debug_content.AddDebugContent'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: Command
            obj: <class 'commands.command.Command'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: CommandExecutor
            obj: <class 'commands.command_executor.CommandExecutor'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: OdsUpdaterHelper
            obj: <class 'commands.ods_updater.OdsUpdaterHelper'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: TestCommand
            obj: <class 'commands.test_command.TestCommand'>
        finish pytest_pycollect_makeitem --> <Class TestCommand> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: DestinationAsset
            obj: <class 'core.asset.DestinationAsset'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: PropertiesProvider
            obj: <class 'core.properties.PropertiesProvider'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: Sources
            obj: <class 'core.source_dest.Sources'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: Destinations
            obj: <class 'core.source_dest.Destinations'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: DestinationScript
            obj: <class 'core.script.DestinationScript'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: DebugCommand
            obj: <class 'commands.debug_command.DebugCommand'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: TempScript
            obj: <class 'core.script.TempScript'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: TestDebugCommand
            obj: <class 'debug_command_test.TestDebugCommand'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestDebugCommand> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/debug_command_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/commands/debug_command_test.py' lenresult=2 outcome='passed'> [hook]
    genitems <Class TestCommand> [collection]
      pytest_collectstart [hook]
          collector: <Class TestCommand>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class TestCommand>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/commands/debug_command_test.py::TestCommand' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/commands/debug_command_test.py::TestCommand' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestDebugCommand> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestDebugCommand>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestDebugCommand>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/commands/debug_command_test.py::TestDebugCommand' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/commands/debug_command_test.py::TestDebugCommand' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/commands/debug_command_test.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/commands/help_command_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/commands/help_command_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/commands/help_command_test.py>
      find_module called for: help_command_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/commands/help_command_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/commands/help_command_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/help_command_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/help_command_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/help_command_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/help_command_test.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/help_command_test.py>
            name: patch
            obj: <function patch at 0x7f6ea69c20e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/help_command_test.py>
            name: call
            obj: call
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/help_command_test.py>
            name: Command
            obj: <class 'commands.command.Command'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/help_command_test.py>
            name: CommandExecutor
            obj: <class 'commands.command_executor.CommandExecutor'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/help_command_test.py>
            name: PropertiesProvider
            obj: <class 'core.properties.PropertiesProvider'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/help_command_test.py>
            name: real_command_factory_by_name
            obj: {'debug': <class 'commands.debug_command.DebugCommand'>, 'init': <class 'commands.init_command.InitCommand'>, 'test': <class 'commands.test_command.TestCommand'>, 'run': <class 'commands.run_command.RunCommand'>, 'update': <class 'commands.update_command.UpdateCommand'>}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/help_command_test.py>
            name: DEFAULT_MSG
            obj: usage: py4lo.py [-h] [-t|--help|command [args]

Python for LibreOffice.

-h, --help  show this help message and exit
command     a command = debug|help|init|test|update
        debug:          creates a debug.ods file with button for each function
        help:           show this message
        help [command]: more specific help
        init:           create a standard file
        test:           test the scripts
        run:            update + open the created file
        update:         updates the file with all scripts
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/help_command_test.py>
            name: HelpCommand
            obj: <class 'commands.help_command.HelpCommand'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/help_command_test.py>
            name: TestHelpCommand
            obj: <class 'help_command_test.TestHelpCommand'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestHelpCommand> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/help_command_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/commands/help_command_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase TestHelpCommand> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestHelpCommand>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestHelpCommand>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/commands/help_command_test.py::TestHelpCommand' lenresult=3 outcome='passed'> [hook]
    genitems <TestCaseFunction test_with_command> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_with_command>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_with_grabage> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_with_grabage>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_without_command> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_without_command>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/commands/help_command_test.py::TestHelpCommand' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/commands/help_command_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/commands/init_command_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/commands/init_command_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/commands/init_command_test.py>
      find_module called for: init_command_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/commands/init_command_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/commands/init_command_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/init_command_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/init_command_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/init_command_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/init_command_test.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/init_command_test.py>
            name: tst_env
            obj: <module 'tst_env' from '/home/jferard/prog/python/py4lo/test/py4lo/tst_env.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/init_command_test.py>
            name: List
            obj: typing.List
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/init_command_test.py>
            name: Tuple
            obj: typing.Tuple
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/init_command_test.py>
            name: Optional
            obj: typing.Optional
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/init_command_test.py>
            name: Command
            obj: <class 'commands.command.Command'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/init_command_test.py>
            name: CommandExecutor
            obj: <class 'commands.command_executor.CommandExecutor'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/init_command_test.py>
            name: DebugCommand
            obj: <class 'commands.debug_command.DebugCommand'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/init_command_test.py>
            name: OdsUpdaterHelper
            obj: <class 'commands.ods_updater.OdsUpdaterHelper'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/init_command_test.py>
            name: TestCommand
            obj: <class 'commands.test_command.TestCommand'>
        finish pytest_pycollect_makeitem --> <Class TestCommand> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/init_command_test.py>
            name: PropertiesProvider
            obj: <class 'core.properties.PropertiesProvider'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/init_command_test.py>
            name: InitCommand
            obj: <class 'commands.init_command.InitCommand'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/init_command_test.py>
            name: TestInitCommand
            obj: <class 'init_command_test.TestInitCommand'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestInitCommand> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/init_command_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/commands/init_command_test.py' lenresult=2 outcome='passed'> [hook]
    genitems <Class TestCommand> [collection]
      pytest_collectstart [hook]
          collector: <Class TestCommand>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class TestCommand>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/commands/init_command_test.py::TestCommand' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/commands/init_command_test.py::TestCommand' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestInitCommand> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestInitCommand>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestInitCommand>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/commands/init_command_test.py::TestInitCommand' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/commands/init_command_test.py::TestInitCommand' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/commands/init_command_test.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/commands/ods_updater_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/commands/ods_updater_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/commands/ods_updater_test.py>
      find_module called for: ods_updater_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/commands/ods_updater_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/commands/ods_updater_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/ods_updater_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/ods_updater_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/ods_updater_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/ods_updater_test.py>
            name: Logger
            obj: <class 'logging.Logger'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/ods_updater_test.py>
            name: Path
            obj: <class 'pathlib.Path'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/ods_updater_test.py>
            name: List
            obj: typing.List
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/ods_updater_test.py>
            name: mock
            obj: <module 'unittest.mock' from '/usr/lib/python3.10/unittest/mock.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/ods_updater_test.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/ods_updater_test.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/ods_updater_test.py>
            name: patch
            obj: <function patch at 0x7f6ea69c20e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/ods_updater_test.py>
            name: call
            obj: call
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/ods_updater_test.py>
            name: OdsUpdaterHelper
            obj: <class 'commands.ods_updater.OdsUpdaterHelper'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/ods_updater_test.py>
            name: SourceAsset
            obj: <class 'core.asset.SourceAsset'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/ods_updater_test.py>
            name: DestinationAsset
            obj: <class 'core.asset.DestinationAsset'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/ods_updater_test.py>
            name: Sources
            obj: <class 'core.source_dest.Sources'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/ods_updater_test.py>
            name: Destinations
            obj: <class 'core.source_dest.Destinations'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/ods_updater_test.py>
            name: TempScript
            obj: <class 'core.script.TempScript'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/ods_updater_test.py>
            name: SourceScript
            obj: <class 'core.script.SourceScript'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/ods_updater_test.py>
            name: DestinationScript
            obj: <class 'core.script.DestinationScript'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/ods_updater_test.py>
            name: TestOdsUpdaterHelper
            obj: <class 'ods_updater_test.TestOdsUpdaterHelper'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestOdsUpdaterHelper> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/ods_updater_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/commands/ods_updater_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase TestOdsUpdaterHelper> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestOdsUpdaterHelper>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestOdsUpdaterHelper>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/commands/ods_updater_test.py::TestOdsUpdaterHelper' lenresult=2 outcome='passed'> [hook]
    genitems <TestCaseFunction test_assets> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_assets>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_destination_scripts> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_destination_scripts>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/commands/ods_updater_test.py::TestOdsUpdaterHelper' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/commands/ods_updater_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/commands/run_command_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/commands/run_command_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/commands/run_command_test.py>
      find_module called for: run_command_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/commands/run_command_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/commands/run_command_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/run_command_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/run_command_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/run_command_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/run_command_test.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/run_command_test.py>
            name: patch
            obj: <function patch at 0x7f6ea69c20e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/run_command_test.py>
            name: call
            obj: call
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/run_command_test.py>
            name: logging
            obj: <module 'logging' from '/usr/lib/python3.10/logging/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/run_command_test.py>
            name: Path
            obj: <class 'pathlib.Path'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/run_command_test.py>
            name: Command
            obj: <class 'commands.command.Command'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/run_command_test.py>
            name: PropertiesProvider
            obj: <class 'core.properties.PropertiesProvider'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/run_command_test.py>
            name: CommandExecutor
            obj: <class 'commands.command_executor.CommandExecutor'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/run_command_test.py>
            name: UpdateCommand
            obj: <class 'commands.update_command.UpdateCommand'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/run_command_test.py>
            name: open_with_calc
            obj: <function open_with_calc at 0x7f6ea6c2dab0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/run_command_test.py>
            name: RunCommand
            obj: <class 'commands.run_command.RunCommand'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/run_command_test.py>
            name: TestRunCommand
            obj: <class 'run_command_test.TestRunCommand'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestRunCommand> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/run_command_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/commands/run_command_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase TestRunCommand> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestRunCommand>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestRunCommand>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/commands/run_command_test.py::TestRunCommand' lenresult=3 outcome='passed'> [hook]
    genitems <TestCaseFunction test> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_create> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_create>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_with_empty_tdata> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_with_empty_tdata>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/commands/run_command_test.py::TestRunCommand' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/commands/run_command_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/commands/test_command_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/commands/test_command_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/commands/test_command_test.py>
      find_module called for: test_command_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/commands/test_command_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/commands/test_command_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/test_command_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/test_command_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/test_command_test.py>
            name: subprocess
            obj: <module 'subprocess' from '/usr/lib/python3.10/subprocess.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/test_command_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/test_command_test.py>
            name: Path
            obj: <class 'pathlib.Path'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/test_command_test.py>
            name: mock
            obj: <module 'unittest.mock' from '/usr/lib/python3.10/unittest/mock.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/test_command_test.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/test_command_test.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/test_command_test.py>
            name: patch
            obj: <function patch at 0x7f6ea69c20e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/test_command_test.py>
            name: sentinel
            obj: <unittest.mock._Sentinel object at 0x7f6ea6d151b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/test_command_test.py>
            name: DEFAULT
            obj: sentinel.DEFAULT
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/test_command_test.py>
            name: ANY
            obj: <ANY>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/test_command_test.py>
            name: call
            obj: call
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/test_command_test.py>
            name: create_autospec
            obj: <function create_autospec at 0x7f6ea69c3e20>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/test_command_test.py>
            name: AsyncMock
            obj: <class 'unittest.mock.AsyncMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/test_command_test.py>
            name: FILTER_DIR
            obj: True
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/test_command_test.py>
            name: NonCallableMock
            obj: <class 'unittest.mock.NonCallableMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/test_command_test.py>
            name: NonCallableMagicMock
            obj: <class 'unittest.mock.NonCallableMagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/test_command_test.py>
            name: mock_open
            obj: <function mock_open at 0x7f6ea69cc700>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/test_command_test.py>
            name: PropertyMock
            obj: <class 'unittest.mock.PropertyMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/test_command_test.py>
            name: seal
            obj: <function seal at 0x7f6ea69cc790>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/test_command_test.py>
            name: TestCommand
            obj: <class 'commands.test_command.TestCommand'>
        finish pytest_pycollect_makeitem --> <Class TestCommand> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/test_command_test.py>
            name: TestCommandTest
            obj: <class 'test_command_test.TestCommandTest'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestCommandTest> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/test_command_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/commands/test_command_test.py' lenresult=2 outcome='passed'> [hook]
    genitems <Class TestCommand> [collection]
      pytest_collectstart [hook]
          collector: <Class TestCommand>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class TestCommand>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/commands/test_command_test.py::TestCommand' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/commands/test_command_test.py::TestCommand' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <UnitTestCase TestCommandTest> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestCommandTest>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestCommandTest>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/commands/test_command_test.py::TestCommandTest' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/commands/test_command_test.py::TestCommandTest' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/commands/test_command_test.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/commands/update_command_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/commands/update_command_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/commands/update_command_test.py>
      find_module called for: update_command_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/commands/update_command_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/commands/update_command_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/update_command_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/update_command_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/update_command_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/update_command_test.py>
            name: Logger
            obj: <class 'logging.Logger'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/update_command_test.py>
            name: Path
            obj: <class 'pathlib.Path'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/update_command_test.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/update_command_test.py>
            name: call
            obj: call
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/update_command_test.py>
            name: patch
            obj: <function patch at 0x7f6ea69c20e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/update_command_test.py>
            name: OdsUpdaterHelper
            obj: <class 'commands.ods_updater.OdsUpdaterHelper'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/update_command_test.py>
            name: UpdateCommand
            obj: <class 'commands.update_command.UpdateCommand'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/update_command_test.py>
            name: ZipUpdaterBuilder
            obj: <class 'zip_updater.ZipUpdaterBuilder'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/update_command_test.py>
            name: TestUpdateCommand
            obj: <class 'update_command_test.TestUpdateCommand'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestUpdateCommand> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/commands/update_command_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/commands/update_command_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase TestUpdateCommand> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestUpdateCommand>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestUpdateCommand>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/commands/update_command_test.py::TestUpdateCommand' lenresult=1 outcome='passed'> [hook]
    genitems <TestCaseFunction test_execute> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_execute>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/commands/update_command_test.py::TestUpdateCommand' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/commands/update_command_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/core/properties_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/core/properties_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/core/properties_test.py>
      find_module called for: properties_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/core/properties_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/core/properties_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/properties_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/properties_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/properties_test.py>
            name: io
            obj: <module 'io' from '/usr/lib/python3.10/io.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/properties_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/properties_test.py>
            name: patch
            obj: <function patch at 0x7f6ea69c20e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/properties_test.py>
            name: call
            obj: call
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/properties_test.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/properties_test.py>
            name: ZipFile
            obj: <class 'zipfile.ZipFile'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/properties_test.py>
            name: logging
            obj: <module 'logging' from '/usr/lib/python3.10/logging/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/properties_test.py>
            name: os
            obj: <module 'os' from '/usr/lib/python3.10/os.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/properties_test.py>
            name: Path
            obj: <class 'pathlib.Path'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/properties_test.py>
            name: Any
            obj: typing.Any
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/properties_test.py>
            name: Set
            obj: typing.Set
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/properties_test.py>
            name: Mapping
            obj: typing.Mapping
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/properties_test.py>
            name: AbstractSet
            obj: typing.AbstractSet
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/properties_test.py>
            name: Optional
            obj: typing.Optional
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/properties_test.py>
            name: AddReadmeWith
            obj: <class 'callbacks.add_readme_with.AddReadmeWith'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/properties_test.py>
            name: Sources
            obj: <class 'core.source_dest.Sources'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/properties_test.py>
            name: Destinations
            obj: <class 'core.source_dest.Destinations'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/properties_test.py>
            name: load_toml
            obj: <function load_toml at 0x7f6ea6debc70>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/properties_test.py>
            name: PropertiesProvider
            obj: <class 'core.properties.PropertiesProvider'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/properties_test.py>
            name: PropertiesProviderFactory
            obj: <class 'core.properties.PropertiesProviderFactory'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/properties_test.py>
            name: _get_paths
            obj: <function _get_paths at 0x7f6ea6dea950>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/properties_test.py>
            name: TestProperties
            obj: <class 'properties_test.TestProperties'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestProperties> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/properties_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/core/properties_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase TestProperties> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestProperties>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestProperties>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/core/properties_test.py::TestProperties' lenresult=4 outcome='passed'> [hook]
    genitems <TestCaseFunction test_get_paths> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_get_paths>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_provider> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_provider>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_provider_factory> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_provider_factory>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_readme> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_readme>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/core/properties_test.py::TestProperties' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/core/properties_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/core/source_dest_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/core/source_dest_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/core/source_dest_test.py>
      find_module called for: source_dest_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/core/source_dest_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/core/source_dest_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/source_dest_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/source_dest_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/source_dest_test.py>
            name: io
            obj: <module 'io' from '/usr/lib/python3.10/io.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/source_dest_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/source_dest_test.py>
            name: Path
            obj: <class 'pathlib.Path'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/source_dest_test.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/source_dest_test.py>
            name: patch
            obj: <function patch at 0x7f6ea69c20e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/source_dest_test.py>
            name: call
            obj: call
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/source_dest_test.py>
            name: SourceAsset
            obj: <class 'core.asset.SourceAsset'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/source_dest_test.py>
            name: DestinationAsset
            obj: <class 'core.asset.DestinationAsset'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/source_dest_test.py>
            name: SourceScript
            obj: <class 'core.script.SourceScript'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/source_dest_test.py>
            name: DestinationScript
            obj: <class 'core.script.DestinationScript'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/source_dest_test.py>
            name: TempScript
            obj: <class 'core.script.TempScript'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/source_dest_test.py>
            name: Sources
            obj: <class 'core.source_dest.Sources'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/source_dest_test.py>
            name: Destinations
            obj: <class 'core.source_dest.Destinations'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/source_dest_test.py>
            name: file_path_mock
            obj: <function file_path_mock at 0x7f6ea69cc9d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/source_dest_test.py>
            name: TestSourcesDests
            obj: <class 'source_dest_test.TestSourcesDests'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestSourcesDests> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/core/source_dest_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/core/source_dest_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase TestSourcesDests> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestSourcesDests>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestSourcesDests>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests' lenresult=5 outcome='passed'> [hook]
    genitems <TestCaseFunction test_destinations_assets> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_destinations_assets>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_destinations_scripts> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_destinations_scripts>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sources_assets> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sources_assets>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sources_scripts> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sources_scripts>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sources_src> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sources_src>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/core/source_dest_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/directives/directive_provider_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/directives/directive_provider_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/directives/directive_provider_test.py>
      find_module called for: directive_provider_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/directives/directive_provider_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/directives/directive_provider_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/directive_provider_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/directive_provider_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/directive_provider_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/directive_provider_test.py>
            name: TestDirectiveProvider
            obj: <class 'directive_provider_test.TestDirectiveProvider'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestDirectiveProvider> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/directive_provider_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/directives/directive_provider_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase TestDirectiveProvider> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestDirectiveProvider>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestDirectiveProvider>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/directives/directive_provider_test.py::TestDirectiveProvider' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/directives/directive_provider_test.py::TestDirectiveProvider' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/directives/directive_provider_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/directives/directive_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/directives/directive_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/directives/directive_test.py>
      find_module called for: directive_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/directives/directive_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/directives/directive_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/directive_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/directives/directive_test.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/directives/directive_test.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/directives/embed_lib_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/directives/embed_lib_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/directives/embed_lib_test.py>
      find_module called for: embed_lib_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/directives/embed_lib_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/directives/embed_lib_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/embed_lib_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/embed_lib_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/embed_lib_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/embed_lib_test.py>
            name: Path
            obj: <class 'pathlib.Path'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/embed_lib_test.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/embed_lib_test.py>
            name: call
            obj: call
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/embed_lib_test.py>
            name: SourceScript
            obj: <class 'core.script.SourceScript'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/embed_lib_test.py>
            name: EmbedLib
            obj: <class 'directives.embed_lib.EmbedLib'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/embed_lib_test.py>
            name: TestEmbedLib
            obj: <class 'embed_lib_test.TestEmbedLib'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestEmbedLib> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/embed_lib_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/directives/embed_lib_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase TestEmbedLib> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestEmbedLib>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestEmbedLib>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/directives/embed_lib_test.py::TestEmbedLib' lenresult=2 outcome='passed'> [hook]
    genitems <TestCaseFunction test_execute> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_execute>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sig_elements> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sig_elements>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/directives/embed_lib_test.py::TestEmbedLib' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/directives/embed_lib_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/directives/embed_script_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/directives/embed_script_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/directives/embed_script_test.py>
      find_module called for: embed_script_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/directives/embed_script_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/directives/embed_script_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/embed_script_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/embed_script_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/embed_script_test.py>
            name: io
            obj: <module 'io' from '/usr/lib/python3.10/io.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/embed_script_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/embed_script_test.py>
            name: Path
            obj: <class 'pathlib.Path'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/embed_script_test.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/embed_script_test.py>
            name: call
            obj: call
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/embed_script_test.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/embed_script_test.py>
            name: TempScript
            obj: <class 'core.script.TempScript'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/embed_script_test.py>
            name: EmbedScript
            obj: <class 'directives.embed_script.EmbedScript'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/embed_script_test.py>
            name: file_path_mock
            obj: <function file_path_mock at 0x7f6ea69cc9d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/embed_script_test.py>
            name: verify_open_path
            obj: <function verify_open_path at 0x7f6ea69ccc10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/embed_script_test.py>
            name: TestEmbed
            obj: <class 'embed_script_test.TestEmbed'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestEmbed> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/embed_script_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/directives/embed_script_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase TestEmbed> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestEmbed>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestEmbed>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/directives/embed_script_test.py::TestEmbed' lenresult=2 outcome='passed'> [hook]
    genitems <TestCaseFunction test_execute> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_execute>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_sig_elements> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_sig_elements>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/directives/embed_script_test.py::TestEmbed' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/directives/embed_script_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test/py4lo/directives/include_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test/py4lo/directives/include_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test/py4lo/directives/include_test.py>
      find_module called for: include_test [assertion]
      matched test file '/home/jferard/prog/python/py4lo/test/py4lo/directives/include_test.py' [assertion]
      found cached rewritten pyc for /home/jferard/prog/python/py4lo/test/py4lo/directives/include_test.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/include_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/include_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/lib/python3/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/include_test.py>
            name: io
            obj: <module 'io' from '/usr/lib/python3.10/io.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/include_test.py>
            name: unittest
            obj: <module 'unittest' from '/usr/lib/python3.10/unittest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/include_test.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/include_test.py>
            name: call
            obj: call
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/include_test.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/include_test.py>
            name: Include
            obj: <class 'directives.include.Include'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/include_test.py>
            name: file_path_mock
            obj: <function file_path_mock at 0x7f6ea69cc9d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/include_test.py>
            name: verify_open_path
            obj: <function verify_open_path at 0x7f6ea69ccc10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/include_test.py>
            name: TestInclude
            obj: <class 'include_test.TestInclude'>
        finish pytest_pycollect_makeitem --> <UnitTestCase TestInclude> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test/py4lo/directives/include_test.py>
            name: __annotations__
            obj: <attribute '__annotations__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/directives/include_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <UnitTestCase TestInclude> [collection]
      pytest_collectstart [hook]
          collector: <UnitTestCase TestInclude>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <UnitTestCase TestInclude>
      finish pytest_make_collect_report --> <CollectReport 'test/py4lo/directives/include_test.py::TestInclude' lenresult=2 outcome='passed'> [hook]
    genitems <TestCaseFunction test_with_strip> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_with_strip>
      finish pytest_itemcollected --> [] [hook]
    genitems <TestCaseFunction test_without_strip> [collection]
      pytest_itemcollected [hook]
          item: <TestCaseFunction test_without_strip>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/directives/include_test.py::TestInclude' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test/py4lo/directives/include_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          session: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          config: <_pytest.config.Config object at 0x7f6ea7780b20>
          items: [<TestCaseFunction test_uno>, <TestCaseFunction test_uno_path_to_url>, <TestCaseFunction test_uno_path_to_url_err>, <TestCaseFunction test_uno_url_to_path>, <TestCaseFunction test_uno_url_to_path_empty>, <TestCaseFunction test>, <TestCaseFunction test2>, <TestCaseFunction testCurDir>, <TestCaseFunction testSanitize>, <TestCaseFunction test_create_linux>, <TestCaseFunction test_create_linux2>, <TestCaseFunction test_get_logger>, <TestCaseFunction test_init>, <TestCaseFunction test_logger>, <TestCaseFunction test_logger_err>, <TestCaseFunction test_logger_init_twice>, <TestCaseFunction test_logger_none>, <TestCaseFunction test_read_asset>, <TestCaseFunction test_read_empty_config>, <TestCaseFunction test_read_internal_config>, <TestCaseFunction test_read_internal_config_missing>, <TestCaseFunction test_date_to_float>, <TestCaseFunction test_date_to_int>, <TestCaseFunction test_float_to_date>, <TestCaseFunction test_int_to_date>, <TestCaseFunction test_file_dialog_multiple>, <TestCaseFunction test_file_dialog_multiple_empty>, <TestCaseFunction test_file_dialog_single>, <TestCaseFunction test_file_dialog_single_no_filter>, <TestCaseFunction test_file_dialog_single_none>, <TestCaseFunction test_folder_dialog>, <TestCaseFunction test_folder_dialog_none>, <TestCaseFunction test_get_text_size>, <TestCaseFunction test_message_box>, <TestCaseFunction test_message_box_parent_win>, <TestCaseFunction test_place_widget>, <TestCaseFunction test_build>, <TestCaseFunction test_simple>, <TestCaseFunction test_simple>, <TestCaseFunction test_dispatcher>, <TestCaseFunction test_dispatcher_twice>, <TestCaseFunction test_get_cell_type>, <TestCaseFunction test_get_cell_type_formula>, <TestCaseFunction test_get_main_cell>, <TestCaseFunction test_get_named_cell>, <TestCaseFunction test_get_named_cells>, <TestCaseFunction test_get_script_provider>, <TestCaseFunction test_get_script_provider_factory_twice>, <TestCaseFunction test_get_script_provider_twice>, <TestCaseFunction test_init>, <TestCaseFunction test_parent_doc>, <TestCaseFunction test_reflect>, <TestCaseFunction test_reflect_twice>, <TestCaseFunction test_to_dict>, <TestCaseFunction test_to_iter>, <TestCaseFunction test_make_border>, <TestCaseFunction test_make_full_pv>, <TestCaseFunction test_make_full_pv2>, <TestCaseFunction test_make_locale>, <TestCaseFunction test_make_locale_subtags>, <TestCaseFunction test_make_locale_subtags_wo_region>, <TestCaseFunction test_make_pv>, <TestCaseFunction test_make_pvs>, <TestCaseFunction test_make_pvs_none>, <TestCaseFunction test_make_sort_field>, <TestCaseFunction test_struct>, <TestCaseFunction test_update_pvs>, <TestCaseFunction test_update_pvs_non_existing>, <TestCaseFunction test_copy_range>, <TestCaseFunction test_get_last_used_row>, <TestCaseFunction test_get_range_size>, <TestCaseFunction test_get_used_range_address>, <TestCaseFunction test_narrow_range>, <TestCaseFunction test_narrow_range2>, <TestCaseFunction test_narrow_range_dont_narrow_data>, <TestCaseFunction test_narrow_range_to_address>, <TestCaseFunction test_paste_range>, <TestCaseFunction test_paste_range_formulas>, <TestCaseFunction test_used_range>, <TestCaseFunction test_used_range2>, <TestCaseFunction test_data_array>, <TestCaseFunction test_data_array_no_row>, <TestCaseFunction test_row_count>, <TestCaseFunction test_row_count2>, <TestCaseFunction test_row_count_empty>, <TestCaseFunction test_row_count_no_row>, <TestCaseFunction test_row_count_one_cell>, <TestCaseFunction test_row_count_one_col>, <TestCaseFunction test_row_count_one_row>, <TestCaseFunction test_add_link>, <TestCaseFunction test_add_link_wrapped>, <TestCaseFunction test_clear_conditional_format>, <TestCaseFunction test_column_optimal_width_large>, <TestCaseFunction test_column_optimal_width_medium>, <TestCaseFunction test_column_optimal_width_small>, <TestCaseFunction test_conditional_format_on_formulas>, <TestCaseFunction test_create_filter>, <TestCaseFunction test_create_number_format_style>, <TestCaseFunction test_find_number_format_style>, <TestCaseFunction test_find_number_format_style_no_locale>, <TestCaseFunction test_get_formula_conditional_entry>, <TestCaseFunction test_get_page_style>, <TestCaseFunction test_quote_element>, <TestCaseFunction test_row_as_header>, <TestCaseFunction test_set_paper_1>, <TestCaseFunction test_set_paper_2>, <TestCaseFunction test_set_paper_3>, <TestCaseFunction test_set_paper_4>, <TestCaseFunction test_set_print_area>, <TestCaseFunction test_set_print_area_no_title>, <TestCaseFunction test_set_validation_list>, <TestCaseFunction test_set_validation_list2>, <TestCaseFunction test_set_validation_list3>, <TestCaseFunction test_sort_range>, <TestCaseFunction test_sort_range_no_header>, <TestCaseFunction test_validation_builder>, <TestCaseFunction test_wrap_text>, <TestCaseFunction test_doc_builder>, <TestCaseFunction test_doc_builder_apply>, <TestCaseFunction test_doc_builder_apply_list>, <TestCaseFunction test_doc_builder_duplicate_base_sheet>, <TestCaseFunction test_doc_builder_duplicate_to>, <TestCaseFunction test_doc_builder_make_base_sheet>, <TestCaseFunction test_doc_builder_pvs>, <TestCaseFunction test_doc_builder_sheet_names_four>, <TestCaseFunction test_doc_builder_sheet_names_three>, <TestCaseFunction test_doc_builder_sheet_names_two>, <TestCaseFunction test_doc_builder_sheet_names_two_trunc>, <TestCaseFunction test_new_doc>, <TestCaseFunction test_open_in_calc>, <TestCaseFunction test_open_in_calc_no_params>, <TestCaseFunction testUnoService>, <TestCaseFunction test_copy_row_at_index>, <TestCaseFunction test_read_empty_options>, <TestCaseFunction test_read_options>, <TestCaseFunction test_read_options_from_sheet_name>, <TestCaseFunction test_rtrim_row>, <TestCaseFunction test_mri>, <TestCaseFunction test_mri_fail>, <TestCaseFunction test_mri_fail_err>, <TestCaseFunction test_mri_fail_twice>, <TestCaseFunction test_mri_twice>, <TestCaseFunction test_use_xray_ignore>, <TestCaseFunction test_use_xray_ok>, <TestCaseFunction test_use_xray_raise>, <TestCaseFunction test_xray>, <TestCaseFunction test_xray2>, <TestCaseFunction test_xray_fail>, <TestCaseFunction test_xray_twice>, <TestCaseFunction test_create_read_cell_accurate_date>, <TestCaseFunction test_create_read_cell_accurate_empty>, <TestCaseFunction test_create_read_cell_accurate_logical>, <TestCaseFunction test_create_read_cell_accurate_number>, <TestCaseFunction test_create_read_cell_accurate_other>, <TestCaseFunction test_create_read_cell_accurate_text>, <TestCaseFunction test_create_read_cell_accurate_wo_formats>, <TestCaseFunction test_create_read_cell_minimal_empty>, <TestCaseFunction test_create_read_cell_minimal_other>, <TestCaseFunction test_create_read_cell_minimal_text>, <TestCaseFunction test_create_read_cell_minimal_value>, <TestCaseFunction test_create_read_cell_none>, <TestCaseFunction test_create_read_cell_other>, <TestCaseFunction test_create_write_cell_accurate_bool>, <TestCaseFunction test_create_write_cell_accurate_date>, <TestCaseFunction test_create_write_cell_accurate_datetime>, <TestCaseFunction test_create_write_cell_accurate_no_format>, <TestCaseFunction test_create_write_cell_accurate_none>, <TestCaseFunction test_create_write_cell_accurate_number>, <TestCaseFunction test_create_write_cell_accurate_string>, <TestCaseFunction test_create_write_cell_minimal_bool>, <TestCaseFunction test_create_write_cell_minimal_date>, <TestCaseFunction test_create_write_cell_minimal_none>, <TestCaseFunction test_create_write_cell_minimal_number>, <TestCaseFunction test_create_write_cell_minimal_string>, <TestCaseFunction test_create_write_cell_other>, <TestCaseFunction test_create_write_cell_string>, <TestCaseFunction test_dict_reader>, <TestCaseFunction test_dict_reader_fieldnames>, <TestCaseFunction test_dict_reader_fieldnames_rest>, <TestCaseFunction test_dict_writer_wc>, <TestCaseFunction test_dict_writer_wc_raise>, <TestCaseFunction test_dict_writer_wc_restval>, <TestCaseFunction test_find_number_format_style>, <TestCaseFunction test_reader>, <TestCaseFunction test_reader_accurate>, <TestCaseFunction test_reader_rc>, <TestCaseFunction test_writer_formats>, <TestCaseFunction test_writer_no_formats>, <TestCaseFunction test_writer_wc>, <TestCaseFunction test_empty_export_options>, <TestCaseFunction test_empty_import_options>, <TestCaseFunction test_export_options_dialect>, <TestCaseFunction test_export_options_two_parameters>, <TestCaseFunction test_export_to_csv>, <TestCaseFunction test_import_from_csv>, <TestCaseFunction test_import_options>, <TestCaseFunction test_import_options_dialect>, <TestCaseFunction test_import_options_two_args>, <TestCaseFunction test_active_table_name>, <TestCaseFunction test_get_item1>, <TestCaseFunction test_get_item_neg1>, <TestCaseFunction test_get_slice>, <TestCaseFunction test_list>, <TestCaseFunction test_list>, <TestCaseFunction test_list>, <TestCaseFunction test_bindings>, <TestCaseFunction test_busy>, <TestCaseFunction test_exec>, <TestCaseFunction test_index>, <TestCaseFunction test_open_r_missing_file>, <TestCaseFunction test_open_rw_missing_file>, <TestCaseFunction test_sqlite3>, <TestCaseFunction test_branch>, <TestCaseFunction test_closed>, <TestCaseFunction test_false_branch>, <TestCaseFunction test_not_closed>, <TestCaseFunction test_check_existing_var_but_number>, <TestCaseFunction test_check_non_existing_var>, <TestCaseFunction test_check_numbers>, <TestCaseFunction test_simple_check>, <TestCaseFunction test_append_script>, <TestCaseFunction test_create>, <TestCaseFunction test_process_line_branch_directive>, <TestCaseFunction test_process_line_comment>, <TestCaseFunction test_process_line_directive>, <TestCaseFunction test_process_line_standard_directive>, <TestCaseFunction test_process_line_write>, <TestCaseFunction test>, <TestCaseFunction test_one_line_function>, <TestCaseFunction test_one_public_function>, <TestCaseFunction test_script_parser_directve_line>, <TestCaseFunction test_script_parser_normal_line_dont_ignore>, <TestCaseFunction test_script_parser_normal_line_ignore>, <TestCaseFunction test>, <TestCaseFunction test_scripts_processor>, <TestCaseFunction test_exception>, <TestCaseFunction test_load_toml>, <TestCaseFunction test_load_toml_python_exe>, <TestCaseFunction test_loader>, <TestCaseFunction test_merge>, <TestCaseFunction test_open_with_calc>, <TestCaseFunction test>, <TestCaseFunction test_empty>, <TestCaseFunction test_add_debug_content_empty>, <TestCaseFunction test_add_debug_content_many_scripts>, <TestCaseFunction test_add_debug_content_one_empty_script>, <TestCaseFunction test_add_debug_content_one_scripts_one_func>, <TestCaseFunction test_add_debug_content_two_empty_scripts>, <TestCaseFunction test_add_readme_with>, <TestCaseFunction test_add_two_scripts>, <TestCaseFunction test_dont_ignore>, <TestCaseFunction test_ignore>, <TestCaseFunction test_rewrite_manifest_empty>, <TestCaseFunction test_rewrite_manifest_one_script>, <TestCaseFunction test_with_previous>, <TestCaseFunction test_without_previous>, <TestCaseFunction test>, <TestCaseFunction test_help>, <TestCaseFunction test_non_existing>, <TestCaseFunction test>, <TestCaseFunction test_with_command>, <TestCaseFunction test_with_grabage>, <TestCaseFunction test_without_command>, <TestCaseFunction test>, <TestCaseFunction test_assets>, <TestCaseFunction test_destination_scripts>, <TestCaseFunction test>, <TestCaseFunction test_create>, <TestCaseFunction test_with_empty_tdata>, <TestCaseFunction test>, <TestCaseFunction test_execute>, <TestCaseFunction test_get_paths>, <TestCaseFunction test_provider>, <TestCaseFunction test_provider_factory>, <TestCaseFunction test_readme>, <TestCaseFunction test_destinations_assets>, <TestCaseFunction test_destinations_scripts>, <TestCaseFunction test_sources_assets>, <TestCaseFunction test_sources_scripts>, <TestCaseFunction test_sources_src>, <TestCaseFunction test_execute>, <TestCaseFunction test_sig_elements>, <TestCaseFunction test_execute>, <TestCaseFunction test_sig_elements>, <TestCaseFunction test_with_strip>, <TestCaseFunction test_without_strip>]
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
            startdir: /home/jferard/prog/python/py4lo
            items: [<TestCaseFunction test_uno>, <TestCaseFunction test_uno_path_to_url>, <TestCaseFunction test_uno_path_to_url_err>, <TestCaseFunction test_uno_url_to_path>, <TestCaseFunction test_uno_url_to_path_empty>, <TestCaseFunction test>, <TestCaseFunction test2>, <TestCaseFunction testCurDir>, <TestCaseFunction testSanitize>, <TestCaseFunction test_create_linux>, <TestCaseFunction test_create_linux2>, <TestCaseFunction test_get_logger>, <TestCaseFunction test_init>, <TestCaseFunction test_logger>, <TestCaseFunction test_logger_err>, <TestCaseFunction test_logger_init_twice>, <TestCaseFunction test_logger_none>, <TestCaseFunction test_read_asset>, <TestCaseFunction test_read_empty_config>, <TestCaseFunction test_read_internal_config>, <TestCaseFunction test_read_internal_config_missing>, <TestCaseFunction test_date_to_float>, <TestCaseFunction test_date_to_int>, <TestCaseFunction test_float_to_date>, <TestCaseFunction test_int_to_date>, <TestCaseFunction test_file_dialog_multiple>, <TestCaseFunction test_file_dialog_multiple_empty>, <TestCaseFunction test_file_dialog_single>, <TestCaseFunction test_file_dialog_single_no_filter>, <TestCaseFunction test_file_dialog_single_none>, <TestCaseFunction test_folder_dialog>, <TestCaseFunction test_folder_dialog_none>, <TestCaseFunction test_get_text_size>, <TestCaseFunction test_message_box>, <TestCaseFunction test_message_box_parent_win>, <TestCaseFunction test_place_widget>, <TestCaseFunction test_build>, <TestCaseFunction test_simple>, <TestCaseFunction test_simple>, <TestCaseFunction test_dispatcher>, <TestCaseFunction test_dispatcher_twice>, <TestCaseFunction test_get_cell_type>, <TestCaseFunction test_get_cell_type_formula>, <TestCaseFunction test_get_main_cell>, <TestCaseFunction test_get_named_cell>, <TestCaseFunction test_get_named_cells>, <TestCaseFunction test_get_script_provider>, <TestCaseFunction test_get_script_provider_factory_twice>, <TestCaseFunction test_get_script_provider_twice>, <TestCaseFunction test_init>, <TestCaseFunction test_parent_doc>, <TestCaseFunction test_reflect>, <TestCaseFunction test_reflect_twice>, <TestCaseFunction test_to_dict>, <TestCaseFunction test_to_iter>, <TestCaseFunction test_make_border>, <TestCaseFunction test_make_full_pv>, <TestCaseFunction test_make_full_pv2>, <TestCaseFunction test_make_locale>, <TestCaseFunction test_make_locale_subtags>, <TestCaseFunction test_make_locale_subtags_wo_region>, <TestCaseFunction test_make_pv>, <TestCaseFunction test_make_pvs>, <TestCaseFunction test_make_pvs_none>, <TestCaseFunction test_make_sort_field>, <TestCaseFunction test_struct>, <TestCaseFunction test_update_pvs>, <TestCaseFunction test_update_pvs_non_existing>, <TestCaseFunction test_copy_range>, <TestCaseFunction test_get_last_used_row>, <TestCaseFunction test_get_range_size>, <TestCaseFunction test_get_used_range_address>, <TestCaseFunction test_narrow_range>, <TestCaseFunction test_narrow_range2>, <TestCaseFunction test_narrow_range_dont_narrow_data>, <TestCaseFunction test_narrow_range_to_address>, <TestCaseFunction test_paste_range>, <TestCaseFunction test_paste_range_formulas>, <TestCaseFunction test_used_range>, <TestCaseFunction test_used_range2>, <TestCaseFunction test_data_array>, <TestCaseFunction test_data_array_no_row>, <TestCaseFunction test_row_count>, <TestCaseFunction test_row_count2>, <TestCaseFunction test_row_count_empty>, <TestCaseFunction test_row_count_no_row>, <TestCaseFunction test_row_count_one_cell>, <TestCaseFunction test_row_count_one_col>, <TestCaseFunction test_row_count_one_row>, <TestCaseFunction test_add_link>, <TestCaseFunction test_add_link_wrapped>, <TestCaseFunction test_clear_conditional_format>, <TestCaseFunction test_column_optimal_width_large>, <TestCaseFunction test_column_optimal_width_medium>, <TestCaseFunction test_column_optimal_width_small>, <TestCaseFunction test_conditional_format_on_formulas>, <TestCaseFunction test_create_filter>, <TestCaseFunction test_create_number_format_style>, <TestCaseFunction test_find_number_format_style>, <TestCaseFunction test_find_number_format_style_no_locale>, <TestCaseFunction test_get_formula_conditional_entry>, <TestCaseFunction test_get_page_style>, <TestCaseFunction test_quote_element>, <TestCaseFunction test_row_as_header>, <TestCaseFunction test_set_paper_1>, <TestCaseFunction test_set_paper_2>, <TestCaseFunction test_set_paper_3>, <TestCaseFunction test_set_paper_4>, <TestCaseFunction test_set_print_area>, <TestCaseFunction test_set_print_area_no_title>, <TestCaseFunction test_set_validation_list>, <TestCaseFunction test_set_validation_list2>, <TestCaseFunction test_set_validation_list3>, <TestCaseFunction test_sort_range>, <TestCaseFunction test_sort_range_no_header>, <TestCaseFunction test_validation_builder>, <TestCaseFunction test_wrap_text>, <TestCaseFunction test_doc_builder>, <TestCaseFunction test_doc_builder_apply>, <TestCaseFunction test_doc_builder_apply_list>, <TestCaseFunction test_doc_builder_duplicate_base_sheet>, <TestCaseFunction test_doc_builder_duplicate_to>, <TestCaseFunction test_doc_builder_make_base_sheet>, <TestCaseFunction test_doc_builder_pvs>, <TestCaseFunction test_doc_builder_sheet_names_four>, <TestCaseFunction test_doc_builder_sheet_names_three>, <TestCaseFunction test_doc_builder_sheet_names_two>, <TestCaseFunction test_doc_builder_sheet_names_two_trunc>, <TestCaseFunction test_new_doc>, <TestCaseFunction test_open_in_calc>, <TestCaseFunction test_open_in_calc_no_params>, <TestCaseFunction testUnoService>, <TestCaseFunction test_copy_row_at_index>, <TestCaseFunction test_read_empty_options>, <TestCaseFunction test_read_options>, <TestCaseFunction test_read_options_from_sheet_name>, <TestCaseFunction test_rtrim_row>, <TestCaseFunction test_mri>, <TestCaseFunction test_mri_fail>, <TestCaseFunction test_mri_fail_err>, <TestCaseFunction test_mri_fail_twice>, <TestCaseFunction test_mri_twice>, <TestCaseFunction test_use_xray_ignore>, <TestCaseFunction test_use_xray_ok>, <TestCaseFunction test_use_xray_raise>, <TestCaseFunction test_xray>, <TestCaseFunction test_xray2>, <TestCaseFunction test_xray_fail>, <TestCaseFunction test_xray_twice>, <TestCaseFunction test_create_read_cell_accurate_date>, <TestCaseFunction test_create_read_cell_accurate_empty>, <TestCaseFunction test_create_read_cell_accurate_logical>, <TestCaseFunction test_create_read_cell_accurate_number>, <TestCaseFunction test_create_read_cell_accurate_other>, <TestCaseFunction test_create_read_cell_accurate_text>, <TestCaseFunction test_create_read_cell_accurate_wo_formats>, <TestCaseFunction test_create_read_cell_minimal_empty>, <TestCaseFunction test_create_read_cell_minimal_other>, <TestCaseFunction test_create_read_cell_minimal_text>, <TestCaseFunction test_create_read_cell_minimal_value>, <TestCaseFunction test_create_read_cell_none>, <TestCaseFunction test_create_read_cell_other>, <TestCaseFunction test_create_write_cell_accurate_bool>, <TestCaseFunction test_create_write_cell_accurate_date>, <TestCaseFunction test_create_write_cell_accurate_datetime>, <TestCaseFunction test_create_write_cell_accurate_no_format>, <TestCaseFunction test_create_write_cell_accurate_none>, <TestCaseFunction test_create_write_cell_accurate_number>, <TestCaseFunction test_create_write_cell_accurate_string>, <TestCaseFunction test_create_write_cell_minimal_bool>, <TestCaseFunction test_create_write_cell_minimal_date>, <TestCaseFunction test_create_write_cell_minimal_none>, <TestCaseFunction test_create_write_cell_minimal_number>, <TestCaseFunction test_create_write_cell_minimal_string>, <TestCaseFunction test_create_write_cell_other>, <TestCaseFunction test_create_write_cell_string>, <TestCaseFunction test_dict_reader>, <TestCaseFunction test_dict_reader_fieldnames>, <TestCaseFunction test_dict_reader_fieldnames_rest>, <TestCaseFunction test_dict_writer_wc>, <TestCaseFunction test_dict_writer_wc_raise>, <TestCaseFunction test_dict_writer_wc_restval>, <TestCaseFunction test_find_number_format_style>, <TestCaseFunction test_reader>, <TestCaseFunction test_reader_accurate>, <TestCaseFunction test_reader_rc>, <TestCaseFunction test_writer_formats>, <TestCaseFunction test_writer_no_formats>, <TestCaseFunction test_writer_wc>, <TestCaseFunction test_empty_export_options>, <TestCaseFunction test_empty_import_options>, <TestCaseFunction test_export_options_dialect>, <TestCaseFunction test_export_options_two_parameters>, <TestCaseFunction test_export_to_csv>, <TestCaseFunction test_import_from_csv>, <TestCaseFunction test_import_options>, <TestCaseFunction test_import_options_dialect>, <TestCaseFunction test_import_options_two_args>, <TestCaseFunction test_active_table_name>, <TestCaseFunction test_get_item1>, <TestCaseFunction test_get_item_neg1>, <TestCaseFunction test_get_slice>, <TestCaseFunction test_list>, <TestCaseFunction test_list>, <TestCaseFunction test_list>, <TestCaseFunction test_bindings>, <TestCaseFunction test_busy>, <TestCaseFunction test_exec>, <TestCaseFunction test_index>, <TestCaseFunction test_open_r_missing_file>, <TestCaseFunction test_open_rw_missing_file>, <TestCaseFunction test_sqlite3>, <TestCaseFunction test_branch>, <TestCaseFunction test_closed>, <TestCaseFunction test_false_branch>, <TestCaseFunction test_not_closed>, <TestCaseFunction test_check_existing_var_but_number>, <TestCaseFunction test_check_non_existing_var>, <TestCaseFunction test_check_numbers>, <TestCaseFunction test_simple_check>, <TestCaseFunction test_append_script>, <TestCaseFunction test_create>, <TestCaseFunction test_process_line_branch_directive>, <TestCaseFunction test_process_line_comment>, <TestCaseFunction test_process_line_directive>, <TestCaseFunction test_process_line_standard_directive>, <TestCaseFunction test_process_line_write>, <TestCaseFunction test>, <TestCaseFunction test_one_line_function>, <TestCaseFunction test_one_public_function>, <TestCaseFunction test_script_parser_directve_line>, <TestCaseFunction test_script_parser_normal_line_dont_ignore>, <TestCaseFunction test_script_parser_normal_line_ignore>, <TestCaseFunction test>, <TestCaseFunction test_scripts_processor>, <TestCaseFunction test_exception>, <TestCaseFunction test_load_toml>, <TestCaseFunction test_load_toml_python_exe>, <TestCaseFunction test_loader>, <TestCaseFunction test_merge>, <TestCaseFunction test_open_with_calc>, <TestCaseFunction test>, <TestCaseFunction test_empty>, <TestCaseFunction test_add_debug_content_empty>, <TestCaseFunction test_add_debug_content_many_scripts>, <TestCaseFunction test_add_debug_content_one_empty_script>, <TestCaseFunction test_add_debug_content_one_scripts_one_func>, <TestCaseFunction test_add_debug_content_two_empty_scripts>, <TestCaseFunction test_add_readme_with>, <TestCaseFunction test_add_two_scripts>, <TestCaseFunction test_dont_ignore>, <TestCaseFunction test_ignore>, <TestCaseFunction test_rewrite_manifest_empty>, <TestCaseFunction test_rewrite_manifest_one_script>, <TestCaseFunction test_with_previous>, <TestCaseFunction test_without_previous>, <TestCaseFunction test>, <TestCaseFunction test_help>, <TestCaseFunction test_non_existing>, <TestCaseFunction test>, <TestCaseFunction test_with_command>, <TestCaseFunction test_with_grabage>, <TestCaseFunction test_without_command>, <TestCaseFunction test>, <TestCaseFunction test_assets>, <TestCaseFunction test_destination_scripts>, <TestCaseFunction test>, <TestCaseFunction test_create>, <TestCaseFunction test_with_empty_tdata>, <TestCaseFunction test>, <TestCaseFunction test_execute>, <TestCaseFunction test_get_paths>, <TestCaseFunction test_provider>, <TestCaseFunction test_provider_factory>, <TestCaseFunction test_readme>, <TestCaseFunction test_destinations_assets>, <TestCaseFunction test_destinations_scripts>, <TestCaseFunction test_sources_assets>, <TestCaseFunction test_sources_scripts>, <TestCaseFunction test_sources_src>, <TestCaseFunction test_execute>, <TestCaseFunction test_sig_elements>, <TestCaseFunction test_execute>, <TestCaseFunction test_sig_elements>, <TestCaseFunction test_with_strip>, <TestCaseFunction test_without_strip>]
        finish pytest_report_collectionfinish --> [] [hook]
      finish pytest_collection_finish --> [] [hook]
    finish pytest_collection --> None [hook]
    pytest_runtestloop [hook]
        session: <Session py4lo exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=286>
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_uno>
          nextitem: <TestCaseFunction test_uno_path_to_url>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_commons.py::MiscTestCase::test_uno
            location: ('test/lib/test_py4lo_commons.py', 39, 'MiscTestCase.test_uno')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_uno>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_MiscTestCase' scope='class' baseid='test/lib/test_py4lo_commons.py::MiscTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_MiscTestCase' for <TestCaseFunction test_uno>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_uno>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_uno>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_uno>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_uno>
            nextitem: <TestCaseFunction test_uno_path_to_url>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_uno>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_commons.py::MiscTestCase::test_uno
            location: ('test/lib/test_py4lo_commons.py', 39, 'MiscTestCase.test_uno')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_uno_path_to_url>
          nextitem: <TestCaseFunction test_uno_path_to_url_err>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_path_to_url
            location: ('test/lib/test_py4lo_commons.py', 66, 'MiscTestCase.test_uno_path_to_url')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_uno_path_to_url>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_uno_path_to_url>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_path_to_url' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_path_to_url' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_path_to_url' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_uno_path_to_url>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_uno_path_to_url>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_path_to_url' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_path_to_url' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_path_to_url' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_uno_path_to_url>
            nextitem: <TestCaseFunction test_uno_path_to_url_err>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_uno_path_to_url>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_path_to_url' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_path_to_url' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_path_to_url' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_path_to_url
            location: ('test/lib/test_py4lo_commons.py', 66, 'MiscTestCase.test_uno_path_to_url')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_uno_path_to_url_err>
          nextitem: <TestCaseFunction test_uno_url_to_path>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_path_to_url_err
            location: ('test/lib/test_py4lo_commons.py', 79, 'MiscTestCase.test_uno_path_to_url_err')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_uno_path_to_url_err>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_uno_path_to_url_err>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_path_to_url_err' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_path_to_url_err' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_path_to_url_err' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_uno_path_to_url_err>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_uno_path_to_url_err>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_path_to_url_err' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_path_to_url_err' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_path_to_url_err' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_uno_path_to_url_err>
            nextitem: <TestCaseFunction test_uno_url_to_path>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_uno_path_to_url_err>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_path_to_url_err' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_path_to_url_err' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_path_to_url_err' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_path_to_url_err
            location: ('test/lib/test_py4lo_commons.py', 79, 'MiscTestCase.test_uno_path_to_url_err')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_uno_url_to_path>
          nextitem: <TestCaseFunction test_uno_url_to_path_empty>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_url_to_path
            location: ('test/lib/test_py4lo_commons.py', 44, 'MiscTestCase.test_uno_url_to_path')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_uno_url_to_path>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_uno_url_to_path>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_url_to_path' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_url_to_path' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_url_to_path' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_uno_url_to_path>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_uno_url_to_path>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_url_to_path' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_url_to_path' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_url_to_path' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_uno_url_to_path>
            nextitem: <TestCaseFunction test_uno_url_to_path_empty>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_uno_url_to_path>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_url_to_path' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_url_to_path' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_url_to_path' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_url_to_path
            location: ('test/lib/test_py4lo_commons.py', 44, 'MiscTestCase.test_uno_url_to_path')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_uno_url_to_path_empty>
          nextitem: <TestCaseFunction test>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_url_to_path_empty
            location: ('test/lib/test_py4lo_commons.py', 55, 'MiscTestCase.test_uno_url_to_path_empty')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_uno_url_to_path_empty>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_uno_url_to_path_empty>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_url_to_path_empty' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_url_to_path_empty' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_url_to_path_empty' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_uno_url_to_path_empty>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_uno_url_to_path_empty>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_url_to_path_empty' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_url_to_path_empty' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_url_to_path_empty' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_uno_url_to_path_empty>
            nextitem: <TestCaseFunction test>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_MiscTestCase' scope='class' baseid='test/lib/test_py4lo_commons.py::MiscTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_MiscTestCase' for <TestCaseFunction test_uno_url_to_path_empty>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_MiscTestCase' scope='class' baseid='test/lib/test_py4lo_commons.py::MiscTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_MiscTestCase' for <TestCaseFunction test_uno_url_to_path>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_MiscTestCase' scope='class' baseid='test/lib/test_py4lo_commons.py::MiscTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_MiscTestCase' for <TestCaseFunction test_uno_path_to_url_err>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_MiscTestCase' scope='class' baseid='test/lib/test_py4lo_commons.py::MiscTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_MiscTestCase' for <TestCaseFunction test_uno_path_to_url>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_MiscTestCase' scope='class' baseid='test/lib/test_py4lo_commons.py::MiscTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_MiscTestCase' for <TestCaseFunction test_uno>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_uno_url_to_path_empty>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_url_to_path_empty' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_url_to_path_empty' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_url_to_path_empty' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_commons.py::MiscTestCase::test_uno_url_to_path_empty
            location: ('test/lib/test_py4lo_commons.py', 55, 'MiscTestCase.test_uno_url_to_path_empty')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test>
          nextitem: <TestCaseFunction test2>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestBus::test
            location: ('test/lib/test_py4lo_commons.py', 99, 'TestBus.test')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestBus' scope='class' baseid='test/lib/test_py4lo_commons.py::TestBus'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestBus' for <TestCaseFunction test>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestBus::test' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestBus::test' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestBus::test' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestBus::test' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestBus::test' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestBus::test' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test>
            nextitem: <TestCaseFunction test2>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestBus::test' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestBus::test' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestBus::test' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestBus::test
            location: ('test/lib/test_py4lo_commons.py', 99, 'TestBus.test')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test2>
          nextitem: <TestCaseFunction testCurDir>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestBus::test2
            location: ('test/lib/test_py4lo_commons.py', 108, 'TestBus.test2')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test2>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test2>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestBus::test2' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestBus::test2' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestBus::test2' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test2>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test2>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestBus::test2' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestBus::test2' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestBus::test2' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test2>
            nextitem: <TestCaseFunction testCurDir>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestBus' scope='class' baseid='test/lib/test_py4lo_commons.py::TestBus'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestBus' for <TestCaseFunction test2>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestBus' scope='class' baseid='test/lib/test_py4lo_commons.py::TestBus'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestBus' for <TestCaseFunction test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test2>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestBus::test2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestBus::test2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestBus::test2' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestBus::test2
            location: ('test/lib/test_py4lo_commons.py', 108, 'TestBus.test2')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction testCurDir>
          nextitem: <TestCaseFunction testSanitize>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestCommons::testCurDir
            location: ('test/lib/test_py4lo_commons.py', 160, 'TestCommons.testCurDir')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction testCurDir>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestCommons' scope='class' baseid='test/lib/test_py4lo_commons.py::TestCommons'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestCommons' for <TestCaseFunction testCurDir>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction testCurDir>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::testCurDir' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::testCurDir' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::testCurDir' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction testCurDir>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction testCurDir>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::testCurDir' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::testCurDir' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::testCurDir' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction testCurDir>
            nextitem: <TestCaseFunction testSanitize>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction testCurDir>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::testCurDir' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::testCurDir' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::testCurDir' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestCommons::testCurDir
            location: ('test/lib/test_py4lo_commons.py', 160, 'TestCommons.testCurDir')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction testSanitize>
          nextitem: <TestCaseFunction test_create_linux>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestCommons::testSanitize
            location: ('test/lib/test_py4lo_commons.py', 163, 'TestCommons.testSanitize')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction testSanitize>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction testSanitize>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::testSanitize' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::testSanitize' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::testSanitize' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction testSanitize>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction testSanitize>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::testSanitize' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::testSanitize' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::testSanitize' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction testSanitize>
            nextitem: <TestCaseFunction test_create_linux>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction testSanitize>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::testSanitize' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::testSanitize' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::testSanitize' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestCommons::testSanitize
            location: ('test/lib/test_py4lo_commons.py', 163, 'TestCommons.testSanitize')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_linux>
          nextitem: <TestCaseFunction test_create_linux2>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestCommons::test_create_linux
            location: ('test/lib/test_py4lo_commons.py', 127, 'TestCommons.test_create_linux')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_linux>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_linux>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_create_linux' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_create_linux' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_create_linux' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_linux>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_linux>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_create_linux' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_create_linux' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_create_linux' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_linux>
            nextitem: <TestCaseFunction test_create_linux2>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_linux>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_create_linux' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_create_linux' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_create_linux' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestCommons::test_create_linux
            location: ('test/lib/test_py4lo_commons.py', 127, 'TestCommons.test_create_linux')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_linux2>
          nextitem: <TestCaseFunction test_get_logger>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestCommons::test_create_linux2
            location: ('test/lib/test_py4lo_commons.py', 137, 'TestCommons.test_create_linux2')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_linux2>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_linux2>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_create_linux2' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_create_linux2' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_create_linux2' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_linux2>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_linux2>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_create_linux2' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_create_linux2' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_create_linux2' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_linux2>
            nextitem: <TestCaseFunction test_get_logger>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_linux2>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_create_linux2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_create_linux2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_create_linux2' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestCommons::test_create_linux2
            location: ('test/lib/test_py4lo_commons.py', 137, 'TestCommons.test_create_linux2')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_get_logger>
          nextitem: <TestCaseFunction test_init>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestCommons::test_get_logger
            location: ('test/lib/test_py4lo_commons.py', 259, 'TestCommons.test_get_logger')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_get_logger>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_logger>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_get_logger' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_get_logger' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_get_logger' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_get_logger>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_logger>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_get_logger' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_get_logger' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_get_logger' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_get_logger>
            nextitem: <TestCaseFunction test_init>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_logger>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_get_logger' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_get_logger' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_get_logger' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestCommons::test_get_logger
            location: ('test/lib/test_py4lo_commons.py', 259, 'TestCommons.test_get_logger')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_init>
          nextitem: <TestCaseFunction test_logger>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestCommons::test_init
            location: ('test/lib/test_py4lo_commons.py', 122, 'TestCommons.test_init')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_init>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_init>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_init' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_init' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_init' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_init>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_init>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_init' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_init' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_init' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_init>
            nextitem: <TestCaseFunction test_logger>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_init>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_init' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_init' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_init' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestCommons::test_init
            location: ('test/lib/test_py4lo_commons.py', 122, 'TestCommons.test_init')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_logger>
          nextitem: <TestCaseFunction test_logger_err>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestCommons::test_logger
            location: ('test/lib/test_py4lo_commons.py', 166, 'TestCommons.test_logger')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_logger>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_logger>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_logger>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_logger>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_logger>
            nextitem: <TestCaseFunction test_logger_err>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_logger>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestCommons::test_logger
            location: ('test/lib/test_py4lo_commons.py', 166, 'TestCommons.test_logger')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_logger_err>
          nextitem: <TestCaseFunction test_logger_init_twice>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestCommons::test_logger_err
            location: ('test/lib/test_py4lo_commons.py', 193, 'TestCommons.test_logger_err')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_logger_err>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_logger_err>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger_err' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger_err' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger_err' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_logger_err>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_logger_err>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger_err' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger_err' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger_err' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_logger_err>
            nextitem: <TestCaseFunction test_logger_init_twice>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_logger_err>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger_err' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger_err' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger_err' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestCommons::test_logger_err
            location: ('test/lib/test_py4lo_commons.py', 193, 'TestCommons.test_logger_err')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_logger_init_twice>
          nextitem: <TestCaseFunction test_logger_none>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestCommons::test_logger_init_twice
            location: ('test/lib/test_py4lo_commons.py', 176, 'TestCommons.test_logger_init_twice')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_logger_init_twice>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_logger_init_twice>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger_init_twice' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger_init_twice' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger_init_twice' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_logger_init_twice>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_logger_init_twice>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger_init_twice' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger_init_twice' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger_init_twice' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_logger_init_twice>
            nextitem: <TestCaseFunction test_logger_none>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_logger_init_twice>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger_init_twice' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger_init_twice' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger_init_twice' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestCommons::test_logger_init_twice
            location: ('test/lib/test_py4lo_commons.py', 176, 'TestCommons.test_logger_init_twice')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_logger_none>
          nextitem: <TestCaseFunction test_read_asset>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestCommons::test_logger_none
            location: ('test/lib/test_py4lo_commons.py', 183, 'TestCommons.test_logger_none')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_logger_none>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_logger_none>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger_none' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger_none' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger_none' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_logger_none>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_logger_none>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger_none' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger_none' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger_none' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_logger_none>
            nextitem: <TestCaseFunction test_read_asset>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_logger_none>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger_none' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger_none' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_logger_none' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestCommons::test_logger_none
            location: ('test/lib/test_py4lo_commons.py', 183, 'TestCommons.test_logger_none')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_read_asset>
          nextitem: <TestCaseFunction test_read_empty_config>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestCommons::test_read_asset
            location: ('test/lib/test_py4lo_commons.py', 237, 'TestCommons.test_read_asset')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_read_asset>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_read_asset>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_asset' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_asset' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_asset' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_read_asset>
        early skip of rewriting module: encodings.cp437 [assertion]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_read_asset>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_asset' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_asset' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_asset' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_read_asset>
            nextitem: <TestCaseFunction test_read_empty_config>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_read_asset>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_asset' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_asset' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_asset' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestCommons::test_read_asset
            location: ('test/lib/test_py4lo_commons.py', 237, 'TestCommons.test_read_asset')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_read_empty_config>
          nextitem: <TestCaseFunction test_read_internal_config>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestCommons::test_read_empty_config
            location: ('test/lib/test_py4lo_commons.py', 255, 'TestCommons.test_read_empty_config')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_read_empty_config>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_read_empty_config>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_empty_config' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_empty_config' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_empty_config' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_read_empty_config>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_read_empty_config>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_empty_config' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_empty_config' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_empty_config' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_read_empty_config>
            nextitem: <TestCaseFunction test_read_internal_config>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_read_empty_config>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_empty_config' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_empty_config' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_empty_config' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestCommons::test_read_empty_config
            location: ('test/lib/test_py4lo_commons.py', 255, 'TestCommons.test_read_empty_config')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_read_internal_config>
          nextitem: <TestCaseFunction test_read_internal_config_missing>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestCommons::test_read_internal_config
            location: ('test/lib/test_py4lo_commons.py', 201, 'TestCommons.test_read_internal_config')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_read_internal_config>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_read_internal_config>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_internal_config' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_internal_config' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_internal_config' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_read_internal_config>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_read_internal_config>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_internal_config' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_internal_config' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_internal_config' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_read_internal_config>
            nextitem: <TestCaseFunction test_read_internal_config_missing>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_read_internal_config>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_internal_config' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_internal_config' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_internal_config' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestCommons::test_read_internal_config
            location: ('test/lib/test_py4lo_commons.py', 201, 'TestCommons.test_read_internal_config')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_read_internal_config_missing>
          nextitem: <TestCaseFunction test_date_to_float>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestCommons::test_read_internal_config_missing
            location: ('test/lib/test_py4lo_commons.py', 219, 'TestCommons.test_read_internal_config_missing')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_read_internal_config_missing>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_read_internal_config_missing>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_internal_config_missing' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_internal_config_missing' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_internal_config_missing' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_read_internal_config_missing>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_read_internal_config_missing>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_internal_config_missing' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_internal_config_missing' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_internal_config_missing' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_read_internal_config_missing>
            nextitem: <TestCaseFunction test_date_to_float>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestCommons' scope='class' baseid='test/lib/test_py4lo_commons.py::TestCommons'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestCommons' for <TestCaseFunction test_read_internal_config_missing>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestCommons' scope='class' baseid='test/lib/test_py4lo_commons.py::TestCommons'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestCommons' for <TestCaseFunction test_read_internal_config>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestCommons' scope='class' baseid='test/lib/test_py4lo_commons.py::TestCommons'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestCommons' for <TestCaseFunction test_read_empty_config>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestCommons' scope='class' baseid='test/lib/test_py4lo_commons.py::TestCommons'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestCommons' for <TestCaseFunction test_read_asset>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestCommons' scope='class' baseid='test/lib/test_py4lo_commons.py::TestCommons'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestCommons' for <TestCaseFunction test_logger_none>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestCommons' scope='class' baseid='test/lib/test_py4lo_commons.py::TestCommons'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestCommons' for <TestCaseFunction test_logger_init_twice>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestCommons' scope='class' baseid='test/lib/test_py4lo_commons.py::TestCommons'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestCommons' for <TestCaseFunction test_logger_err>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestCommons' scope='class' baseid='test/lib/test_py4lo_commons.py::TestCommons'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestCommons' for <TestCaseFunction test_logger>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestCommons' scope='class' baseid='test/lib/test_py4lo_commons.py::TestCommons'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestCommons' for <TestCaseFunction test_init>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestCommons' scope='class' baseid='test/lib/test_py4lo_commons.py::TestCommons'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestCommons' for <TestCaseFunction test_get_logger>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestCommons' scope='class' baseid='test/lib/test_py4lo_commons.py::TestCommons'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestCommons' for <TestCaseFunction test_create_linux2>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestCommons' scope='class' baseid='test/lib/test_py4lo_commons.py::TestCommons'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestCommons' for <TestCaseFunction test_create_linux>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestCommons' scope='class' baseid='test/lib/test_py4lo_commons.py::TestCommons'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestCommons' for <TestCaseFunction testSanitize>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestCommons' scope='class' baseid='test/lib/test_py4lo_commons.py::TestCommons'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestCommons' for <TestCaseFunction testCurDir>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_read_internal_config_missing>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_internal_config_missing' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_internal_config_missing' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestCommons::test_read_internal_config_missing' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestCommons::test_read_internal_config_missing
            location: ('test/lib/test_py4lo_commons.py', 219, 'TestCommons.test_read_internal_config_missing')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_date_to_float>
          nextitem: <TestCaseFunction test_date_to_int>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestDate::test_date_to_float
            location: ('test/lib/test_py4lo_commons.py', 279, 'TestDate.test_date_to_float')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_date_to_float>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestDate' scope='class' baseid='test/lib/test_py4lo_commons.py::TestDate'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestDate' for <TestCaseFunction test_date_to_float>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_date_to_float>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_date_to_float' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_date_to_float' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_date_to_float' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_date_to_float>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_date_to_float>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_date_to_float' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_date_to_float' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_date_to_float' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_date_to_float>
            nextitem: <TestCaseFunction test_date_to_int>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_date_to_float>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_date_to_float' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_date_to_float' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_date_to_float' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestDate::test_date_to_float
            location: ('test/lib/test_py4lo_commons.py', 279, 'TestDate.test_date_to_float')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_date_to_int>
          nextitem: <TestCaseFunction test_float_to_date>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestDate::test_date_to_int
            location: ('test/lib/test_py4lo_commons.py', 271, 'TestDate.test_date_to_int')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_date_to_int>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_date_to_int>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_date_to_int' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_date_to_int' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_date_to_int' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_date_to_int>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_date_to_int>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_date_to_int' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_date_to_int' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_date_to_int' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_date_to_int>
            nextitem: <TestCaseFunction test_float_to_date>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_date_to_int>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_date_to_int' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_date_to_int' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_date_to_int' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestDate::test_date_to_int
            location: ('test/lib/test_py4lo_commons.py', 271, 'TestDate.test_date_to_int')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_float_to_date>
          nextitem: <TestCaseFunction test_int_to_date>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestDate::test_float_to_date
            location: ('test/lib/test_py4lo_commons.py', 294, 'TestDate.test_float_to_date')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_float_to_date>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_float_to_date>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_float_to_date' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_float_to_date' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_float_to_date' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_float_to_date>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_float_to_date>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_float_to_date' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_float_to_date' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_float_to_date' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_float_to_date>
            nextitem: <TestCaseFunction test_int_to_date>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_float_to_date>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_float_to_date' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_float_to_date' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_float_to_date' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestDate::test_float_to_date
            location: ('test/lib/test_py4lo_commons.py', 294, 'TestDate.test_float_to_date')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_int_to_date>
          nextitem: <TestCaseFunction test_file_dialog_multiple>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestDate::test_int_to_date
            location: ('test/lib/test_py4lo_commons.py', 289, 'TestDate.test_int_to_date')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_int_to_date>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_int_to_date>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_int_to_date' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_int_to_date' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_int_to_date' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_int_to_date>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_int_to_date>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_int_to_date' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_int_to_date' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_int_to_date' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_int_to_date>
            nextitem: <TestCaseFunction test_file_dialog_multiple>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestDate' scope='class' baseid='test/lib/test_py4lo_commons.py::TestDate'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestDate' for <TestCaseFunction test_int_to_date>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestDate' scope='class' baseid='test/lib/test_py4lo_commons.py::TestDate'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestDate' for <TestCaseFunction test_float_to_date>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestDate' scope='class' baseid='test/lib/test_py4lo_commons.py::TestDate'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestDate' for <TestCaseFunction test_date_to_int>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestDate' scope='class' baseid='test/lib/test_py4lo_commons.py::TestDate'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestDate' for <TestCaseFunction test_date_to_float>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_int_to_date>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_int_to_date' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_int_to_date' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_commons.py::TestDate::test_int_to_date' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_commons.py::TestDate::test_int_to_date
            location: ('test/lib/test_py4lo_commons.py', 289, 'TestDate.test_int_to_date')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_file_dialog_multiple>
          nextitem: <TestCaseFunction test_file_dialog_multiple_empty>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_multiple
            location: ('test/lib/test_py4lo_dialogs.py', 169, 'Py4LODialogsTestCase.test_file_dialog_multiple')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_file_dialog_multiple>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LODialogsTestCase' scope='class' baseid='test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LODialogsTestCase' for <TestCaseFunction test_file_dialog_multiple>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_file_dialog_multiple>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_multiple' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_multiple' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_multiple' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_file_dialog_multiple>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_file_dialog_multiple>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_multiple' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_multiple' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_multiple' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <TestCaseFunction test_file_dialog_multiple>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError("Lists differ: ['foo', 'bar'] != []\n\nFirst list contains 2 additional elements.\nFirst extra element 0:\n'foo'\n\n- ['foo', 'bar']\n+ []") tblen=1>>
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_multiple' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_file_dialog_multiple>
            nextitem: <TestCaseFunction test_file_dialog_multiple_empty>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_file_dialog_multiple>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_multiple' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_multiple' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_multiple' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_multiple
            location: ('test/lib/test_py4lo_dialogs.py', 169, 'Py4LODialogsTestCase.test_file_dialog_multiple')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_file_dialog_multiple_empty>
          nextitem: <TestCaseFunction test_file_dialog_single>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_multiple_empty
            location: ('test/lib/test_py4lo_dialogs.py', 190, 'Py4LODialogsTestCase.test_file_dialog_multiple_empty')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_file_dialog_multiple_empty>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_file_dialog_multiple_empty>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_multiple_empty' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_multiple_empty' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_multiple_empty' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_file_dialog_multiple_empty>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_file_dialog_multiple_empty>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_multiple_empty' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_multiple_empty' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_multiple_empty' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_file_dialog_multiple_empty>
            nextitem: <TestCaseFunction test_file_dialog_single>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_file_dialog_multiple_empty>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_multiple_empty' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_multiple_empty' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_multiple_empty' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_multiple_empty
            location: ('test/lib/test_py4lo_dialogs.py', 190, 'Py4LODialogsTestCase.test_file_dialog_multiple_empty')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_file_dialog_single>
          nextitem: <TestCaseFunction test_file_dialog_single_no_filter>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single
            location: ('test/lib/test_py4lo_dialogs.py', 109, 'Py4LODialogsTestCase.test_file_dialog_single')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_file_dialog_single>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_file_dialog_single>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_file_dialog_single>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_file_dialog_single>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <TestCaseFunction test_file_dialog_single>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError("'foo' != None") tblen=1>>
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_file_dialog_single>
            nextitem: <TestCaseFunction test_file_dialog_single_no_filter>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_file_dialog_single>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single
            location: ('test/lib/test_py4lo_dialogs.py', 109, 'Py4LODialogsTestCase.test_file_dialog_single')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_file_dialog_single_no_filter>
          nextitem: <TestCaseFunction test_file_dialog_single_none>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single_no_filter
            location: ('test/lib/test_py4lo_dialogs.py', 129, 'Py4LODialogsTestCase.test_file_dialog_single_no_filter')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_file_dialog_single_no_filter>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_file_dialog_single_no_filter>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single_no_filter' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single_no_filter' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single_no_filter' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_file_dialog_single_no_filter>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_file_dialog_single_no_filter>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single_no_filter' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single_no_filter' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single_no_filter' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <TestCaseFunction test_file_dialog_single_no_filter>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError("'foo' != None") tblen=1>>
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single_no_filter' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_file_dialog_single_no_filter>
            nextitem: <TestCaseFunction test_file_dialog_single_none>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_file_dialog_single_no_filter>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single_no_filter' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single_no_filter' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single_no_filter' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single_no_filter
            location: ('test/lib/test_py4lo_dialogs.py', 129, 'Py4LODialogsTestCase.test_file_dialog_single_no_filter')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_file_dialog_single_none>
          nextitem: <TestCaseFunction test_folder_dialog>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single_none
            location: ('test/lib/test_py4lo_dialogs.py', 149, 'Py4LODialogsTestCase.test_file_dialog_single_none')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_file_dialog_single_none>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_file_dialog_single_none>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single_none' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single_none' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single_none' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_file_dialog_single_none>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_file_dialog_single_none>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single_none' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single_none' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single_none' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_file_dialog_single_none>
            nextitem: <TestCaseFunction test_folder_dialog>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_file_dialog_single_none>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single_none' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single_none' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single_none' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single_none
            location: ('test/lib/test_py4lo_dialogs.py', 149, 'Py4LODialogsTestCase.test_file_dialog_single_none')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_folder_dialog>
          nextitem: <TestCaseFunction test_folder_dialog_none>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_folder_dialog
            location: ('test/lib/test_py4lo_dialogs.py', 211, 'Py4LODialogsTestCase.test_folder_dialog')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_folder_dialog>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_folder_dialog>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_folder_dialog' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_folder_dialog' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_folder_dialog' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_folder_dialog>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_folder_dialog>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_folder_dialog' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_folder_dialog' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_folder_dialog' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <TestCaseFunction test_folder_dialog>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError("'d' != None") tblen=1>>
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_folder_dialog' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_folder_dialog>
            nextitem: <TestCaseFunction test_folder_dialog_none>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_folder_dialog>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_folder_dialog' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_folder_dialog' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_folder_dialog' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_folder_dialog
            location: ('test/lib/test_py4lo_dialogs.py', 211, 'Py4LODialogsTestCase.test_folder_dialog')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_folder_dialog_none>
          nextitem: <TestCaseFunction test_get_text_size>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_folder_dialog_none
            location: ('test/lib/test_py4lo_dialogs.py', 230, 'Py4LODialogsTestCase.test_folder_dialog_none')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_folder_dialog_none>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_folder_dialog_none>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_folder_dialog_none' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_folder_dialog_none' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_folder_dialog_none' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_folder_dialog_none>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_folder_dialog_none>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_folder_dialog_none' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_folder_dialog_none' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_folder_dialog_none' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_folder_dialog_none>
            nextitem: <TestCaseFunction test_get_text_size>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_folder_dialog_none>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_folder_dialog_none' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_folder_dialog_none' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_folder_dialog_none' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_folder_dialog_none
            location: ('test/lib/test_py4lo_dialogs.py', 230, 'Py4LODialogsTestCase.test_folder_dialog_none')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_get_text_size>
          nextitem: <TestCaseFunction test_message_box>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_get_text_size
            location: ('test/lib/test_py4lo_dialogs.py', 44, 'Py4LODialogsTestCase.test_get_text_size')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_get_text_size>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_text_size>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_get_text_size' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_get_text_size' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_get_text_size' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_get_text_size>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_text_size>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_get_text_size' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_get_text_size' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_get_text_size' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_get_text_size>
            nextitem: <TestCaseFunction test_message_box>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_text_size>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_get_text_size' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_get_text_size' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_get_text_size' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_get_text_size
            location: ('test/lib/test_py4lo_dialogs.py', 44, 'Py4LODialogsTestCase.test_get_text_size')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_message_box>
          nextitem: <TestCaseFunction test_message_box_parent_win>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_message_box
            location: ('test/lib/test_py4lo_dialogs.py', 66, 'Py4LODialogsTestCase.test_message_box')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_message_box>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_message_box>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_message_box' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_message_box' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_message_box' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_message_box>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_message_box>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_message_box' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_message_box' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_message_box' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <TestCaseFunction test_message_box>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError("[call[24 chars]it'),\n call().createMessageBox(<MagicMock name[163 chars]te()] != [call[24 chars]it'), call().createMessageBox(<MagicMock name=[100 chars]te()]") tblen=1>>
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_message_box' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_message_box>
            nextitem: <TestCaseFunction test_message_box_parent_win>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_message_box>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_message_box' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_message_box' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_message_box' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_message_box
            location: ('test/lib/test_py4lo_dialogs.py', 66, 'Py4LODialogsTestCase.test_message_box')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_message_box_parent_win>
          nextitem: <TestCaseFunction test_place_widget>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_message_box_parent_win
            location: ('test/lib/test_py4lo_dialogs.py', 87, 'Py4LODialogsTestCase.test_message_box_parent_win')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_message_box_parent_win>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_message_box_parent_win>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_message_box_parent_win' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_message_box_parent_win' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_message_box_parent_win' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_message_box_parent_win>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_message_box_parent_win>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_message_box_parent_win' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_message_box_parent_win' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_message_box_parent_win' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <TestCaseFunction test_message_box_parent_win>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError("[call[24 chars]it'), call().createMessageBox(<Mock id='140113[68 chars]te()] != [call[24 chars]it'),\n call().createMessageBox(<Mock id='14011[131 chars]te()]") tblen=1>>
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_message_box_parent_win' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_message_box_parent_win>
            nextitem: <TestCaseFunction test_place_widget>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_message_box_parent_win>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_message_box_parent_win' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_message_box_parent_win' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_message_box_parent_win' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_message_box_parent_win
            location: ('test/lib/test_py4lo_dialogs.py', 87, 'Py4LODialogsTestCase.test_message_box_parent_win')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_place_widget>
          nextitem: <TestCaseFunction test_build>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_place_widget
            location: ('test/lib/test_py4lo_dialogs.py', 31, 'Py4LODialogsTestCase.test_place_widget')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_place_widget>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_place_widget>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_place_widget' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_place_widget' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_place_widget' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_place_widget>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_place_widget>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_place_widget' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_place_widget' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_place_widget' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_place_widget>
            nextitem: <TestCaseFunction test_build>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LODialogsTestCase' scope='class' baseid='test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LODialogsTestCase' for <TestCaseFunction test_place_widget>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LODialogsTestCase' scope='class' baseid='test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LODialogsTestCase' for <TestCaseFunction test_message_box_parent_win>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LODialogsTestCase' scope='class' baseid='test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LODialogsTestCase' for <TestCaseFunction test_message_box>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LODialogsTestCase' scope='class' baseid='test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LODialogsTestCase' for <TestCaseFunction test_get_text_size>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LODialogsTestCase' scope='class' baseid='test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LODialogsTestCase' for <TestCaseFunction test_folder_dialog_none>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LODialogsTestCase' scope='class' baseid='test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LODialogsTestCase' for <TestCaseFunction test_folder_dialog>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LODialogsTestCase' scope='class' baseid='test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LODialogsTestCase' for <TestCaseFunction test_file_dialog_single_none>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LODialogsTestCase' scope='class' baseid='test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LODialogsTestCase' for <TestCaseFunction test_file_dialog_single_no_filter>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LODialogsTestCase' scope='class' baseid='test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LODialogsTestCase' for <TestCaseFunction test_file_dialog_single>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LODialogsTestCase' scope='class' baseid='test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LODialogsTestCase' for <TestCaseFunction test_file_dialog_multiple_empty>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LODialogsTestCase' scope='class' baseid='test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LODialogsTestCase' for <TestCaseFunction test_file_dialog_multiple>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_place_widget>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_place_widget' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_place_widget' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_place_widget' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_place_widget
            location: ('test/lib/test_py4lo_dialogs.py', 31, 'Py4LODialogsTestCase.test_place_widget')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_build>
          nextitem: <TestCaseFunction test_simple>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_dialogs.py::ProgressExecutorTestCase::test_build
            location: ('test/lib/test_py4lo_dialogs.py', 299, 'ProgressExecutorTestCase.test_build')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_build>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_ProgressExecutorTestCase' scope='class' baseid='test/lib/test_py4lo_dialogs.py::ProgressExecutorTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_ProgressExecutorTestCase' for <TestCaseFunction test_build>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_build>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::ProgressExecutorTestCase::test_build' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::ProgressExecutorTestCase::test_build' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::ProgressExecutorTestCase::test_build' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_build>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_build>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::ProgressExecutorTestCase::test_build' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::ProgressExecutorTestCase::test_build' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::ProgressExecutorTestCase::test_build' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_build>
            nextitem: <TestCaseFunction test_simple>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_build>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::ProgressExecutorTestCase::test_build' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::ProgressExecutorTestCase::test_build' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::ProgressExecutorTestCase::test_build' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_dialogs.py::ProgressExecutorTestCase::test_build
            location: ('test/lib/test_py4lo_dialogs.py', 299, 'ProgressExecutorTestCase.test_build')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_simple>
          nextitem: <TestCaseFunction test_simple>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_dialogs.py::ProgressExecutorTestCase::test_simple
            location: ('test/lib/test_py4lo_dialogs.py', 251, 'ProgressExecutorTestCase.test_simple')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_simple>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_simple>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::ProgressExecutorTestCase::test_simple' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::ProgressExecutorTestCase::test_simple' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::ProgressExecutorTestCase::test_simple' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_simple>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_simple>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::ProgressExecutorTestCase::test_simple' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::ProgressExecutorTestCase::test_simple' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::ProgressExecutorTestCase::test_simple' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_simple>
            nextitem: <TestCaseFunction test_simple>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_ProgressExecutorTestCase' scope='class' baseid='test/lib/test_py4lo_dialogs.py::ProgressExecutorTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_ProgressExecutorTestCase' for <TestCaseFunction test_simple>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_ProgressExecutorTestCase' scope='class' baseid='test/lib/test_py4lo_dialogs.py::ProgressExecutorTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_ProgressExecutorTestCase' for <TestCaseFunction test_build>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_simple>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::ProgressExecutorTestCase::test_simple' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::ProgressExecutorTestCase::test_simple' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::ProgressExecutorTestCase::test_simple' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_dialogs.py::ProgressExecutorTestCase::test_simple
            location: ('test/lib/test_py4lo_dialogs.py', 251, 'ProgressExecutorTestCase.test_simple')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_simple>
          nextitem: <TestCaseFunction test_dispatcher>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_dialogs.py::ConsoleExecutorTestCase::test_simple
            location: ('test/lib/test_py4lo_dialogs.py', 352, 'ConsoleExecutorTestCase.test_simple')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_simple>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_ConsoleExecutorTestCase' scope='class' baseid='test/lib/test_py4lo_dialogs.py::ConsoleExecutorTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_ConsoleExecutorTestCase' for <TestCaseFunction test_simple>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_simple>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::ConsoleExecutorTestCase::test_simple' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::ConsoleExecutorTestCase::test_simple' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::ConsoleExecutorTestCase::test_simple' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_simple>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_simple>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::ConsoleExecutorTestCase::test_simple' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::ConsoleExecutorTestCase::test_simple' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::ConsoleExecutorTestCase::test_simple' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_simple>
            nextitem: <TestCaseFunction test_dispatcher>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_ConsoleExecutorTestCase' scope='class' baseid='test/lib/test_py4lo_dialogs.py::ConsoleExecutorTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_ConsoleExecutorTestCase' for <TestCaseFunction test_simple>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_simple>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_dialogs.py::ConsoleExecutorTestCase::test_simple' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::ConsoleExecutorTestCase::test_simple' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_dialogs.py::ConsoleExecutorTestCase::test_simple' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_dialogs.py::ConsoleExecutorTestCase::test_simple
            location: ('test/lib/test_py4lo_dialogs.py', 352, 'ConsoleExecutorTestCase.test_simple')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_dispatcher>
          nextitem: <TestCaseFunction test_dispatcher_twice>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_dispatcher
            location: ('test/lib/test_py4lo_helper.py', 129, 'HelperBaseTestCase.test_dispatcher')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_dispatcher>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperBaseTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperBaseTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperBaseTestCase' for <TestCaseFunction test_dispatcher>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_dispatcher>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_dispatcher' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_dispatcher' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_dispatcher' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_dispatcher>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_dispatcher>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_dispatcher' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_dispatcher' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_dispatcher' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_dispatcher>
            nextitem: <TestCaseFunction test_dispatcher_twice>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_dispatcher>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_dispatcher' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_dispatcher' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_dispatcher' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_dispatcher
            location: ('test/lib/test_py4lo_helper.py', 129, 'HelperBaseTestCase.test_dispatcher')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_dispatcher_twice>
          nextitem: <TestCaseFunction test_get_cell_type>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_dispatcher_twice
            location: ('test/lib/test_py4lo_helper.py', 143, 'HelperBaseTestCase.test_dispatcher_twice')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_dispatcher_twice>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_dispatcher_twice>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_dispatcher_twice' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_dispatcher_twice' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_dispatcher_twice' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_dispatcher_twice>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_dispatcher_twice>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_dispatcher_twice' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_dispatcher_twice' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_dispatcher_twice' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_dispatcher_twice>
            nextitem: <TestCaseFunction test_get_cell_type>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_dispatcher_twice>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_dispatcher_twice' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_dispatcher_twice' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_dispatcher_twice' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_dispatcher_twice
            location: ('test/lib/test_py4lo_helper.py', 143, 'HelperBaseTestCase.test_dispatcher_twice')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_get_cell_type>
          nextitem: <TestCaseFunction test_get_cell_type_formula>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_cell_type
            location: ('test/lib/test_py4lo_helper.py', 195, 'HelperBaseTestCase.test_get_cell_type')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_get_cell_type>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_cell_type>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_cell_type' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_cell_type' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_cell_type' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_get_cell_type>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_cell_type>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_cell_type' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_cell_type' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_cell_type' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_get_cell_type>
            nextitem: <TestCaseFunction test_get_cell_type_formula>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_cell_type>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_cell_type' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_cell_type' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_cell_type' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_cell_type
            location: ('test/lib/test_py4lo_helper.py', 195, 'HelperBaseTestCase.test_get_cell_type')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_get_cell_type_formula>
          nextitem: <TestCaseFunction test_get_main_cell>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_cell_type_formula
            location: ('test/lib/test_py4lo_helper.py', 205, 'HelperBaseTestCase.test_get_cell_type_formula')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_get_cell_type_formula>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_cell_type_formula>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_cell_type_formula' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_cell_type_formula' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_cell_type_formula' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_get_cell_type_formula>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_cell_type_formula>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_cell_type_formula' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_cell_type_formula' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_cell_type_formula' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_get_cell_type_formula>
            nextitem: <TestCaseFunction test_get_main_cell>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_cell_type_formula>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_cell_type_formula' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_cell_type_formula' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_cell_type_formula' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_cell_type_formula
            location: ('test/lib/test_py4lo_helper.py', 205, 'HelperBaseTestCase.test_get_cell_type_formula')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_get_main_cell>
          nextitem: <TestCaseFunction test_get_named_cell>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_main_cell
            location: ('test/lib/test_py4lo_helper.py', 248, 'HelperBaseTestCase.test_get_main_cell')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_get_main_cell>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_main_cell>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_main_cell' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_main_cell' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_main_cell' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_get_main_cell>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_main_cell>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_main_cell' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_main_cell' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_main_cell' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_get_main_cell>
            nextitem: <TestCaseFunction test_get_named_cell>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_main_cell>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_main_cell' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_main_cell' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_main_cell' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_main_cell
            location: ('test/lib/test_py4lo_helper.py', 248, 'HelperBaseTestCase.test_get_main_cell')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_get_named_cell>
          nextitem: <TestCaseFunction test_get_named_cells>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_named_cell
            location: ('test/lib/test_py4lo_helper.py', 231, 'HelperBaseTestCase.test_get_named_cell')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_get_named_cell>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_named_cell>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_named_cell' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_named_cell' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_named_cell' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_get_named_cell>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_named_cell>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_named_cell' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_named_cell' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_named_cell' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_get_named_cell>
            nextitem: <TestCaseFunction test_get_named_cells>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_named_cell>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_named_cell' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_named_cell' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_named_cell' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_named_cell
            location: ('test/lib/test_py4lo_helper.py', 231, 'HelperBaseTestCase.test_get_named_cell')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_get_named_cells>
          nextitem: <TestCaseFunction test_get_script_provider>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_named_cells
            location: ('test/lib/test_py4lo_helper.py', 216, 'HelperBaseTestCase.test_get_named_cells')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_get_named_cells>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_named_cells>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_named_cells' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_named_cells' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_named_cells' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_get_named_cells>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_named_cells>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_named_cells' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_named_cells' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_named_cells' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_get_named_cells>
            nextitem: <TestCaseFunction test_get_script_provider>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_named_cells>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_named_cells' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_named_cells' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_named_cells' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_named_cells
            location: ('test/lib/test_py4lo_helper.py', 216, 'HelperBaseTestCase.test_get_named_cells')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_get_script_provider>
          nextitem: <TestCaseFunction test_get_script_provider_factory_twice>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider
            location: ('test/lib/test_py4lo_helper.py', 71, 'HelperBaseTestCase.test_get_script_provider')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_get_script_provider>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_script_provider>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_get_script_provider>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_script_provider>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_get_script_provider>
            nextitem: <TestCaseFunction test_get_script_provider_factory_twice>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_script_provider>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider
            location: ('test/lib/test_py4lo_helper.py', 71, 'HelperBaseTestCase.test_get_script_provider')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_get_script_provider_factory_twice>
          nextitem: <TestCaseFunction test_get_script_provider_twice>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider_factory_twice
            location: ('test/lib/test_py4lo_helper.py', 58, 'HelperBaseTestCase.test_get_script_provider_factory_twice')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_get_script_provider_factory_twice>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_script_provider_factory_twice>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider_factory_twice' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider_factory_twice' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider_factory_twice' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_get_script_provider_factory_twice>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_script_provider_factory_twice>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider_factory_twice' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider_factory_twice' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider_factory_twice' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_get_script_provider_factory_twice>
            nextitem: <TestCaseFunction test_get_script_provider_twice>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_script_provider_factory_twice>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider_factory_twice' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider_factory_twice' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider_factory_twice' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider_factory_twice
            location: ('test/lib/test_py4lo_helper.py', 58, 'HelperBaseTestCase.test_get_script_provider_factory_twice')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_get_script_provider_twice>
          nextitem: <TestCaseFunction test_init>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider_twice
            location: ('test/lib/test_py4lo_helper.py', 84, 'HelperBaseTestCase.test_get_script_provider_twice')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_get_script_provider_twice>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_script_provider_twice>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider_twice' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider_twice' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider_twice' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_get_script_provider_twice>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_script_provider_twice>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider_twice' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider_twice' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider_twice' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_get_script_provider_twice>
            nextitem: <TestCaseFunction test_init>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_script_provider_twice>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider_twice' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider_twice' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider_twice' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_get_script_provider_twice
            location: ('test/lib/test_py4lo_helper.py', 84, 'HelperBaseTestCase.test_get_script_provider_twice')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_init>
          nextitem: <TestCaseFunction test_parent_doc>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_init
            location: ('test/lib/test_py4lo_helper.py', 50, 'HelperBaseTestCase.test_init')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_init>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_init>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_init' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_init' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_init' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_init>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_init>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_init' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_init' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_init' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_init>
            nextitem: <TestCaseFunction test_parent_doc>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_init>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_init' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_init' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_init' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_init
            location: ('test/lib/test_py4lo_helper.py', 50, 'HelperBaseTestCase.test_init')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_parent_doc>
          nextitem: <TestCaseFunction test_reflect>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_parent_doc
            location: ('test/lib/test_py4lo_helper.py', 183, 'HelperBaseTestCase.test_parent_doc')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_parent_doc>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_parent_doc>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_parent_doc' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_parent_doc' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_parent_doc' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_parent_doc>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_parent_doc>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_parent_doc' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_parent_doc' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_parent_doc' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_parent_doc>
            nextitem: <TestCaseFunction test_reflect>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_parent_doc>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_parent_doc' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_parent_doc' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_parent_doc' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_parent_doc
            location: ('test/lib/test_py4lo_helper.py', 183, 'HelperBaseTestCase.test_parent_doc')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_reflect>
          nextitem: <TestCaseFunction test_reflect_twice>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_reflect
            location: ('test/lib/test_py4lo_helper.py', 99, 'HelperBaseTestCase.test_reflect')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_reflect>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_reflect>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_reflect' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_reflect' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_reflect' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_reflect>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_reflect>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_reflect' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_reflect' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_reflect' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_reflect>
            nextitem: <TestCaseFunction test_reflect_twice>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_reflect>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_reflect' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_reflect' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_reflect' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_reflect
            location: ('test/lib/test_py4lo_helper.py', 99, 'HelperBaseTestCase.test_reflect')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_reflect_twice>
          nextitem: <TestCaseFunction test_to_dict>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_reflect_twice
            location: ('test/lib/test_py4lo_helper.py', 113, 'HelperBaseTestCase.test_reflect_twice')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_reflect_twice>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_reflect_twice>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_reflect_twice' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_reflect_twice' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_reflect_twice' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_reflect_twice>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_reflect_twice>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_reflect_twice' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_reflect_twice' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_reflect_twice' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_reflect_twice>
            nextitem: <TestCaseFunction test_to_dict>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_reflect_twice>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_reflect_twice' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_reflect_twice' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_reflect_twice' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_reflect_twice
            location: ('test/lib/test_py4lo_helper.py', 113, 'HelperBaseTestCase.test_reflect_twice')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_to_dict>
          nextitem: <TestCaseFunction test_to_iter>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_to_dict
            location: ('test/lib/test_py4lo_helper.py', 171, 'HelperBaseTestCase.test_to_dict')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_to_dict>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_to_dict>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_to_dict' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_to_dict' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_to_dict' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_to_dict>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_to_dict>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_to_dict' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_to_dict' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_to_dict' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_to_dict>
            nextitem: <TestCaseFunction test_to_iter>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_to_dict>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_to_dict' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_to_dict' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_to_dict' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_to_dict
            location: ('test/lib/test_py4lo_helper.py', 171, 'HelperBaseTestCase.test_to_dict')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_to_iter>
          nextitem: <TestCaseFunction test_make_border>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_to_iter
            location: ('test/lib/test_py4lo_helper.py', 159, 'HelperBaseTestCase.test_to_iter')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_to_iter>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_to_iter>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_to_iter' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_to_iter' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_to_iter' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_to_iter>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_to_iter>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_to_iter' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_to_iter' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_to_iter' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_to_iter>
            nextitem: <TestCaseFunction test_make_border>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperBaseTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperBaseTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperBaseTestCase' for <TestCaseFunction test_to_iter>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperBaseTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperBaseTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperBaseTestCase' for <TestCaseFunction test_to_dict>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperBaseTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperBaseTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperBaseTestCase' for <TestCaseFunction test_reflect_twice>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperBaseTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperBaseTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperBaseTestCase' for <TestCaseFunction test_reflect>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperBaseTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperBaseTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperBaseTestCase' for <TestCaseFunction test_parent_doc>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperBaseTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperBaseTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperBaseTestCase' for <TestCaseFunction test_init>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperBaseTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperBaseTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperBaseTestCase' for <TestCaseFunction test_get_script_provider_twice>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperBaseTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperBaseTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperBaseTestCase' for <TestCaseFunction test_get_script_provider_factory_twice>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperBaseTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperBaseTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperBaseTestCase' for <TestCaseFunction test_get_script_provider>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperBaseTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperBaseTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperBaseTestCase' for <TestCaseFunction test_get_named_cells>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperBaseTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperBaseTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperBaseTestCase' for <TestCaseFunction test_get_named_cell>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperBaseTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperBaseTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperBaseTestCase' for <TestCaseFunction test_get_main_cell>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperBaseTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperBaseTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperBaseTestCase' for <TestCaseFunction test_get_cell_type_formula>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperBaseTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperBaseTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperBaseTestCase' for <TestCaseFunction test_get_cell_type>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperBaseTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperBaseTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperBaseTestCase' for <TestCaseFunction test_dispatcher_twice>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperBaseTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperBaseTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperBaseTestCase' for <TestCaseFunction test_dispatcher>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_to_iter>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_to_iter' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_to_iter' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_to_iter' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperBaseTestCase::test_to_iter
            location: ('test/lib/test_py4lo_helper.py', 159, 'HelperBaseTestCase.test_to_iter')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_make_border>
          nextitem: <TestCaseFunction test_make_full_pv>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_border
            location: ('test/lib/test_py4lo_helper.py', 360, 'HelperStructTestCase.test_make_border')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_make_border>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperStructTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperStructTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperStructTestCase' for <TestCaseFunction test_make_border>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_border>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_border' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_border' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_border' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_make_border>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_border>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_border' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_border' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_border' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_make_border>
            nextitem: <TestCaseFunction test_make_full_pv>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_border>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_border' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_border' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_border' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_border
            location: ('test/lib/test_py4lo_helper.py', 360, 'HelperStructTestCase.test_make_border')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_make_full_pv>
          nextitem: <TestCaseFunction test_make_full_pv2>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_full_pv
            location: ('test/lib/test_py4lo_helper.py', 292, 'HelperStructTestCase.test_make_full_pv')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_make_full_pv>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_full_pv>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_full_pv' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_full_pv' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_full_pv' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_make_full_pv>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_full_pv>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_full_pv' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_full_pv' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_full_pv' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_make_full_pv>
            nextitem: <TestCaseFunction test_make_full_pv2>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_full_pv>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_full_pv' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_full_pv' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_full_pv' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_full_pv
            location: ('test/lib/test_py4lo_helper.py', 292, 'HelperStructTestCase.test_make_full_pv')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_make_full_pv2>
          nextitem: <TestCaseFunction test_make_locale>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_full_pv2
            location: ('test/lib/test_py4lo_helper.py', 300, 'HelperStructTestCase.test_make_full_pv2')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_make_full_pv2>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_full_pv2>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_full_pv2' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_full_pv2' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_full_pv2' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_make_full_pv2>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_full_pv2>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_full_pv2' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_full_pv2' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_full_pv2' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_make_full_pv2>
            nextitem: <TestCaseFunction test_make_locale>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_full_pv2>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_full_pv2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_full_pv2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_full_pv2' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_full_pv2
            location: ('test/lib/test_py4lo_helper.py', 300, 'HelperStructTestCase.test_make_full_pv2')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_make_locale>
          nextitem: <TestCaseFunction test_make_locale_subtags>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale
            location: ('test/lib/test_py4lo_helper.py', 341, 'HelperStructTestCase.test_make_locale')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_make_locale>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_locale>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_make_locale>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_locale>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_make_locale>
            nextitem: <TestCaseFunction test_make_locale_subtags>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_locale>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale
            location: ('test/lib/test_py4lo_helper.py', 341, 'HelperStructTestCase.test_make_locale')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_make_locale_subtags>
          nextitem: <TestCaseFunction test_make_locale_subtags_wo_region>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale_subtags
            location: ('test/lib/test_py4lo_helper.py', 348, 'HelperStructTestCase.test_make_locale_subtags')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_make_locale_subtags>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_locale_subtags>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale_subtags' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale_subtags' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale_subtags' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_make_locale_subtags>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_locale_subtags>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale_subtags' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale_subtags' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale_subtags' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_make_locale_subtags>
            nextitem: <TestCaseFunction test_make_locale_subtags_wo_region>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_locale_subtags>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale_subtags' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale_subtags' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale_subtags' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale_subtags
            location: ('test/lib/test_py4lo_helper.py', 348, 'HelperStructTestCase.test_make_locale_subtags')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_make_locale_subtags_wo_region>
          nextitem: <TestCaseFunction test_make_pv>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale_subtags_wo_region
            location: ('test/lib/test_py4lo_helper.py', 354, 'HelperStructTestCase.test_make_locale_subtags_wo_region')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_make_locale_subtags_wo_region>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_locale_subtags_wo_region>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale_subtags_wo_region' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale_subtags_wo_region' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale_subtags_wo_region' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_make_locale_subtags_wo_region>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_locale_subtags_wo_region>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale_subtags_wo_region' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale_subtags_wo_region' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale_subtags_wo_region' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_make_locale_subtags_wo_region>
            nextitem: <TestCaseFunction test_make_pv>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_locale_subtags_wo_region>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale_subtags_wo_region' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale_subtags_wo_region' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale_subtags_wo_region' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_locale_subtags_wo_region
            location: ('test/lib/test_py4lo_helper.py', 354, 'HelperStructTestCase.test_make_locale_subtags_wo_region')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_make_pv>
          nextitem: <TestCaseFunction test_make_pvs>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pv
            location: ('test/lib/test_py4lo_helper.py', 286, 'HelperStructTestCase.test_make_pv')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_make_pv>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_pv>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pv' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pv' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pv' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_make_pv>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_pv>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pv' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pv' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pv' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_make_pv>
            nextitem: <TestCaseFunction test_make_pvs>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_pv>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pv' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pv' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pv' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pv
            location: ('test/lib/test_py4lo_helper.py', 286, 'HelperStructTestCase.test_make_pv')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_make_pvs>
          nextitem: <TestCaseFunction test_make_pvs_none>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pvs
            location: ('test/lib/test_py4lo_helper.py', 308, 'HelperStructTestCase.test_make_pvs')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_make_pvs>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_pvs>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pvs' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pvs' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pvs' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_make_pvs>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_pvs>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pvs' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pvs' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pvs' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_make_pvs>
            nextitem: <TestCaseFunction test_make_pvs_none>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_pvs>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pvs' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pvs' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pvs' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pvs
            location: ('test/lib/test_py4lo_helper.py', 308, 'HelperStructTestCase.test_make_pvs')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_make_pvs_none>
          nextitem: <TestCaseFunction test_make_sort_field>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pvs_none
            location: ('test/lib/test_py4lo_helper.py', 317, 'HelperStructTestCase.test_make_pvs_none')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_make_pvs_none>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_pvs_none>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pvs_none' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pvs_none' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pvs_none' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_make_pvs_none>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_pvs_none>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pvs_none' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pvs_none' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pvs_none' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_make_pvs_none>
            nextitem: <TestCaseFunction test_make_sort_field>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_pvs_none>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pvs_none' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pvs_none' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pvs_none' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_pvs_none
            location: ('test/lib/test_py4lo_helper.py', 317, 'HelperStructTestCase.test_make_pvs_none')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_make_sort_field>
          nextitem: <TestCaseFunction test_struct>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_sort_field
            location: ('test/lib/test_py4lo_helper.py', 368, 'HelperStructTestCase.test_make_sort_field')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_make_sort_field>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_sort_field>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_sort_field' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_sort_field' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_sort_field' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_make_sort_field>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_sort_field>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_sort_field' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_sort_field' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_sort_field' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_make_sort_field>
            nextitem: <TestCaseFunction test_struct>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_make_sort_field>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_sort_field' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_sort_field' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_sort_field' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperStructTestCase::test_make_sort_field
            location: ('test/lib/test_py4lo_helper.py', 368, 'HelperStructTestCase.test_make_sort_field')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_struct>
          nextitem: <TestCaseFunction test_update_pvs>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperStructTestCase::test_struct
            location: ('test/lib/test_py4lo_helper.py', 273, 'HelperStructTestCase.test_struct')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_struct>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_struct>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_struct' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_struct' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_struct' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_struct>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_struct>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_struct' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_struct' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_struct' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_struct>
            nextitem: <TestCaseFunction test_update_pvs>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_struct>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_struct' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_struct' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_struct' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperStructTestCase::test_struct
            location: ('test/lib/test_py4lo_helper.py', 273, 'HelperStructTestCase.test_struct')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_update_pvs>
          nextitem: <TestCaseFunction test_update_pvs_non_existing>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperStructTestCase::test_update_pvs
            location: ('test/lib/test_py4lo_helper.py', 321, 'HelperStructTestCase.test_update_pvs')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_update_pvs>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_update_pvs>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_update_pvs' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_update_pvs' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_update_pvs' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_update_pvs>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_update_pvs>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_update_pvs' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_update_pvs' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_update_pvs' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_update_pvs>
            nextitem: <TestCaseFunction test_update_pvs_non_existing>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_update_pvs>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_update_pvs' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_update_pvs' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_update_pvs' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperStructTestCase::test_update_pvs
            location: ('test/lib/test_py4lo_helper.py', 321, 'HelperStructTestCase.test_update_pvs')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_update_pvs_non_existing>
          nextitem: <TestCaseFunction test_copy_range>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperStructTestCase::test_update_pvs_non_existing
            location: ('test/lib/test_py4lo_helper.py', 331, 'HelperStructTestCase.test_update_pvs_non_existing')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_update_pvs_non_existing>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_update_pvs_non_existing>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_update_pvs_non_existing' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_update_pvs_non_existing' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_update_pvs_non_existing' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_update_pvs_non_existing>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_update_pvs_non_existing>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_update_pvs_non_existing' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_update_pvs_non_existing' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_update_pvs_non_existing' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_update_pvs_non_existing>
            nextitem: <TestCaseFunction test_copy_range>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperStructTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperStructTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperStructTestCase' for <TestCaseFunction test_update_pvs_non_existing>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperStructTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperStructTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperStructTestCase' for <TestCaseFunction test_update_pvs>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperStructTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperStructTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperStructTestCase' for <TestCaseFunction test_struct>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperStructTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperStructTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperStructTestCase' for <TestCaseFunction test_make_sort_field>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperStructTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperStructTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperStructTestCase' for <TestCaseFunction test_make_pvs_none>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperStructTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperStructTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperStructTestCase' for <TestCaseFunction test_make_pvs>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperStructTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperStructTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperStructTestCase' for <TestCaseFunction test_make_pv>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperStructTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperStructTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperStructTestCase' for <TestCaseFunction test_make_locale_subtags_wo_region>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperStructTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperStructTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperStructTestCase' for <TestCaseFunction test_make_locale_subtags>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperStructTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperStructTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperStructTestCase' for <TestCaseFunction test_make_locale>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperStructTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperStructTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperStructTestCase' for <TestCaseFunction test_make_full_pv2>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperStructTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperStructTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperStructTestCase' for <TestCaseFunction test_make_full_pv>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperStructTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperStructTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperStructTestCase' for <TestCaseFunction test_make_border>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_update_pvs_non_existing>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_update_pvs_non_existing' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_update_pvs_non_existing' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperStructTestCase::test_update_pvs_non_existing' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperStructTestCase::test_update_pvs_non_existing
            location: ('test/lib/test_py4lo_helper.py', 331, 'HelperStructTestCase.test_update_pvs_non_existing')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_copy_range>
          nextitem: <TestCaseFunction test_get_last_used_row>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_copy_range
            location: ('test/lib/test_py4lo_helper.py', 499, 'HelperRangesTestCase.test_copy_range')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_copy_range>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperRangesTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperRangesTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperRangesTestCase' for <TestCaseFunction test_copy_range>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_copy_range>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_copy_range' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_copy_range' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_copy_range' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_copy_range>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_copy_range>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_copy_range' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_copy_range' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_copy_range' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_copy_range>
            nextitem: <TestCaseFunction test_get_last_used_row>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_copy_range>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_copy_range' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_copy_range' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_copy_range' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_copy_range
            location: ('test/lib/test_py4lo_helper.py', 499, 'HelperRangesTestCase.test_copy_range')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_get_last_used_row>
          nextitem: <TestCaseFunction test_get_range_size>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_last_used_row
            location: ('test/lib/test_py4lo_helper.py', 402, 'HelperRangesTestCase.test_get_last_used_row')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_get_last_used_row>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_last_used_row>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_last_used_row' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_last_used_row' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_last_used_row' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_get_last_used_row>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_last_used_row>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_last_used_row' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_last_used_row' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_last_used_row' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_get_last_used_row>
            nextitem: <TestCaseFunction test_get_range_size>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_last_used_row>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_last_used_row' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_last_used_row' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_last_used_row' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_last_used_row
            location: ('test/lib/test_py4lo_helper.py', 402, 'HelperRangesTestCase.test_get_last_used_row')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_get_range_size>
          nextitem: <TestCaseFunction test_get_used_range_address>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_range_size
            location: ('test/lib/test_py4lo_helper.py', 487, 'HelperRangesTestCase.test_get_range_size')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_get_range_size>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_range_size>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_range_size' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_range_size' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_range_size' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_get_range_size>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_range_size>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_range_size' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_range_size' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_range_size' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_get_range_size>
            nextitem: <TestCaseFunction test_get_used_range_address>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_range_size>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_range_size' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_range_size' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_range_size' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_range_size
            location: ('test/lib/test_py4lo_helper.py', 487, 'HelperRangesTestCase.test_get_range_size')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_get_used_range_address>
          nextitem: <TestCaseFunction test_narrow_range>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_used_range_address
            location: ('test/lib/test_py4lo_helper.py', 417, 'HelperRangesTestCase.test_get_used_range_address')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_get_used_range_address>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_used_range_address>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_used_range_address' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_used_range_address' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_used_range_address' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_get_used_range_address>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_used_range_address>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_used_range_address' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_used_range_address' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_used_range_address' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_get_used_range_address>
            nextitem: <TestCaseFunction test_narrow_range>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_used_range_address>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_used_range_address' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_used_range_address' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_used_range_address' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_get_used_range_address
            location: ('test/lib/test_py4lo_helper.py', 417, 'HelperRangesTestCase.test_get_used_range_address')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_narrow_range>
          nextitem: <TestCaseFunction test_narrow_range2>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range
            location: ('test/lib/test_py4lo_helper.py', 583, 'HelperRangesTestCase.test_narrow_range')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_narrow_range>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_narrow_range>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_narrow_range>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_narrow_range>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_narrow_range>
            nextitem: <TestCaseFunction test_narrow_range2>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_narrow_range>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range
            location: ('test/lib/test_py4lo_helper.py', 583, 'HelperRangesTestCase.test_narrow_range')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_narrow_range2>
          nextitem: <TestCaseFunction test_narrow_range_dont_narrow_data>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range2
            location: ('test/lib/test_py4lo_helper.py', 637, 'HelperRangesTestCase.test_narrow_range2')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_narrow_range2>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_narrow_range2>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range2' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range2' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range2' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_narrow_range2>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_narrow_range2>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range2' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range2' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range2' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_narrow_range2>
            nextitem: <TestCaseFunction test_narrow_range_dont_narrow_data>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_narrow_range2>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range2' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range2
            location: ('test/lib/test_py4lo_helper.py', 637, 'HelperRangesTestCase.test_narrow_range2')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_narrow_range_dont_narrow_data>
          nextitem: <TestCaseFunction test_narrow_range_to_address>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range_dont_narrow_data
            location: ('test/lib/test_py4lo_helper.py', 610, 'HelperRangesTestCase.test_narrow_range_dont_narrow_data')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_narrow_range_dont_narrow_data>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_narrow_range_dont_narrow_data>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range_dont_narrow_data' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range_dont_narrow_data' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range_dont_narrow_data' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_narrow_range_dont_narrow_data>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_narrow_range_dont_narrow_data>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range_dont_narrow_data' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range_dont_narrow_data' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range_dont_narrow_data' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_narrow_range_dont_narrow_data>
            nextitem: <TestCaseFunction test_narrow_range_to_address>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_narrow_range_dont_narrow_data>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range_dont_narrow_data' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range_dont_narrow_data' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range_dont_narrow_data' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range_dont_narrow_data
            location: ('test/lib/test_py4lo_helper.py', 610, 'HelperRangesTestCase.test_narrow_range_dont_narrow_data')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_narrow_range_to_address>
          nextitem: <TestCaseFunction test_paste_range>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range_to_address
            location: ('test/lib/test_py4lo_helper.py', 474, 'HelperRangesTestCase.test_narrow_range_to_address')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_narrow_range_to_address>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_narrow_range_to_address>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range_to_address' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range_to_address' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range_to_address' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_narrow_range_to_address>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_narrow_range_to_address>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range_to_address' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range_to_address' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range_to_address' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_narrow_range_to_address>
            nextitem: <TestCaseFunction test_paste_range>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_narrow_range_to_address>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range_to_address' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range_to_address' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range_to_address' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_narrow_range_to_address
            location: ('test/lib/test_py4lo_helper.py', 474, 'HelperRangesTestCase.test_narrow_range_to_address')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_paste_range>
          nextitem: <TestCaseFunction test_paste_range_formulas>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_paste_range
            location: ('test/lib/test_py4lo_helper.py', 523, 'HelperRangesTestCase.test_paste_range')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_paste_range>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_paste_range>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_paste_range' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_paste_range' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_paste_range' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_paste_range>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_paste_range>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_paste_range' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_paste_range' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_paste_range' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_paste_range>
            nextitem: <TestCaseFunction test_paste_range_formulas>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_paste_range>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_paste_range' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_paste_range' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_paste_range' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_paste_range
            location: ('test/lib/test_py4lo_helper.py', 523, 'HelperRangesTestCase.test_paste_range')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_paste_range_formulas>
          nextitem: <TestCaseFunction test_used_range>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_paste_range_formulas
            location: ('test/lib/test_py4lo_helper.py', 556, 'HelperRangesTestCase.test_paste_range_formulas')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_paste_range_formulas>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_paste_range_formulas>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_paste_range_formulas' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_paste_range_formulas' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_paste_range_formulas' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_paste_range_formulas>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_paste_range_formulas>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_paste_range_formulas' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_paste_range_formulas' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_paste_range_formulas' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_paste_range_formulas>
            nextitem: <TestCaseFunction test_used_range>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_paste_range_formulas>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_paste_range_formulas' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_paste_range_formulas' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_paste_range_formulas' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_paste_range_formulas
            location: ('test/lib/test_py4lo_helper.py', 556, 'HelperRangesTestCase.test_paste_range_formulas')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_used_range>
          nextitem: <TestCaseFunction test_used_range2>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_used_range
            location: ('test/lib/test_py4lo_helper.py', 433, 'HelperRangesTestCase.test_used_range')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_used_range>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_used_range>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_used_range' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_used_range' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_used_range' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_used_range>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_used_range>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_used_range' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_used_range' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_used_range' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_used_range>
            nextitem: <TestCaseFunction test_used_range2>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_used_range>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_used_range' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_used_range' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_used_range' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_used_range
            location: ('test/lib/test_py4lo_helper.py', 433, 'HelperRangesTestCase.test_used_range')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_used_range2>
          nextitem: <TestCaseFunction test_data_array>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_used_range2
            location: ('test/lib/test_py4lo_helper.py', 454, 'HelperRangesTestCase.test_used_range2')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_used_range2>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_used_range2>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_used_range2' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_used_range2' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_used_range2' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_used_range2>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_used_range2>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_used_range2' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_used_range2' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_used_range2' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_used_range2>
            nextitem: <TestCaseFunction test_data_array>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperRangesTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperRangesTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperRangesTestCase' for <TestCaseFunction test_used_range2>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperRangesTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperRangesTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperRangesTestCase' for <TestCaseFunction test_used_range>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperRangesTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperRangesTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperRangesTestCase' for <TestCaseFunction test_paste_range_formulas>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperRangesTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperRangesTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperRangesTestCase' for <TestCaseFunction test_paste_range>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperRangesTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperRangesTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperRangesTestCase' for <TestCaseFunction test_narrow_range_to_address>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperRangesTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperRangesTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperRangesTestCase' for <TestCaseFunction test_narrow_range_dont_narrow_data>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperRangesTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperRangesTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperRangesTestCase' for <TestCaseFunction test_narrow_range2>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperRangesTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperRangesTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperRangesTestCase' for <TestCaseFunction test_narrow_range>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperRangesTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperRangesTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperRangesTestCase' for <TestCaseFunction test_get_used_range_address>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperRangesTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperRangesTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperRangesTestCase' for <TestCaseFunction test_get_range_size>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperRangesTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperRangesTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperRangesTestCase' for <TestCaseFunction test_get_last_used_row>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperRangesTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperRangesTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperRangesTestCase' for <TestCaseFunction test_copy_range>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_used_range2>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_used_range2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_used_range2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_used_range2' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperRangesTestCase::test_used_range2
            location: ('test/lib/test_py4lo_helper.py', 454, 'HelperRangesTestCase.test_used_range2')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_data_array>
          nextitem: <TestCaseFunction test_data_array_no_row>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_data_array
            location: ('test/lib/test_py4lo_helper.py', 742, 'HelperDataArrayTestCase.test_data_array')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_data_array>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperDataArrayTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperDataArrayTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperDataArrayTestCase' for <TestCaseFunction test_data_array>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_data_array>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_data_array' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_data_array' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_data_array' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_data_array>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_data_array>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_data_array' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_data_array' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_data_array' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_data_array>
            nextitem: <TestCaseFunction test_data_array_no_row>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_data_array>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_data_array' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_data_array' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_data_array' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_data_array
            location: ('test/lib/test_py4lo_helper.py', 742, 'HelperDataArrayTestCase.test_data_array')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_data_array_no_row>
          nextitem: <TestCaseFunction test_row_count>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_data_array_no_row
            location: ('test/lib/test_py4lo_helper.py', 755, 'HelperDataArrayTestCase.test_data_array_no_row')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_data_array_no_row>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_data_array_no_row>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_data_array_no_row' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_data_array_no_row' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_data_array_no_row' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_data_array_no_row>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_data_array_no_row>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_data_array_no_row' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_data_array_no_row' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_data_array_no_row' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_data_array_no_row>
            nextitem: <TestCaseFunction test_row_count>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_data_array_no_row>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_data_array_no_row' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_data_array_no_row' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_data_array_no_row' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_data_array_no_row
            location: ('test/lib/test_py4lo_helper.py', 755, 'HelperDataArrayTestCase.test_data_array_no_row')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_row_count>
          nextitem: <TestCaseFunction test_row_count2>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count
            location: ('test/lib/test_py4lo_helper.py', 671, 'HelperDataArrayTestCase.test_row_count')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_row_count>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_row_count>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_row_count>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_row_count>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_row_count>
            nextitem: <TestCaseFunction test_row_count2>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_row_count>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count
            location: ('test/lib/test_py4lo_helper.py', 671, 'HelperDataArrayTestCase.test_row_count')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_row_count2>
          nextitem: <TestCaseFunction test_row_count_empty>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count2
            location: ('test/lib/test_py4lo_helper.py', 714, 'HelperDataArrayTestCase.test_row_count2')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_row_count2>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_row_count2>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count2' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count2' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count2' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_row_count2>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_row_count2>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count2' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count2' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count2' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_row_count2>
            nextitem: <TestCaseFunction test_row_count_empty>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_row_count2>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count2' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count2
            location: ('test/lib/test_py4lo_helper.py', 714, 'HelperDataArrayTestCase.test_row_count2')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_row_count_empty>
          nextitem: <TestCaseFunction test_row_count_no_row>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_empty
            location: ('test/lib/test_py4lo_helper.py', 729, 'HelperDataArrayTestCase.test_row_count_empty')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_row_count_empty>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_row_count_empty>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_empty' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_empty' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_empty' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_row_count_empty>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_row_count_empty>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_empty' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_empty' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_empty' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_row_count_empty>
            nextitem: <TestCaseFunction test_row_count_no_row>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_row_count_empty>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_empty' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_empty' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_empty' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_empty
            location: ('test/lib/test_py4lo_helper.py', 729, 'HelperDataArrayTestCase.test_row_count_empty')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_row_count_no_row>
          nextitem: <TestCaseFunction test_row_count_one_cell>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_no_row
            location: ('test/lib/test_py4lo_helper.py', 686, 'HelperDataArrayTestCase.test_row_count_no_row')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_row_count_no_row>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_row_count_no_row>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_no_row' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_no_row' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_no_row' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_row_count_no_row>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_row_count_no_row>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_no_row' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_no_row' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_no_row' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_row_count_no_row>
            nextitem: <TestCaseFunction test_row_count_one_cell>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_row_count_no_row>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_no_row' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_no_row' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_no_row' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_no_row
            location: ('test/lib/test_py4lo_helper.py', 686, 'HelperDataArrayTestCase.test_row_count_no_row')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_row_count_one_cell>
          nextitem: <TestCaseFunction test_row_count_one_col>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_cell
            location: ('test/lib/test_py4lo_helper.py', 693, 'HelperDataArrayTestCase.test_row_count_one_cell')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_row_count_one_cell>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_row_count_one_cell>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_cell' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_cell' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_cell' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_row_count_one_cell>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_row_count_one_cell>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_cell' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_cell' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_cell' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_row_count_one_cell>
            nextitem: <TestCaseFunction test_row_count_one_col>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_row_count_one_cell>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_cell' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_cell' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_cell' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_cell
            location: ('test/lib/test_py4lo_helper.py', 693, 'HelperDataArrayTestCase.test_row_count_one_cell')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_row_count_one_col>
          nextitem: <TestCaseFunction test_row_count_one_row>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_col
            location: ('test/lib/test_py4lo_helper.py', 707, 'HelperDataArrayTestCase.test_row_count_one_col')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_row_count_one_col>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_row_count_one_col>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_col' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_col' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_col' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_row_count_one_col>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_row_count_one_col>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_col' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_col' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_col' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_row_count_one_col>
            nextitem: <TestCaseFunction test_row_count_one_row>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_row_count_one_col>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_col' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_col' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_col' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_col
            location: ('test/lib/test_py4lo_helper.py', 707, 'HelperDataArrayTestCase.test_row_count_one_col')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_row_count_one_row>
          nextitem: <TestCaseFunction test_add_link>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_row
            location: ('test/lib/test_py4lo_helper.py', 700, 'HelperDataArrayTestCase.test_row_count_one_row')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_row_count_one_row>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_row_count_one_row>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_row' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_row' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_row' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_row_count_one_row>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_row_count_one_row>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_row' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_row' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_row' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_row_count_one_row>
            nextitem: <TestCaseFunction test_add_link>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperDataArrayTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperDataArrayTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperDataArrayTestCase' for <TestCaseFunction test_row_count_one_row>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperDataArrayTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperDataArrayTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperDataArrayTestCase' for <TestCaseFunction test_row_count_one_col>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperDataArrayTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperDataArrayTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperDataArrayTestCase' for <TestCaseFunction test_row_count_one_cell>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperDataArrayTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperDataArrayTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperDataArrayTestCase' for <TestCaseFunction test_row_count_no_row>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperDataArrayTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperDataArrayTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperDataArrayTestCase' for <TestCaseFunction test_row_count_empty>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperDataArrayTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperDataArrayTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperDataArrayTestCase' for <TestCaseFunction test_row_count2>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperDataArrayTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperDataArrayTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperDataArrayTestCase' for <TestCaseFunction test_row_count>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperDataArrayTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperDataArrayTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperDataArrayTestCase' for <TestCaseFunction test_data_array_no_row>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperDataArrayTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperDataArrayTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperDataArrayTestCase' for <TestCaseFunction test_data_array>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_row_count_one_row>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_row' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_row' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_row' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperDataArrayTestCase::test_row_count_one_row
            location: ('test/lib/test_py4lo_helper.py', 700, 'HelperDataArrayTestCase.test_row_count_one_row')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_add_link>
          nextitem: <TestCaseFunction test_add_link_wrapped>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_add_link
            location: ('test/lib/test_py4lo_helper.py', 1156, 'HelperFormattingTestCase.test_add_link')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_add_link>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperFormattingTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperFormattingTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperFormattingTestCase' for <TestCaseFunction test_add_link>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_add_link>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_add_link' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_add_link' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_add_link' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_add_link>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_add_link>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_add_link' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_add_link' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_add_link' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_add_link>
            nextitem: <TestCaseFunction test_add_link_wrapped>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_add_link>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_add_link' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_add_link' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_add_link' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_add_link
            location: ('test/lib/test_py4lo_helper.py', 1156, 'HelperFormattingTestCase.test_add_link')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_add_link_wrapped>
          nextitem: <TestCaseFunction test_clear_conditional_format>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_add_link_wrapped
            location: ('test/lib/test_py4lo_helper.py', 1179, 'HelperFormattingTestCase.test_add_link_wrapped')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_add_link_wrapped>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_add_link_wrapped>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_add_link_wrapped' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_add_link_wrapped' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_add_link_wrapped' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_add_link_wrapped>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_add_link_wrapped>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_add_link_wrapped' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_add_link_wrapped' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_add_link_wrapped' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_add_link_wrapped>
            nextitem: <TestCaseFunction test_clear_conditional_format>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_add_link_wrapped>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_add_link_wrapped' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_add_link_wrapped' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_add_link_wrapped' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_add_link_wrapped
            location: ('test/lib/test_py4lo_helper.py', 1179, 'HelperFormattingTestCase.test_add_link_wrapped')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_clear_conditional_format>
          nextitem: <TestCaseFunction test_column_optimal_width_large>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_clear_conditional_format
            location: ('test/lib/test_py4lo_helper.py', 904, 'HelperFormattingTestCase.test_clear_conditional_format')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_clear_conditional_format>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_clear_conditional_format>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_clear_conditional_format' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_clear_conditional_format' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_clear_conditional_format' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_clear_conditional_format>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_clear_conditional_format>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_clear_conditional_format' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_clear_conditional_format' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_clear_conditional_format' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_clear_conditional_format>
            nextitem: <TestCaseFunction test_column_optimal_width_large>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_clear_conditional_format>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_clear_conditional_format' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_clear_conditional_format' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_clear_conditional_format' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_clear_conditional_format
            location: ('test/lib/test_py4lo_helper.py', 904, 'HelperFormattingTestCase.test_clear_conditional_format')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_column_optimal_width_large>
          nextitem: <TestCaseFunction test_column_optimal_width_medium>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_large
            location: ('test/lib/test_py4lo_helper.py', 1040, 'HelperFormattingTestCase.test_column_optimal_width_large')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_column_optimal_width_large>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_column_optimal_width_large>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_large' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_large' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_large' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_column_optimal_width_large>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_column_optimal_width_large>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_large' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_large' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_large' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_column_optimal_width_large>
            nextitem: <TestCaseFunction test_column_optimal_width_medium>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_column_optimal_width_large>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_large' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_large' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_large' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_large
            location: ('test/lib/test_py4lo_helper.py', 1040, 'HelperFormattingTestCase.test_column_optimal_width_large')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_column_optimal_width_medium>
          nextitem: <TestCaseFunction test_column_optimal_width_small>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_medium
            location: ('test/lib/test_py4lo_helper.py', 1052, 'HelperFormattingTestCase.test_column_optimal_width_medium')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_column_optimal_width_medium>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_column_optimal_width_medium>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_medium' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_medium' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_medium' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_column_optimal_width_medium>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_column_optimal_width_medium>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_medium' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_medium' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_medium' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_column_optimal_width_medium>
            nextitem: <TestCaseFunction test_column_optimal_width_small>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_column_optimal_width_medium>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_medium' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_medium' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_medium' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_medium
            location: ('test/lib/test_py4lo_helper.py', 1052, 'HelperFormattingTestCase.test_column_optimal_width_medium')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_column_optimal_width_small>
          nextitem: <TestCaseFunction test_conditional_format_on_formulas>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_small
            location: ('test/lib/test_py4lo_helper.py', 1029, 'HelperFormattingTestCase.test_column_optimal_width_small')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_column_optimal_width_small>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_column_optimal_width_small>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_small' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_small' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_small' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_column_optimal_width_small>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_column_optimal_width_small>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_small' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_small' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_small' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_column_optimal_width_small>
            nextitem: <TestCaseFunction test_conditional_format_on_formulas>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_column_optimal_width_small>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_small' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_small' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_small' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_column_optimal_width_small
            location: ('test/lib/test_py4lo_helper.py', 1029, 'HelperFormattingTestCase.test_column_optimal_width_small')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_conditional_format_on_formulas>
          nextitem: <TestCaseFunction test_create_filter>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_conditional_format_on_formulas
            location: ('test/lib/test_py4lo_helper.py', 915, 'HelperFormattingTestCase.test_conditional_format_on_formulas')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_conditional_format_on_formulas>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_conditional_format_on_formulas>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_conditional_format_on_formulas' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_conditional_format_on_formulas' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_conditional_format_on_formulas' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_conditional_format_on_formulas>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_conditional_format_on_formulas>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_conditional_format_on_formulas' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_conditional_format_on_formulas' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_conditional_format_on_formulas' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_conditional_format_on_formulas>
            nextitem: <TestCaseFunction test_create_filter>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_conditional_format_on_formulas>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_conditional_format_on_formulas' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_conditional_format_on_formulas' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_conditional_format_on_formulas' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_conditional_format_on_formulas
            location: ('test/lib/test_py4lo_helper.py', 915, 'HelperFormattingTestCase.test_conditional_format_on_formulas')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_filter>
          nextitem: <TestCaseFunction test_create_number_format_style>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_create_filter
            location: ('test/lib/test_py4lo_helper.py', 992, 'HelperFormattingTestCase.test_create_filter')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_filter>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_filter>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_create_filter' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_create_filter' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_create_filter' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_filter>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_filter>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_create_filter' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_create_filter' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_create_filter' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_filter>
            nextitem: <TestCaseFunction test_create_number_format_style>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_filter>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_create_filter' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_create_filter' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_create_filter' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_create_filter
            location: ('test/lib/test_py4lo_helper.py', 992, 'HelperFormattingTestCase.test_create_filter')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_number_format_style>
          nextitem: <TestCaseFunction test_find_number_format_style>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_create_number_format_style
            location: ('test/lib/test_py4lo_helper.py', 978, 'HelperFormattingTestCase.test_create_number_format_style')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_number_format_style>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_number_format_style>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_create_number_format_style' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_create_number_format_style' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_create_number_format_style' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_number_format_style>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_number_format_style>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_create_number_format_style' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_create_number_format_style' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_create_number_format_style' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_number_format_style>
            nextitem: <TestCaseFunction test_find_number_format_style>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_number_format_style>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_create_number_format_style' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_create_number_format_style' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_create_number_format_style' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_create_number_format_style
            location: ('test/lib/test_py4lo_helper.py', 978, 'HelperFormattingTestCase.test_create_number_format_style')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_find_number_format_style>
          nextitem: <TestCaseFunction test_find_number_format_style_no_locale>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_find_number_format_style
            location: ('test/lib/test_py4lo_helper.py', 950, 'HelperFormattingTestCase.test_find_number_format_style')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_find_number_format_style>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_find_number_format_style>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_find_number_format_style' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_find_number_format_style' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_find_number_format_style' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_find_number_format_style>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_find_number_format_style>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_find_number_format_style' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_find_number_format_style' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_find_number_format_style' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_find_number_format_style>
            nextitem: <TestCaseFunction test_find_number_format_style_no_locale>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_find_number_format_style>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_find_number_format_style' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_find_number_format_style' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_find_number_format_style' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_find_number_format_style
            location: ('test/lib/test_py4lo_helper.py', 950, 'HelperFormattingTestCase.test_find_number_format_style')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_find_number_format_style_no_locale>
          nextitem: <TestCaseFunction test_get_formula_conditional_entry>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_find_number_format_style_no_locale
            location: ('test/lib/test_py4lo_helper.py', 963, 'HelperFormattingTestCase.test_find_number_format_style_no_locale')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_find_number_format_style_no_locale>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_find_number_format_style_no_locale>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_find_number_format_style_no_locale' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_find_number_format_style_no_locale' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_find_number_format_style_no_locale' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_find_number_format_style_no_locale>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_find_number_format_style_no_locale>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_find_number_format_style_no_locale' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_find_number_format_style_no_locale' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_find_number_format_style_no_locale' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_find_number_format_style_no_locale>
            nextitem: <TestCaseFunction test_get_formula_conditional_entry>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_find_number_format_style_no_locale>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_find_number_format_style_no_locale' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_find_number_format_style_no_locale' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_find_number_format_style_no_locale' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_find_number_format_style_no_locale
            location: ('test/lib/test_py4lo_helper.py', 963, 'HelperFormattingTestCase.test_find_number_format_style_no_locale')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_get_formula_conditional_entry>
          nextitem: <TestCaseFunction test_get_page_style>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_get_formula_conditional_entry
            location: ('test/lib/test_py4lo_helper.py', 931, 'HelperFormattingTestCase.test_get_formula_conditional_entry')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_get_formula_conditional_entry>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_formula_conditional_entry>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_get_formula_conditional_entry' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_get_formula_conditional_entry' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_get_formula_conditional_entry' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_get_formula_conditional_entry>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_formula_conditional_entry>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_get_formula_conditional_entry' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_get_formula_conditional_entry' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_get_formula_conditional_entry' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_get_formula_conditional_entry>
            nextitem: <TestCaseFunction test_get_page_style>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_formula_conditional_entry>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_get_formula_conditional_entry' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_get_formula_conditional_entry' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_get_formula_conditional_entry' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_get_formula_conditional_entry
            location: ('test/lib/test_py4lo_helper.py', 931, 'HelperFormattingTestCase.test_get_formula_conditional_entry')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_get_page_style>
          nextitem: <TestCaseFunction test_quote_element>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_get_page_style
            location: ('test/lib/test_py4lo_helper.py', 1096, 'HelperFormattingTestCase.test_get_page_style')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_get_page_style>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_page_style>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_get_page_style' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_get_page_style' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_get_page_style' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_get_page_style>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_page_style>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_get_page_style' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_get_page_style' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_get_page_style' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_get_page_style>
            nextitem: <TestCaseFunction test_quote_element>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_page_style>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_get_page_style' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_get_page_style' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_get_page_style' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_get_page_style
            location: ('test/lib/test_py4lo_helper.py', 1096, 'HelperFormattingTestCase.test_get_page_style')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_quote_element>
          nextitem: <TestCaseFunction test_row_as_header>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_quote_element
            location: ('test/lib/test_py4lo_helper.py', 899, 'HelperFormattingTestCase.test_quote_element')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_quote_element>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_quote_element>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_quote_element' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_quote_element' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_quote_element' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_quote_element>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_quote_element>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_quote_element' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_quote_element' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_quote_element' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_quote_element>
            nextitem: <TestCaseFunction test_row_as_header>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_quote_element>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_quote_element' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_quote_element' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_quote_element' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_quote_element
            location: ('test/lib/test_py4lo_helper.py', 899, 'HelperFormattingTestCase.test_quote_element')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_row_as_header>
          nextitem: <TestCaseFunction test_set_paper_1>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_row_as_header
            location: ('test/lib/test_py4lo_helper.py', 1015, 'HelperFormattingTestCase.test_row_as_header')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_row_as_header>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_row_as_header>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_row_as_header' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_row_as_header' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_row_as_header' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_row_as_header>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_row_as_header>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_row_as_header' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_row_as_header' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_row_as_header' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_row_as_header>
            nextitem: <TestCaseFunction test_set_paper_1>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_row_as_header>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_row_as_header' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_row_as_header' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_row_as_header' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_row_as_header
            location: ('test/lib/test_py4lo_helper.py', 1015, 'HelperFormattingTestCase.test_row_as_header')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_set_paper_1>
          nextitem: <TestCaseFunction test_set_paper_2>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_1
            location: ('test/lib/test_py4lo_helper.py', 1112, 'HelperFormattingTestCase.test_set_paper_1')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_set_paper_1>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_set_paper_1>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_1' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_1' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_1' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_set_paper_1>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_set_paper_1>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_1' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_1' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_1' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_set_paper_1>
            nextitem: <TestCaseFunction test_set_paper_2>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_set_paper_1>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_1' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_1
            location: ('test/lib/test_py4lo_helper.py', 1112, 'HelperFormattingTestCase.test_set_paper_1')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_set_paper_2>
          nextitem: <TestCaseFunction test_set_paper_3>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_2
            location: ('test/lib/test_py4lo_helper.py', 1119, 'HelperFormattingTestCase.test_set_paper_2')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_set_paper_2>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_set_paper_2>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_2' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_2' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_2' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_set_paper_2>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_set_paper_2>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_2' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_2' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_2' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_set_paper_2>
            nextitem: <TestCaseFunction test_set_paper_3>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_set_paper_2>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_2' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_2
            location: ('test/lib/test_py4lo_helper.py', 1119, 'HelperFormattingTestCase.test_set_paper_2')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_set_paper_3>
          nextitem: <TestCaseFunction test_set_paper_4>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_3
            location: ('test/lib/test_py4lo_helper.py', 1126, 'HelperFormattingTestCase.test_set_paper_3')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_set_paper_3>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_set_paper_3>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_3' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_3' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_3' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_set_paper_3>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_set_paper_3>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_3' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_3' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_3' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_set_paper_3>
            nextitem: <TestCaseFunction test_set_paper_4>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_set_paper_3>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_3' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_3' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_3' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_3
            location: ('test/lib/test_py4lo_helper.py', 1126, 'HelperFormattingTestCase.test_set_paper_3')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_set_paper_4>
          nextitem: <TestCaseFunction test_set_print_area>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_4
            location: ('test/lib/test_py4lo_helper.py', 1133, 'HelperFormattingTestCase.test_set_paper_4')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_set_paper_4>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_set_paper_4>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_4' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_4' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_4' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_set_paper_4>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_set_paper_4>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_4' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_4' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_4' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_set_paper_4>
            nextitem: <TestCaseFunction test_set_print_area>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_set_paper_4>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_4' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_4' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_4' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_paper_4
            location: ('test/lib/test_py4lo_helper.py', 1133, 'HelperFormattingTestCase.test_set_paper_4')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_set_print_area>
          nextitem: <TestCaseFunction test_set_print_area_no_title>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_print_area
            location: ('test/lib/test_py4lo_helper.py', 1062, 'HelperFormattingTestCase.test_set_print_area')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_set_print_area>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_set_print_area>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_print_area' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_print_area' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_print_area' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_set_print_area>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_set_print_area>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_print_area' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_print_area' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_print_area' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_set_print_area>
            nextitem: <TestCaseFunction test_set_print_area_no_title>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_set_print_area>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_print_area' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_print_area' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_print_area' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_print_area
            location: ('test/lib/test_py4lo_helper.py', 1062, 'HelperFormattingTestCase.test_set_print_area')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_set_print_area_no_title>
          nextitem: <TestCaseFunction test_set_validation_list>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_print_area_no_title
            location: ('test/lib/test_py4lo_helper.py', 1081, 'HelperFormattingTestCase.test_set_print_area_no_title')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_set_print_area_no_title>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_set_print_area_no_title>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_print_area_no_title' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_print_area_no_title' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_print_area_no_title' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_set_print_area_no_title>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_set_print_area_no_title>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_print_area_no_title' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_print_area_no_title' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_print_area_no_title' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_set_print_area_no_title>
            nextitem: <TestCaseFunction test_set_validation_list>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_set_print_area_no_title>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_print_area_no_title' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_print_area_no_title' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_print_area_no_title' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_print_area_no_title
            location: ('test/lib/test_py4lo_helper.py', 1081, 'HelperFormattingTestCase.test_set_print_area_no_title')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_set_validation_list>
          nextitem: <TestCaseFunction test_set_validation_list2>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list
            location: ('test/lib/test_py4lo_helper.py', 810, 'HelperFormattingTestCase.test_set_validation_list')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_set_validation_list>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_set_validation_list>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_set_validation_list>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_set_validation_list>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_set_validation_list>
            nextitem: <TestCaseFunction test_set_validation_list2>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_set_validation_list>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list
            location: ('test/lib/test_py4lo_helper.py', 810, 'HelperFormattingTestCase.test_set_validation_list')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_set_validation_list2>
          nextitem: <TestCaseFunction test_set_validation_list3>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list2
            location: ('test/lib/test_py4lo_helper.py', 826, 'HelperFormattingTestCase.test_set_validation_list2')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_set_validation_list2>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_set_validation_list2>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list2' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list2' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list2' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_set_validation_list2>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_set_validation_list2>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list2' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list2' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list2' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_set_validation_list2>
            nextitem: <TestCaseFunction test_set_validation_list3>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_set_validation_list2>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list2' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list2
            location: ('test/lib/test_py4lo_helper.py', 826, 'HelperFormattingTestCase.test_set_validation_list2')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_set_validation_list3>
          nextitem: <TestCaseFunction test_sort_range>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list3
            location: ('test/lib/test_py4lo_helper.py', 843, 'HelperFormattingTestCase.test_set_validation_list3')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_set_validation_list3>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_set_validation_list3>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list3' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list3' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list3' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_set_validation_list3>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_set_validation_list3>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list3' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list3' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list3' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_set_validation_list3>
            nextitem: <TestCaseFunction test_sort_range>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_set_validation_list3>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list3' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list3' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list3' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_set_validation_list3
            location: ('test/lib/test_py4lo_helper.py', 843, 'HelperFormattingTestCase.test_set_validation_list3')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_sort_range>
          nextitem: <TestCaseFunction test_sort_range_no_header>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_sort_range
            location: ('test/lib/test_py4lo_helper.py', 859, 'HelperFormattingTestCase.test_sort_range')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_sort_range>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_sort_range>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_sort_range' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_sort_range' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_sort_range' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_sort_range>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_sort_range>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_sort_range' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_sort_range' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_sort_range' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_sort_range>
            nextitem: <TestCaseFunction test_sort_range_no_header>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_sort_range>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_sort_range' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_sort_range' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_sort_range' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_sort_range
            location: ('test/lib/test_py4lo_helper.py', 859, 'HelperFormattingTestCase.test_sort_range')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_sort_range_no_header>
          nextitem: <TestCaseFunction test_validation_builder>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_sort_range_no_header
            location: ('test/lib/test_py4lo_helper.py', 879, 'HelperFormattingTestCase.test_sort_range_no_header')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_sort_range_no_header>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_sort_range_no_header>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_sort_range_no_header' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_sort_range_no_header' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_sort_range_no_header' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_sort_range_no_header>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_sort_range_no_header>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_sort_range_no_header' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_sort_range_no_header' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_sort_range_no_header' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_sort_range_no_header>
            nextitem: <TestCaseFunction test_validation_builder>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_sort_range_no_header>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_sort_range_no_header' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_sort_range_no_header' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_sort_range_no_header' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_sort_range_no_header
            location: ('test/lib/test_py4lo_helper.py', 879, 'HelperFormattingTestCase.test_sort_range_no_header')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_validation_builder>
          nextitem: <TestCaseFunction test_wrap_text>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_validation_builder
            location: ('test/lib/test_py4lo_helper.py', 789, 'HelperFormattingTestCase.test_validation_builder')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_validation_builder>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_validation_builder>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_validation_builder' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_validation_builder' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_validation_builder' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_validation_builder>
        early skip of rewriting module: com [assertion]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_validation_builder>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_validation_builder' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_validation_builder' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_validation_builder' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_validation_builder>
            nextitem: <TestCaseFunction test_wrap_text>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_validation_builder>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_validation_builder' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_validation_builder' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_validation_builder' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_validation_builder
            location: ('test/lib/test_py4lo_helper.py', 789, 'HelperFormattingTestCase.test_validation_builder')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_wrap_text>
          nextitem: <TestCaseFunction test_doc_builder>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_wrap_text
            location: ('test/lib/test_py4lo_helper.py', 1206, 'HelperFormattingTestCase.test_wrap_text')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_wrap_text>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_wrap_text>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_wrap_text' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_wrap_text' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_wrap_text' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_wrap_text>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_wrap_text>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_wrap_text' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_wrap_text' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_wrap_text' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_wrap_text>
            nextitem: <TestCaseFunction test_doc_builder>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperFormattingTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperFormattingTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperFormattingTestCase' for <TestCaseFunction test_wrap_text>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperFormattingTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperFormattingTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperFormattingTestCase' for <TestCaseFunction test_validation_builder>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperFormattingTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperFormattingTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperFormattingTestCase' for <TestCaseFunction test_sort_range_no_header>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperFormattingTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperFormattingTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperFormattingTestCase' for <TestCaseFunction test_sort_range>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperFormattingTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperFormattingTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperFormattingTestCase' for <TestCaseFunction test_set_validation_list3>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperFormattingTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperFormattingTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperFormattingTestCase' for <TestCaseFunction test_set_validation_list2>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperFormattingTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperFormattingTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperFormattingTestCase' for <TestCaseFunction test_set_validation_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperFormattingTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperFormattingTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperFormattingTestCase' for <TestCaseFunction test_set_print_area_no_title>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperFormattingTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperFormattingTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperFormattingTestCase' for <TestCaseFunction test_set_print_area>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperFormattingTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperFormattingTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperFormattingTestCase' for <TestCaseFunction test_set_paper_4>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperFormattingTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperFormattingTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperFormattingTestCase' for <TestCaseFunction test_set_paper_3>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperFormattingTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperFormattingTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperFormattingTestCase' for <TestCaseFunction test_set_paper_2>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperFormattingTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperFormattingTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperFormattingTestCase' for <TestCaseFunction test_set_paper_1>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperFormattingTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperFormattingTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperFormattingTestCase' for <TestCaseFunction test_row_as_header>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperFormattingTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperFormattingTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperFormattingTestCase' for <TestCaseFunction test_quote_element>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperFormattingTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperFormattingTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperFormattingTestCase' for <TestCaseFunction test_get_page_style>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperFormattingTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperFormattingTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperFormattingTestCase' for <TestCaseFunction test_get_formula_conditional_entry>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperFormattingTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperFormattingTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperFormattingTestCase' for <TestCaseFunction test_find_number_format_style_no_locale>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperFormattingTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperFormattingTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperFormattingTestCase' for <TestCaseFunction test_find_number_format_style>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperFormattingTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperFormattingTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperFormattingTestCase' for <TestCaseFunction test_create_number_format_style>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperFormattingTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperFormattingTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperFormattingTestCase' for <TestCaseFunction test_create_filter>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperFormattingTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperFormattingTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperFormattingTestCase' for <TestCaseFunction test_conditional_format_on_formulas>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperFormattingTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperFormattingTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperFormattingTestCase' for <TestCaseFunction test_column_optimal_width_small>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperFormattingTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperFormattingTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperFormattingTestCase' for <TestCaseFunction test_column_optimal_width_medium>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperFormattingTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperFormattingTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperFormattingTestCase' for <TestCaseFunction test_column_optimal_width_large>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperFormattingTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperFormattingTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperFormattingTestCase' for <TestCaseFunction test_clear_conditional_format>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperFormattingTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperFormattingTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperFormattingTestCase' for <TestCaseFunction test_add_link_wrapped>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperFormattingTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperFormattingTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperFormattingTestCase' for <TestCaseFunction test_add_link>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_wrap_text>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_wrap_text' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_wrap_text' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_wrap_text' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperFormattingTestCase::test_wrap_text
            location: ('test/lib/test_py4lo_helper.py', 1206, 'HelperFormattingTestCase.test_wrap_text')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_doc_builder>
          nextitem: <TestCaseFunction test_doc_builder_apply>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder
            location: ('test/lib/test_py4lo_helper.py', 1291, 'HelperOpenTestCase.test_doc_builder')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_doc_builder>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperOpenTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperOpenTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperOpenTestCase' for <TestCaseFunction test_doc_builder>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_doc_builder>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_doc_builder>
            nextitem: <TestCaseFunction test_doc_builder_apply>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder
            location: ('test/lib/test_py4lo_helper.py', 1291, 'HelperOpenTestCase.test_doc_builder')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_doc_builder_apply>
          nextitem: <TestCaseFunction test_doc_builder_apply_list>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_apply
            location: ('test/lib/test_py4lo_helper.py', 1447, 'HelperOpenTestCase.test_doc_builder_apply')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_doc_builder_apply>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_apply>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_apply' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_apply' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_apply' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_doc_builder_apply>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_apply>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_apply' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_apply' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_apply' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_doc_builder_apply>
            nextitem: <TestCaseFunction test_doc_builder_apply_list>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_apply>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_apply' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_apply' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_apply' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_apply
            location: ('test/lib/test_py4lo_helper.py', 1447, 'HelperOpenTestCase.test_doc_builder_apply')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_doc_builder_apply_list>
          nextitem: <TestCaseFunction test_doc_builder_duplicate_base_sheet>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_apply_list
            location: ('test/lib/test_py4lo_helper.py', 1478, 'HelperOpenTestCase.test_doc_builder_apply_list')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_doc_builder_apply_list>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_apply_list>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_apply_list' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_apply_list' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_apply_list' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_doc_builder_apply_list>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_apply_list>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_apply_list' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_apply_list' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_apply_list' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_doc_builder_apply_list>
            nextitem: <TestCaseFunction test_doc_builder_duplicate_base_sheet>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_apply_list>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_apply_list' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_apply_list' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_apply_list' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_apply_list
            location: ('test/lib/test_py4lo_helper.py', 1478, 'HelperOpenTestCase.test_doc_builder_apply_list')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_doc_builder_duplicate_base_sheet>
          nextitem: <TestCaseFunction test_doc_builder_duplicate_to>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_duplicate_base_sheet
            location: ('test/lib/test_py4lo_helper.py', 1513, 'HelperOpenTestCase.test_doc_builder_duplicate_base_sheet')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_doc_builder_duplicate_base_sheet>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_duplicate_base_sheet>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_duplicate_base_sheet' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_duplicate_base_sheet' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_duplicate_base_sheet' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_doc_builder_duplicate_base_sheet>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_duplicate_base_sheet>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_duplicate_base_sheet' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_duplicate_base_sheet' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_duplicate_base_sheet' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_doc_builder_duplicate_base_sheet>
            nextitem: <TestCaseFunction test_doc_builder_duplicate_to>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_duplicate_base_sheet>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_duplicate_base_sheet' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_duplicate_base_sheet' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_duplicate_base_sheet' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_duplicate_base_sheet
            location: ('test/lib/test_py4lo_helper.py', 1513, 'HelperOpenTestCase.test_doc_builder_duplicate_base_sheet')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_doc_builder_duplicate_to>
          nextitem: <TestCaseFunction test_doc_builder_make_base_sheet>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_duplicate_to
            location: ('test/lib/test_py4lo_helper.py', 1549, 'HelperOpenTestCase.test_doc_builder_duplicate_to')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_doc_builder_duplicate_to>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_duplicate_to>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_duplicate_to' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_duplicate_to' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_duplicate_to' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_doc_builder_duplicate_to>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_duplicate_to>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_duplicate_to' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_duplicate_to' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_duplicate_to' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_doc_builder_duplicate_to>
            nextitem: <TestCaseFunction test_doc_builder_make_base_sheet>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_duplicate_to>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_duplicate_to' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_duplicate_to' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_duplicate_to' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_duplicate_to
            location: ('test/lib/test_py4lo_helper.py', 1549, 'HelperOpenTestCase.test_doc_builder_duplicate_to')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_doc_builder_make_base_sheet>
          nextitem: <TestCaseFunction test_doc_builder_pvs>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_make_base_sheet
            location: ('test/lib/test_py4lo_helper.py', 1582, 'HelperOpenTestCase.test_doc_builder_make_base_sheet')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_doc_builder_make_base_sheet>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_make_base_sheet>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_make_base_sheet' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_make_base_sheet' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_make_base_sheet' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_doc_builder_make_base_sheet>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_make_base_sheet>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_make_base_sheet' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_make_base_sheet' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_make_base_sheet' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_doc_builder_make_base_sheet>
            nextitem: <TestCaseFunction test_doc_builder_pvs>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_make_base_sheet>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_make_base_sheet' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_make_base_sheet' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_make_base_sheet' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_make_base_sheet
            location: ('test/lib/test_py4lo_helper.py', 1582, 'HelperOpenTestCase.test_doc_builder_make_base_sheet')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_doc_builder_pvs>
          nextitem: <TestCaseFunction test_doc_builder_sheet_names_four>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_pvs
            location: ('test/lib/test_py4lo_helper.py', 1309, 'HelperOpenTestCase.test_doc_builder_pvs')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_doc_builder_pvs>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_pvs>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_pvs' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_pvs' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_pvs' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_doc_builder_pvs>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_pvs>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_pvs' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_pvs' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_pvs' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_doc_builder_pvs>
            nextitem: <TestCaseFunction test_doc_builder_sheet_names_four>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_pvs>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_pvs' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_pvs' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_pvs' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_pvs
            location: ('test/lib/test_py4lo_helper.py', 1309, 'HelperOpenTestCase.test_doc_builder_pvs')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_doc_builder_sheet_names_four>
          nextitem: <TestCaseFunction test_doc_builder_sheet_names_three>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_four
            location: ('test/lib/test_py4lo_helper.py', 1418, 'HelperOpenTestCase.test_doc_builder_sheet_names_four')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_doc_builder_sheet_names_four>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_sheet_names_four>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_four' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_four' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_four' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_doc_builder_sheet_names_four>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_sheet_names_four>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_four' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_four' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_four' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_doc_builder_sheet_names_four>
            nextitem: <TestCaseFunction test_doc_builder_sheet_names_three>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_sheet_names_four>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_four' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_four' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_four' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_four
            location: ('test/lib/test_py4lo_helper.py', 1418, 'HelperOpenTestCase.test_doc_builder_sheet_names_four')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_doc_builder_sheet_names_three>
          nextitem: <TestCaseFunction test_doc_builder_sheet_names_two>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_three
            location: ('test/lib/test_py4lo_helper.py', 1389, 'HelperOpenTestCase.test_doc_builder_sheet_names_three')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_doc_builder_sheet_names_three>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_sheet_names_three>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_three' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_three' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_three' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_doc_builder_sheet_names_three>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_sheet_names_three>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_three' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_three' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_three' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_doc_builder_sheet_names_three>
            nextitem: <TestCaseFunction test_doc_builder_sheet_names_two>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_sheet_names_three>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_three' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_three' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_three' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_three
            location: ('test/lib/test_py4lo_helper.py', 1389, 'HelperOpenTestCase.test_doc_builder_sheet_names_three')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_doc_builder_sheet_names_two>
          nextitem: <TestCaseFunction test_doc_builder_sheet_names_two_trunc>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_two
            location: ('test/lib/test_py4lo_helper.py', 1327, 'HelperOpenTestCase.test_doc_builder_sheet_names_two')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_doc_builder_sheet_names_two>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_sheet_names_two>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_two' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_two' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_two' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_doc_builder_sheet_names_two>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_sheet_names_two>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_two' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_two' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_two' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_doc_builder_sheet_names_two>
            nextitem: <TestCaseFunction test_doc_builder_sheet_names_two_trunc>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_sheet_names_two>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_two' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_two' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_two' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_two
            location: ('test/lib/test_py4lo_helper.py', 1327, 'HelperOpenTestCase.test_doc_builder_sheet_names_two')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_doc_builder_sheet_names_two_trunc>
          nextitem: <TestCaseFunction test_new_doc>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_two_trunc
            location: ('test/lib/test_py4lo_helper.py', 1356, 'HelperOpenTestCase.test_doc_builder_sheet_names_two_trunc')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_doc_builder_sheet_names_two_trunc>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_sheet_names_two_trunc>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_two_trunc' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_two_trunc' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_two_trunc' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_doc_builder_sheet_names_two_trunc>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_sheet_names_two_trunc>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_two_trunc' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_two_trunc' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_two_trunc' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_doc_builder_sheet_names_two_trunc>
            nextitem: <TestCaseFunction test_new_doc>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_doc_builder_sheet_names_two_trunc>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_two_trunc' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_two_trunc' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_two_trunc' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_doc_builder_sheet_names_two_trunc
            location: ('test/lib/test_py4lo_helper.py', 1356, 'HelperOpenTestCase.test_doc_builder_sheet_names_two_trunc')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_new_doc>
          nextitem: <TestCaseFunction test_open_in_calc>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_new_doc
            location: ('test/lib/test_py4lo_helper.py', 1273, 'HelperOpenTestCase.test_new_doc')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_new_doc>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_new_doc>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_new_doc' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_new_doc' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_new_doc' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_new_doc>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_new_doc>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_new_doc' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_new_doc' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_new_doc' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_new_doc>
            nextitem: <TestCaseFunction test_open_in_calc>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_new_doc>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_new_doc' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_new_doc' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_new_doc' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_new_doc
            location: ('test/lib/test_py4lo_helper.py', 1273, 'HelperOpenTestCase.test_new_doc')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_open_in_calc>
          nextitem: <TestCaseFunction test_open_in_calc_no_params>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_open_in_calc
            location: ('test/lib/test_py4lo_helper.py', 1245, 'HelperOpenTestCase.test_open_in_calc')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_open_in_calc>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_open_in_calc>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_open_in_calc' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_open_in_calc' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_open_in_calc' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_open_in_calc>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_open_in_calc>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_open_in_calc' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_open_in_calc' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_open_in_calc' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_open_in_calc>
            nextitem: <TestCaseFunction test_open_in_calc_no_params>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_open_in_calc>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_open_in_calc' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_open_in_calc' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_open_in_calc' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_open_in_calc
            location: ('test/lib/test_py4lo_helper.py', 1245, 'HelperOpenTestCase.test_open_in_calc')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_open_in_calc_no_params>
          nextitem: <TestCaseFunction testUnoService>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_open_in_calc_no_params
            location: ('test/lib/test_py4lo_helper.py', 1259, 'HelperOpenTestCase.test_open_in_calc_no_params')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_open_in_calc_no_params>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_open_in_calc_no_params>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_open_in_calc_no_params' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_open_in_calc_no_params' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_open_in_calc_no_params' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_open_in_calc_no_params>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_open_in_calc_no_params>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_open_in_calc_no_params' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_open_in_calc_no_params' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_open_in_calc_no_params' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_open_in_calc_no_params>
            nextitem: <TestCaseFunction testUnoService>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperOpenTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperOpenTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperOpenTestCase' for <TestCaseFunction test_open_in_calc_no_params>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperOpenTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperOpenTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperOpenTestCase' for <TestCaseFunction test_open_in_calc>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperOpenTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperOpenTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperOpenTestCase' for <TestCaseFunction test_new_doc>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperOpenTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperOpenTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperOpenTestCase' for <TestCaseFunction test_doc_builder_sheet_names_two_trunc>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperOpenTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperOpenTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperOpenTestCase' for <TestCaseFunction test_doc_builder_sheet_names_two>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperOpenTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperOpenTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperOpenTestCase' for <TestCaseFunction test_doc_builder_sheet_names_three>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperOpenTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperOpenTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperOpenTestCase' for <TestCaseFunction test_doc_builder_sheet_names_four>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperOpenTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperOpenTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperOpenTestCase' for <TestCaseFunction test_doc_builder_pvs>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperOpenTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperOpenTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperOpenTestCase' for <TestCaseFunction test_doc_builder_make_base_sheet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperOpenTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperOpenTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperOpenTestCase' for <TestCaseFunction test_doc_builder_duplicate_to>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperOpenTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperOpenTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperOpenTestCase' for <TestCaseFunction test_doc_builder_duplicate_base_sheet>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperOpenTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperOpenTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperOpenTestCase' for <TestCaseFunction test_doc_builder_apply_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperOpenTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperOpenTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperOpenTestCase' for <TestCaseFunction test_doc_builder_apply>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperOpenTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperOpenTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperOpenTestCase' for <TestCaseFunction test_doc_builder>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_open_in_calc_no_params>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_open_in_calc_no_params' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_open_in_calc_no_params' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_open_in_calc_no_params' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperOpenTestCase::test_open_in_calc_no_params
            location: ('test/lib/test_py4lo_helper.py', 1259, 'HelperOpenTestCase.test_open_in_calc_no_params')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction testUnoService>
          nextitem: <TestCaseFunction test_copy_row_at_index>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperMiscTestCase::testUnoService
            location: ('test/lib/test_py4lo_helper.py', 1637, 'HelperMiscTestCase.testUnoService')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction testUnoService>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperMiscTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperMiscTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperMiscTestCase' for <TestCaseFunction testUnoService>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction testUnoService>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::testUnoService' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::testUnoService' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::testUnoService' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction testUnoService>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction testUnoService>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::testUnoService' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::testUnoService' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::testUnoService' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction testUnoService>
            nextitem: <TestCaseFunction test_copy_row_at_index>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction testUnoService>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::testUnoService' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::testUnoService' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::testUnoService' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperMiscTestCase::testUnoService
            location: ('test/lib/test_py4lo_helper.py', 1637, 'HelperMiscTestCase.testUnoService')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_copy_row_at_index>
          nextitem: <TestCaseFunction test_read_empty_options>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_copy_row_at_index
            location: ('test/lib/test_py4lo_helper.py', 1721, 'HelperMiscTestCase.test_copy_row_at_index')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_copy_row_at_index>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_copy_row_at_index>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_copy_row_at_index' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_copy_row_at_index' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_copy_row_at_index' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_copy_row_at_index>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_copy_row_at_index>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_copy_row_at_index' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_copy_row_at_index' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_copy_row_at_index' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_copy_row_at_index>
            nextitem: <TestCaseFunction test_read_empty_options>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_copy_row_at_index>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_copy_row_at_index' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_copy_row_at_index' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_copy_row_at_index' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_copy_row_at_index
            location: ('test/lib/test_py4lo_helper.py', 1721, 'HelperMiscTestCase.test_copy_row_at_index')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_read_empty_options>
          nextitem: <TestCaseFunction test_read_options>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_empty_options
            location: ('test/lib/test_py4lo_helper.py', 1674, 'HelperMiscTestCase.test_read_empty_options')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_read_empty_options>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_read_empty_options>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_empty_options' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_empty_options' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_empty_options' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_read_empty_options>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_read_empty_options>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_empty_options' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_empty_options' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_empty_options' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_read_empty_options>
            nextitem: <TestCaseFunction test_read_options>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_read_empty_options>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_empty_options' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_empty_options' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_empty_options' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_empty_options
            location: ('test/lib/test_py4lo_helper.py', 1674, 'HelperMiscTestCase.test_read_empty_options')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_read_options>
          nextitem: <TestCaseFunction test_read_options_from_sheet_name>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_options
            location: ('test/lib/test_py4lo_helper.py', 1649, 'HelperMiscTestCase.test_read_options')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_read_options>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_read_options>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_options' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_options' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_options' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_read_options>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_read_options>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_options' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_options' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_options' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_read_options>
            nextitem: <TestCaseFunction test_read_options_from_sheet_name>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_read_options>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_options' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_options' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_options' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_options
            location: ('test/lib/test_py4lo_helper.py', 1649, 'HelperMiscTestCase.test_read_options')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_read_options_from_sheet_name>
          nextitem: <TestCaseFunction test_rtrim_row>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_options_from_sheet_name
            location: ('test/lib/test_py4lo_helper.py', 1702, 'HelperMiscTestCase.test_read_options_from_sheet_name')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_read_options_from_sheet_name>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_read_options_from_sheet_name>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_options_from_sheet_name' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_options_from_sheet_name' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_options_from_sheet_name' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_read_options_from_sheet_name>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_read_options_from_sheet_name>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_options_from_sheet_name' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_options_from_sheet_name' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_options_from_sheet_name' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_read_options_from_sheet_name>
            nextitem: <TestCaseFunction test_rtrim_row>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_read_options_from_sheet_name>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_options_from_sheet_name' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_options_from_sheet_name' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_options_from_sheet_name' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_read_options_from_sheet_name
            location: ('test/lib/test_py4lo_helper.py', 1702, 'HelperMiscTestCase.test_read_options_from_sheet_name')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_rtrim_row>
          nextitem: <TestCaseFunction test_mri>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_rtrim_row
            location: ('test/lib/test_py4lo_helper.py', 1691, 'HelperMiscTestCase.test_rtrim_row')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_rtrim_row>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_rtrim_row>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_rtrim_row' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_rtrim_row' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_rtrim_row' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_rtrim_row>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_rtrim_row>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_rtrim_row' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_rtrim_row' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_rtrim_row' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_rtrim_row>
            nextitem: <TestCaseFunction test_mri>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperMiscTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperMiscTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperMiscTestCase' for <TestCaseFunction test_rtrim_row>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperMiscTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperMiscTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperMiscTestCase' for <TestCaseFunction test_read_options_from_sheet_name>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperMiscTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperMiscTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperMiscTestCase' for <TestCaseFunction test_read_options>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperMiscTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperMiscTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperMiscTestCase' for <TestCaseFunction test_read_empty_options>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperMiscTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperMiscTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperMiscTestCase' for <TestCaseFunction test_copy_row_at_index>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_HelperMiscTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::HelperMiscTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_HelperMiscTestCase' for <TestCaseFunction testUnoService>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_rtrim_row>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_rtrim_row' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_rtrim_row' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_rtrim_row' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::HelperMiscTestCase::test_rtrim_row
            location: ('test/lib/test_py4lo_helper.py', 1691, 'HelperMiscTestCase.test_rtrim_row')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_mri>
          nextitem: <TestCaseFunction test_mri_fail>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::MiscTestCase::test_mri
            location: ('test/lib/test_py4lo_helper.py', 1832, 'MiscTestCase.test_mri')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_mri>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_MiscTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::MiscTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_MiscTestCase' for <TestCaseFunction test_mri>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_mri>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_mri>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_mri>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_mri>
            nextitem: <TestCaseFunction test_mri_fail>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_mri>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::MiscTestCase::test_mri
            location: ('test/lib/test_py4lo_helper.py', 1832, 'MiscTestCase.test_mri')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_mri_fail>
          nextitem: <TestCaseFunction test_mri_fail_err>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail
            location: ('test/lib/test_py4lo_helper.py', 1866, 'MiscTestCase.test_mri_fail')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_mri_fail>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_mri_fail>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_mri_fail>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_mri_fail>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_mri_fail>
            nextitem: <TestCaseFunction test_mri_fail_err>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_mri_fail>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail
            location: ('test/lib/test_py4lo_helper.py', 1866, 'MiscTestCase.test_mri_fail')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_mri_fail_err>
          nextitem: <TestCaseFunction test_mri_fail_twice>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail_err
            location: ('test/lib/test_py4lo_helper.py', 1891, 'MiscTestCase.test_mri_fail_err')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_mri_fail_err>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_mri_fail_err>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail_err' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail_err' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail_err' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_mri_fail_err>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_mri_fail_err>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail_err' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail_err' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail_err' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_mri_fail_err>
            nextitem: <TestCaseFunction test_mri_fail_twice>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_mri_fail_err>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail_err' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail_err' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail_err' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail_err
            location: ('test/lib/test_py4lo_helper.py', 1891, 'MiscTestCase.test_mri_fail_err')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_mri_fail_twice>
          nextitem: <TestCaseFunction test_mri_twice>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail_twice
            location: ('test/lib/test_py4lo_helper.py', 1878, 'MiscTestCase.test_mri_fail_twice')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_mri_fail_twice>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_mri_fail_twice>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail_twice' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail_twice' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail_twice' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_mri_fail_twice>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_mri_fail_twice>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail_twice' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail_twice' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail_twice' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_mri_fail_twice>
            nextitem: <TestCaseFunction test_mri_twice>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_mri_fail_twice>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail_twice' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail_twice' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail_twice' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_fail_twice
            location: ('test/lib/test_py4lo_helper.py', 1878, 'MiscTestCase.test_mri_fail_twice')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_mri_twice>
          nextitem: <TestCaseFunction test_use_xray_ignore>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_twice
            location: ('test/lib/test_py4lo_helper.py', 1848, 'MiscTestCase.test_mri_twice')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_mri_twice>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_mri_twice>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_twice' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_twice' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_twice' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_mri_twice>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_mri_twice>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_twice' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_twice' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_twice' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_mri_twice>
            nextitem: <TestCaseFunction test_use_xray_ignore>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_mri_twice>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_twice' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_twice' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_twice' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::MiscTestCase::test_mri_twice
            location: ('test/lib/test_py4lo_helper.py', 1848, 'MiscTestCase.test_mri_twice')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_use_xray_ignore>
          nextitem: <TestCaseFunction test_use_xray_ok>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_ignore
            location: ('test/lib/test_py4lo_helper.py', 1771, 'MiscTestCase.test_use_xray_ignore')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_use_xray_ignore>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_use_xray_ignore>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_ignore' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_ignore' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_ignore' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_use_xray_ignore>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_use_xray_ignore>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_ignore' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_ignore' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_ignore' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_use_xray_ignore>
            nextitem: <TestCaseFunction test_use_xray_ok>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_use_xray_ignore>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_ignore' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_ignore' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_ignore' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_ignore
            location: ('test/lib/test_py4lo_helper.py', 1771, 'MiscTestCase.test_use_xray_ignore')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_use_xray_ok>
          nextitem: <TestCaseFunction test_use_xray_raise>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_ok
            location: ('test/lib/test_py4lo_helper.py', 1743, 'MiscTestCase.test_use_xray_ok')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_use_xray_ok>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_use_xray_ok>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_ok' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_ok' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_ok' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_use_xray_ok>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_use_xray_ok>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_ok' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_ok' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_ok' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_use_xray_ok>
            nextitem: <TestCaseFunction test_use_xray_raise>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_use_xray_ok>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_ok' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_ok' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_ok' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_ok
            location: ('test/lib/test_py4lo_helper.py', 1743, 'MiscTestCase.test_use_xray_ok')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_use_xray_raise>
          nextitem: <TestCaseFunction test_xray>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_raise
            location: ('test/lib/test_py4lo_helper.py', 1755, 'MiscTestCase.test_use_xray_raise')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_use_xray_raise>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_use_xray_raise>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_raise' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_raise' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_raise' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_use_xray_raise>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_use_xray_raise>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_raise' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_raise' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_raise' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_use_xray_raise>
            nextitem: <TestCaseFunction test_xray>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_use_xray_raise>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_raise' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_raise' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_raise' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::MiscTestCase::test_use_xray_raise
            location: ('test/lib/test_py4lo_helper.py', 1755, 'MiscTestCase.test_use_xray_raise')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_xray>
          nextitem: <TestCaseFunction test_xray2>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::MiscTestCase::test_xray
            location: ('test/lib/test_py4lo_helper.py', 1904, 'MiscTestCase.test_xray')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_xray>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_xray>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_xray>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_xray>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_xray>
            nextitem: <TestCaseFunction test_xray2>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_xray>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::MiscTestCase::test_xray
            location: ('test/lib/test_py4lo_helper.py', 1904, 'MiscTestCase.test_xray')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_xray2>
          nextitem: <TestCaseFunction test_xray_fail>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::MiscTestCase::test_xray2
            location: ('test/lib/test_py4lo_helper.py', 1910, 'MiscTestCase.test_xray2')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_xray2>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_xray2>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray2' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray2' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray2' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_xray2>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_xray2>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray2' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray2' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray2' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_xray2>
            nextitem: <TestCaseFunction test_xray_fail>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_xray2>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray2' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::MiscTestCase::test_xray2
            location: ('test/lib/test_py4lo_helper.py', 1910, 'MiscTestCase.test_xray2')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_xray_fail>
          nextitem: <TestCaseFunction test_xray_twice>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::MiscTestCase::test_xray_fail
            location: ('test/lib/test_py4lo_helper.py', 1801, 'MiscTestCase.test_xray_fail')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_xray_fail>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_xray_fail>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray_fail' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray_fail' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray_fail' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_xray_fail>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_xray_fail>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray_fail' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray_fail' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray_fail' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_xray_fail>
            nextitem: <TestCaseFunction test_xray_twice>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_xray_fail>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray_fail' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray_fail' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray_fail' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::MiscTestCase::test_xray_fail
            location: ('test/lib/test_py4lo_helper.py', 1801, 'MiscTestCase.test_xray_fail')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_xray_twice>
          nextitem: <TestCaseFunction test_create_read_cell_accurate_date>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_helper.py::MiscTestCase::test_xray_twice
            location: ('test/lib/test_py4lo_helper.py', 1816, 'MiscTestCase.test_xray_twice')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_xray_twice>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_xray_twice>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray_twice' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray_twice' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray_twice' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_xray_twice>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_xray_twice>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray_twice' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray_twice' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray_twice' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_xray_twice>
            nextitem: <TestCaseFunction test_create_read_cell_accurate_date>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_MiscTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::MiscTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_MiscTestCase' for <TestCaseFunction test_xray_twice>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_MiscTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::MiscTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_MiscTestCase' for <TestCaseFunction test_xray_fail>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_MiscTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::MiscTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_MiscTestCase' for <TestCaseFunction test_xray2>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_MiscTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::MiscTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_MiscTestCase' for <TestCaseFunction test_xray>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_MiscTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::MiscTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_MiscTestCase' for <TestCaseFunction test_use_xray_raise>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_MiscTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::MiscTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_MiscTestCase' for <TestCaseFunction test_use_xray_ok>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_MiscTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::MiscTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_MiscTestCase' for <TestCaseFunction test_use_xray_ignore>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_MiscTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::MiscTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_MiscTestCase' for <TestCaseFunction test_mri_twice>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_MiscTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::MiscTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_MiscTestCase' for <TestCaseFunction test_mri_fail_twice>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_MiscTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::MiscTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_MiscTestCase' for <TestCaseFunction test_mri_fail_err>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_MiscTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::MiscTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_MiscTestCase' for <TestCaseFunction test_mri_fail>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_MiscTestCase' scope='class' baseid='test/lib/test_py4lo_helper.py::MiscTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_MiscTestCase' for <TestCaseFunction test_mri>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_xray_twice>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray_twice' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray_twice' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_helper.py::MiscTestCase::test_xray_twice' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_helper.py::MiscTestCase::test_xray_twice
            location: ('test/lib/test_py4lo_helper.py', 1816, 'MiscTestCase.test_xray_twice')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_read_cell_accurate_date>
          nextitem: <TestCaseFunction test_create_read_cell_accurate_empty>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_date
            location: ('test/lib/test_py4lo_io.py', 119, 'Py4LOIOTestCase.test_create_read_cell_accurate_date')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_date>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_create_read_cell_accurate_date>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_date>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_date' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_date' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_date' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_date>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_date>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_date' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_date' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_date' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_date>
            nextitem: <TestCaseFunction test_create_read_cell_accurate_empty>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_date>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_date' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_date' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_date' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_date
            location: ('test/lib/test_py4lo_io.py', 119, 'Py4LOIOTestCase.test_create_read_cell_accurate_date')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_read_cell_accurate_empty>
          nextitem: <TestCaseFunction test_create_read_cell_accurate_logical>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_empty
            location: ('test/lib/test_py4lo_io.py', 93, 'Py4LOIOTestCase.test_create_read_cell_accurate_empty')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_empty>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_empty>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_empty' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_empty' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_empty' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_empty>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_empty>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_empty' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_empty' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_empty' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_empty>
            nextitem: <TestCaseFunction test_create_read_cell_accurate_logical>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_empty>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_empty' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_empty' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_empty' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_empty
            location: ('test/lib/test_py4lo_io.py', 93, 'Py4LOIOTestCase.test_create_read_cell_accurate_empty')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_read_cell_accurate_logical>
          nextitem: <TestCaseFunction test_create_read_cell_accurate_number>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_logical
            location: ('test/lib/test_py4lo_io.py', 133, 'Py4LOIOTestCase.test_create_read_cell_accurate_logical')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_logical>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_logical>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_logical' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_logical' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_logical' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_logical>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_logical>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_logical' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_logical' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_logical' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_logical>
            nextitem: <TestCaseFunction test_create_read_cell_accurate_number>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_logical>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_logical' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_logical' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_logical' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_logical
            location: ('test/lib/test_py4lo_io.py', 133, 'Py4LOIOTestCase.test_create_read_cell_accurate_logical')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_read_cell_accurate_number>
          nextitem: <TestCaseFunction test_create_read_cell_accurate_other>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_number
            location: ('test/lib/test_py4lo_io.py', 147, 'Py4LOIOTestCase.test_create_read_cell_accurate_number')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_number>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_number>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_number' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_number' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_number' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_number>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_number>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_number' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_number' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_number' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_number>
            nextitem: <TestCaseFunction test_create_read_cell_accurate_other>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_number>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_number' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_number' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_number' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_number
            location: ('test/lib/test_py4lo_io.py', 147, 'Py4LOIOTestCase.test_create_read_cell_accurate_number')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_read_cell_accurate_other>
          nextitem: <TestCaseFunction test_create_read_cell_accurate_text>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_other
            location: ('test/lib/test_py4lo_io.py', 161, 'Py4LOIOTestCase.test_create_read_cell_accurate_other')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_other>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_other>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_other' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_other' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_other' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_other>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_other>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_other' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_other' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_other' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_other>
            nextitem: <TestCaseFunction test_create_read_cell_accurate_text>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_other>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_other' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_other' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_other' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_other
            location: ('test/lib/test_py4lo_io.py', 161, 'Py4LOIOTestCase.test_create_read_cell_accurate_other')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_read_cell_accurate_text>
          nextitem: <TestCaseFunction test_create_read_cell_accurate_wo_formats>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_text
            location: ('test/lib/test_py4lo_io.py', 106, 'Py4LOIOTestCase.test_create_read_cell_accurate_text')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_text>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_text>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_text' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_text' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_text' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_text>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_text>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_text' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_text' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_text' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_text>
            nextitem: <TestCaseFunction test_create_read_cell_accurate_wo_formats>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_text>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_text' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_text' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_text' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_text
            location: ('test/lib/test_py4lo_io.py', 106, 'Py4LOIOTestCase.test_create_read_cell_accurate_text')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_read_cell_accurate_wo_formats>
          nextitem: <TestCaseFunction test_create_read_cell_minimal_empty>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_wo_formats
            location: ('test/lib/test_py4lo_io.py', 175, 'Py4LOIOTestCase.test_create_read_cell_accurate_wo_formats')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_wo_formats>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_wo_formats>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_wo_formats' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_wo_formats' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_wo_formats' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_wo_formats>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_wo_formats>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_wo_formats' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_wo_formats' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_wo_formats' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_wo_formats>
            nextitem: <TestCaseFunction test_create_read_cell_minimal_empty>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_accurate_wo_formats>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_wo_formats' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_wo_formats' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_wo_formats' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_accurate_wo_formats
            location: ('test/lib/test_py4lo_io.py', 175, 'Py4LOIOTestCase.test_create_read_cell_accurate_wo_formats')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_read_cell_minimal_empty>
          nextitem: <TestCaseFunction test_create_read_cell_minimal_other>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_empty
            location: ('test/lib/test_py4lo_io.py', 44, 'Py4LOIOTestCase.test_create_read_cell_minimal_empty')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_read_cell_minimal_empty>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_minimal_empty>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_empty' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_empty' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_empty' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_read_cell_minimal_empty>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_minimal_empty>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_empty' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_empty' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_empty' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_read_cell_minimal_empty>
            nextitem: <TestCaseFunction test_create_read_cell_minimal_other>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_minimal_empty>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_empty' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_empty' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_empty' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_empty
            location: ('test/lib/test_py4lo_io.py', 44, 'Py4LOIOTestCase.test_create_read_cell_minimal_empty')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_read_cell_minimal_other>
          nextitem: <TestCaseFunction test_create_read_cell_minimal_text>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_other
            location: ('test/lib/test_py4lo_io.py', 80, 'Py4LOIOTestCase.test_create_read_cell_minimal_other')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_read_cell_minimal_other>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_minimal_other>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_other' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_other' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_other' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_read_cell_minimal_other>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_minimal_other>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_other' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_other' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_other' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_read_cell_minimal_other>
            nextitem: <TestCaseFunction test_create_read_cell_minimal_text>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_minimal_other>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_other' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_other' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_other' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_other
            location: ('test/lib/test_py4lo_io.py', 80, 'Py4LOIOTestCase.test_create_read_cell_minimal_other')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_read_cell_minimal_text>
          nextitem: <TestCaseFunction test_create_read_cell_minimal_value>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_text
            location: ('test/lib/test_py4lo_io.py', 56, 'Py4LOIOTestCase.test_create_read_cell_minimal_text')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_read_cell_minimal_text>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_minimal_text>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_text' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_text' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_text' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_read_cell_minimal_text>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_minimal_text>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_text' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_text' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_text' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_read_cell_minimal_text>
            nextitem: <TestCaseFunction test_create_read_cell_minimal_value>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_minimal_text>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_text' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_text' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_text' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_text
            location: ('test/lib/test_py4lo_io.py', 56, 'Py4LOIOTestCase.test_create_read_cell_minimal_text')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_read_cell_minimal_value>
          nextitem: <TestCaseFunction test_create_read_cell_none>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_value
            location: ('test/lib/test_py4lo_io.py', 68, 'Py4LOIOTestCase.test_create_read_cell_minimal_value')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_read_cell_minimal_value>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_minimal_value>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_value' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_value' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_value' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_read_cell_minimal_value>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_minimal_value>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_value' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_value' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_value' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_read_cell_minimal_value>
            nextitem: <TestCaseFunction test_create_read_cell_none>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_minimal_value>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_value' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_value' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_value' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_minimal_value
            location: ('test/lib/test_py4lo_io.py', 68, 'Py4LOIOTestCase.test_create_read_cell_minimal_value')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_read_cell_none>
          nextitem: <TestCaseFunction test_create_read_cell_other>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_none
            location: ('test/lib/test_py4lo_io.py', 34, 'Py4LOIOTestCase.test_create_read_cell_none')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_read_cell_none>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_none>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_none' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_none' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_none' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_read_cell_none>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_none>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_none' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_none' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_none' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_read_cell_none>
            nextitem: <TestCaseFunction test_create_read_cell_other>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_none>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_none' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_none' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_none' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_none
            location: ('test/lib/test_py4lo_io.py', 34, 'Py4LOIOTestCase.test_create_read_cell_none')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_read_cell_other>
          nextitem: <TestCaseFunction test_create_write_cell_accurate_bool>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_other
            location: ('test/lib/test_py4lo_io.py', 179, 'Py4LOIOTestCase.test_create_read_cell_other')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_read_cell_other>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_other>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_other' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_other' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_other' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_read_cell_other>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_other>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_other' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_other' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_other' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_read_cell_other>
            nextitem: <TestCaseFunction test_create_write_cell_accurate_bool>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_read_cell_other>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_other' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_other' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_other' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_read_cell_other
            location: ('test/lib/test_py4lo_io.py', 179, 'Py4LOIOTestCase.test_create_read_cell_other')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_write_cell_accurate_bool>
          nextitem: <TestCaseFunction test_create_write_cell_accurate_date>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_bool
            location: ('test/lib/test_py4lo_io.py', 452, 'Py4LOIOTestCase.test_create_write_cell_accurate_bool')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_bool>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_bool>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_bool' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_bool' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_bool' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_bool>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_bool>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_bool' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_bool' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_bool' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_bool>
            nextitem: <TestCaseFunction test_create_write_cell_accurate_date>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_bool>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_bool' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_bool' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_bool' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_bool
            location: ('test/lib/test_py4lo_io.py', 452, 'Py4LOIOTestCase.test_create_write_cell_accurate_bool')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_write_cell_accurate_date>
          nextitem: <TestCaseFunction test_create_write_cell_accurate_datetime>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_date
            location: ('test/lib/test_py4lo_io.py', 424, 'Py4LOIOTestCase.test_create_write_cell_accurate_date')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_date>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_date>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_date' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_date' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_date' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_date>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_date>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_date' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_date' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_date' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_date>
            nextitem: <TestCaseFunction test_create_write_cell_accurate_datetime>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_date>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_date' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_date' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_date' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_date
            location: ('test/lib/test_py4lo_io.py', 424, 'Py4LOIOTestCase.test_create_write_cell_accurate_date')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_write_cell_accurate_datetime>
          nextitem: <TestCaseFunction test_create_write_cell_accurate_no_format>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_datetime
            location: ('test/lib/test_py4lo_io.py', 438, 'Py4LOIOTestCase.test_create_write_cell_accurate_datetime')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_datetime>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_datetime>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_datetime' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_datetime' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_datetime' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_datetime>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_datetime>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_datetime' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_datetime' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_datetime' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_datetime>
            nextitem: <TestCaseFunction test_create_write_cell_accurate_no_format>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_datetime>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_datetime' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_datetime' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_datetime' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_datetime
            location: ('test/lib/test_py4lo_io.py', 438, 'Py4LOIOTestCase.test_create_write_cell_accurate_datetime')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_write_cell_accurate_no_format>
          nextitem: <TestCaseFunction test_create_write_cell_accurate_none>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_no_format
            location: ('test/lib/test_py4lo_io.py', 466, 'Py4LOIOTestCase.test_create_write_cell_accurate_no_format')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_no_format>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_no_format>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_no_format' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_no_format' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_no_format' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_no_format>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_no_format>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_no_format' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_no_format' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_no_format' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_no_format>
            nextitem: <TestCaseFunction test_create_write_cell_accurate_none>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_no_format>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_no_format' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_no_format' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_no_format' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_no_format
            location: ('test/lib/test_py4lo_io.py', 466, 'Py4LOIOTestCase.test_create_write_cell_accurate_no_format')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_write_cell_accurate_none>
          nextitem: <TestCaseFunction test_create_write_cell_accurate_number>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_none
            location: ('test/lib/test_py4lo_io.py', 388, 'Py4LOIOTestCase.test_create_write_cell_accurate_none')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_none>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_none>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_none' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_none' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_none' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_none>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_none>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_none' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_none' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_none' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_none>
            nextitem: <TestCaseFunction test_create_write_cell_accurate_number>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_none>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_none' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_none' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_none' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_none
            location: ('test/lib/test_py4lo_io.py', 388, 'Py4LOIOTestCase.test_create_write_cell_accurate_none')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_write_cell_accurate_number>
          nextitem: <TestCaseFunction test_create_write_cell_accurate_string>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_number
            location: ('test/lib/test_py4lo_io.py', 412, 'Py4LOIOTestCase.test_create_write_cell_accurate_number')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_number>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_number>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_number' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_number' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_number' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_number>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_number>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_number' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_number' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_number' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_number>
            nextitem: <TestCaseFunction test_create_write_cell_accurate_string>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_number>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_number' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_number' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_number' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_number
            location: ('test/lib/test_py4lo_io.py', 412, 'Py4LOIOTestCase.test_create_write_cell_accurate_number')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_write_cell_accurate_string>
          nextitem: <TestCaseFunction test_create_write_cell_minimal_bool>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_string
            location: ('test/lib/test_py4lo_io.py', 400, 'Py4LOIOTestCase.test_create_write_cell_accurate_string')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_string>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_string>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_string' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_string' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_string' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_string>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_string>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_string' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_string' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_string' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_string>
            nextitem: <TestCaseFunction test_create_write_cell_minimal_bool>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_accurate_string>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_string' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_string' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_string' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_accurate_string
            location: ('test/lib/test_py4lo_io.py', 400, 'Py4LOIOTestCase.test_create_write_cell_accurate_string')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_write_cell_minimal_bool>
          nextitem: <TestCaseFunction test_create_write_cell_minimal_date>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_bool
            location: ('test/lib/test_py4lo_io.py', 366, 'Py4LOIOTestCase.test_create_write_cell_minimal_bool')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_bool>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_bool>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_bool' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_bool' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_bool' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_bool>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_bool>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_bool' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_bool' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_bool' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_bool>
            nextitem: <TestCaseFunction test_create_write_cell_minimal_date>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_bool>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_bool' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_bool' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_bool' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_bool
            location: ('test/lib/test_py4lo_io.py', 366, 'Py4LOIOTestCase.test_create_write_cell_minimal_bool')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_write_cell_minimal_date>
          nextitem: <TestCaseFunction test_create_write_cell_minimal_none>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_date
            location: ('test/lib/test_py4lo_io.py', 355, 'Py4LOIOTestCase.test_create_write_cell_minimal_date')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_date>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_date>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_date' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_date' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_date' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_date>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_date>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_date' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_date' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_date' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_date>
            nextitem: <TestCaseFunction test_create_write_cell_minimal_none>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_date>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_date' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_date' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_date' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_date
            location: ('test/lib/test_py4lo_io.py', 355, 'Py4LOIOTestCase.test_create_write_cell_minimal_date')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_write_cell_minimal_none>
          nextitem: <TestCaseFunction test_create_write_cell_minimal_number>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_none
            location: ('test/lib/test_py4lo_io.py', 333, 'Py4LOIOTestCase.test_create_write_cell_minimal_none')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_none>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_none>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_none' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_none' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_none' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_none>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_none>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_none' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_none' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_none' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_none>
            nextitem: <TestCaseFunction test_create_write_cell_minimal_number>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_none>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_none' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_none' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_none' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_none
            location: ('test/lib/test_py4lo_io.py', 333, 'Py4LOIOTestCase.test_create_write_cell_minimal_none')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_write_cell_minimal_number>
          nextitem: <TestCaseFunction test_create_write_cell_minimal_string>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_number
            location: ('test/lib/test_py4lo_io.py', 377, 'Py4LOIOTestCase.test_create_write_cell_minimal_number')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_number>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_number>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_number' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_number' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_number' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_number>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_number>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_number' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_number' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_number' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_number>
            nextitem: <TestCaseFunction test_create_write_cell_minimal_string>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_number>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_number' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_number' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_number' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_number
            location: ('test/lib/test_py4lo_io.py', 377, 'Py4LOIOTestCase.test_create_write_cell_minimal_number')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_write_cell_minimal_string>
          nextitem: <TestCaseFunction test_create_write_cell_other>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_string
            location: ('test/lib/test_py4lo_io.py', 344, 'Py4LOIOTestCase.test_create_write_cell_minimal_string')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_string>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_string>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_string' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_string' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_string' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_string>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_string>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_string' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_string' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_string' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_string>
            nextitem: <TestCaseFunction test_create_write_cell_other>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_minimal_string>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_string' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_string' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_string' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_minimal_string
            location: ('test/lib/test_py4lo_io.py', 344, 'Py4LOIOTestCase.test_create_write_cell_minimal_string')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_write_cell_other>
          nextitem: <TestCaseFunction test_create_write_cell_string>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_other
            location: ('test/lib/test_py4lo_io.py', 470, 'Py4LOIOTestCase.test_create_write_cell_other')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_write_cell_other>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_other>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_other' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_other' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_other' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_write_cell_other>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_other>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_other' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_other' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_other' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_write_cell_other>
            nextitem: <TestCaseFunction test_create_write_cell_string>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_other>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_other' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_other' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_other' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_other
            location: ('test/lib/test_py4lo_io.py', 470, 'Py4LOIOTestCase.test_create_write_cell_other')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create_write_cell_string>
          nextitem: <TestCaseFunction test_dict_reader>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_string
            location: ('test/lib/test_py4lo_io.py', 322, 'Py4LOIOTestCase.test_create_write_cell_string')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create_write_cell_string>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_string>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_string' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_string' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_string' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create_write_cell_string>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_string>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_string' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_string' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_string' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create_write_cell_string>
            nextitem: <TestCaseFunction test_dict_reader>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create_write_cell_string>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_string' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_string' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_string' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_create_write_cell_string
            location: ('test/lib/test_py4lo_io.py', 322, 'Py4LOIOTestCase.test_create_write_cell_string')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_dict_reader>
          nextitem: <TestCaseFunction test_dict_reader_fieldnames>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader
            location: ('test/lib/test_py4lo_io.py', 243, 'Py4LOIOTestCase.test_dict_reader')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_dict_reader>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_dict_reader>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_dict_reader>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_dict_reader>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_dict_reader>
            nextitem: <TestCaseFunction test_dict_reader_fieldnames>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_dict_reader>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader
            location: ('test/lib/test_py4lo_io.py', 243, 'Py4LOIOTestCase.test_dict_reader')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_dict_reader_fieldnames>
          nextitem: <TestCaseFunction test_dict_reader_fieldnames_rest>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader_fieldnames
            location: ('test/lib/test_py4lo_io.py', 263, 'Py4LOIOTestCase.test_dict_reader_fieldnames')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_dict_reader_fieldnames>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_dict_reader_fieldnames>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader_fieldnames' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader_fieldnames' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader_fieldnames' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_dict_reader_fieldnames>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_dict_reader_fieldnames>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader_fieldnames' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader_fieldnames' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader_fieldnames' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_dict_reader_fieldnames>
            nextitem: <TestCaseFunction test_dict_reader_fieldnames_rest>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_dict_reader_fieldnames>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader_fieldnames' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader_fieldnames' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader_fieldnames' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader_fieldnames
            location: ('test/lib/test_py4lo_io.py', 263, 'Py4LOIOTestCase.test_dict_reader_fieldnames')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_dict_reader_fieldnames_rest>
          nextitem: <TestCaseFunction test_dict_writer_wc>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader_fieldnames_rest
            location: ('test/lib/test_py4lo_io.py', 285, 'Py4LOIOTestCase.test_dict_reader_fieldnames_rest')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_dict_reader_fieldnames_rest>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_dict_reader_fieldnames_rest>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader_fieldnames_rest' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader_fieldnames_rest' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader_fieldnames_rest' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_dict_reader_fieldnames_rest>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_dict_reader_fieldnames_rest>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader_fieldnames_rest' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader_fieldnames_rest' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader_fieldnames_rest' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_dict_reader_fieldnames_rest>
            nextitem: <TestCaseFunction test_dict_writer_wc>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_dict_reader_fieldnames_rest>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader_fieldnames_rest' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader_fieldnames_rest' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader_fieldnames_rest' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_reader_fieldnames_rest
            location: ('test/lib/test_py4lo_io.py', 285, 'Py4LOIOTestCase.test_dict_reader_fieldnames_rest')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_dict_writer_wc>
          nextitem: <TestCaseFunction test_dict_writer_wc_raise>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc
            location: ('test/lib/test_py4lo_io.py', 557, 'Py4LOIOTestCase.test_dict_writer_wc')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_dict_writer_wc>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_dict_writer_wc>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_dict_writer_wc>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_dict_writer_wc>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_dict_writer_wc>
            nextitem: <TestCaseFunction test_dict_writer_wc_raise>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_dict_writer_wc>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc
            location: ('test/lib/test_py4lo_io.py', 557, 'Py4LOIOTestCase.test_dict_writer_wc')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_dict_writer_wc_raise>
          nextitem: <TestCaseFunction test_dict_writer_wc_restval>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc_raise
            location: ('test/lib/test_py4lo_io.py', 590, 'Py4LOIOTestCase.test_dict_writer_wc_raise')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_dict_writer_wc_raise>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_dict_writer_wc_raise>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc_raise' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc_raise' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc_raise' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_dict_writer_wc_raise>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_dict_writer_wc_raise>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc_raise' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc_raise' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc_raise' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_dict_writer_wc_raise>
            nextitem: <TestCaseFunction test_dict_writer_wc_restval>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_dict_writer_wc_raise>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc_raise' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc_raise' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc_raise' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc_raise
            location: ('test/lib/test_py4lo_io.py', 590, 'Py4LOIOTestCase.test_dict_writer_wc_raise')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_dict_writer_wc_restval>
          nextitem: <TestCaseFunction test_find_number_format_style>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc_restval
            location: ('test/lib/test_py4lo_io.py', 614, 'Py4LOIOTestCase.test_dict_writer_wc_restval')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_dict_writer_wc_restval>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_dict_writer_wc_restval>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc_restval' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc_restval' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc_restval' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_dict_writer_wc_restval>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_dict_writer_wc_restval>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc_restval' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc_restval' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc_restval' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_dict_writer_wc_restval>
            nextitem: <TestCaseFunction test_find_number_format_style>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_dict_writer_wc_restval>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc_restval' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc_restval' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc_restval' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_dict_writer_wc_restval
            location: ('test/lib/test_py4lo_io.py', 614, 'Py4LOIOTestCase.test_dict_writer_wc_restval')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_find_number_format_style>
          nextitem: <TestCaseFunction test_reader>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_find_number_format_style
            location: ('test/lib/test_py4lo_io.py', 307, 'Py4LOIOTestCase.test_find_number_format_style')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_find_number_format_style>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_find_number_format_style>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_find_number_format_style' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_find_number_format_style' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_find_number_format_style' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_find_number_format_style>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_find_number_format_style>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_find_number_format_style' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_find_number_format_style' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_find_number_format_style' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_find_number_format_style>
            nextitem: <TestCaseFunction test_reader>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_find_number_format_style>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_find_number_format_style' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_find_number_format_style' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_find_number_format_style' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_find_number_format_style
            location: ('test/lib/test_py4lo_io.py', 307, 'Py4LOIOTestCase.test_find_number_format_style')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_reader>
          nextitem: <TestCaseFunction test_reader_accurate>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader
            location: ('test/lib/test_py4lo_io.py', 200, 'Py4LOIOTestCase.test_reader')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_reader>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_reader>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_reader>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_reader>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_reader>
            nextitem: <TestCaseFunction test_reader_accurate>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_reader>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader
            location: ('test/lib/test_py4lo_io.py', 200, 'Py4LOIOTestCase.test_reader')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_reader_accurate>
          nextitem: <TestCaseFunction test_reader_rc>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader_accurate
            location: ('test/lib/test_py4lo_io.py', 220, 'Py4LOIOTestCase.test_reader_accurate')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_reader_accurate>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_reader_accurate>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader_accurate' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader_accurate' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader_accurate' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_reader_accurate>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_reader_accurate>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader_accurate' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader_accurate' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader_accurate' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_reader_accurate>
            nextitem: <TestCaseFunction test_reader_rc>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_reader_accurate>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader_accurate' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader_accurate' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader_accurate' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader_accurate
            location: ('test/lib/test_py4lo_io.py', 220, 'Py4LOIOTestCase.test_reader_accurate')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_reader_rc>
          nextitem: <TestCaseFunction test_writer_formats>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader_rc
            location: ('test/lib/test_py4lo_io.py', 183, 'Py4LOIOTestCase.test_reader_rc')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_reader_rc>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_reader_rc>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader_rc' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader_rc' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader_rc' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_reader_rc>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_reader_rc>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader_rc' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader_rc' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader_rc' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_reader_rc>
            nextitem: <TestCaseFunction test_writer_formats>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_reader_rc>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader_rc' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader_rc' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader_rc' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_reader_rc
            location: ('test/lib/test_py4lo_io.py', 183, 'Py4LOIOTestCase.test_reader_rc')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_writer_formats>
          nextitem: <TestCaseFunction test_writer_no_formats>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_formats
            location: ('test/lib/test_py4lo_io.py', 501, 'Py4LOIOTestCase.test_writer_formats')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_writer_formats>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_writer_formats>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_formats' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_formats' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_formats' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_writer_formats>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_writer_formats>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_formats' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_formats' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_formats' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_writer_formats>
            nextitem: <TestCaseFunction test_writer_no_formats>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_writer_formats>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_formats' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_formats' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_formats' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_formats
            location: ('test/lib/test_py4lo_io.py', 501, 'Py4LOIOTestCase.test_writer_formats')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_writer_no_formats>
          nextitem: <TestCaseFunction test_writer_wc>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_no_formats
            location: ('test/lib/test_py4lo_io.py', 527, 'Py4LOIOTestCase.test_writer_no_formats')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_writer_no_formats>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_writer_no_formats>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_no_formats' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_no_formats' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_no_formats' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_writer_no_formats>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_writer_no_formats>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_no_formats' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_no_formats' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_no_formats' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_writer_no_formats>
            nextitem: <TestCaseFunction test_writer_wc>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_writer_no_formats>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_no_formats' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_no_formats' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_no_formats' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_no_formats
            location: ('test/lib/test_py4lo_io.py', 527, 'Py4LOIOTestCase.test_writer_no_formats')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_writer_wc>
          nextitem: <TestCaseFunction test_empty_export_options>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_wc
            location: ('test/lib/test_py4lo_io.py', 474, 'Py4LOIOTestCase.test_writer_wc')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_writer_wc>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_writer_wc>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_wc' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_wc' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_wc' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_writer_wc>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_writer_wc>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_wc' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_wc' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_wc' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_writer_wc>
            nextitem: <TestCaseFunction test_empty_export_options>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_writer_wc>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_writer_no_formats>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_writer_formats>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_reader_rc>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_reader_accurate>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_reader>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_find_number_format_style>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_dict_writer_wc_restval>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_dict_writer_wc_raise>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_dict_writer_wc>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_dict_reader_fieldnames_rest>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_dict_reader_fieldnames>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_dict_reader>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_create_write_cell_string>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_create_write_cell_other>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_create_write_cell_minimal_string>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_create_write_cell_minimal_number>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_create_write_cell_minimal_none>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_create_write_cell_minimal_date>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_create_write_cell_minimal_bool>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_create_write_cell_accurate_string>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_create_write_cell_accurate_number>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_create_write_cell_accurate_none>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_create_write_cell_accurate_no_format>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_create_write_cell_accurate_datetime>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_create_write_cell_accurate_date>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_create_write_cell_accurate_bool>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_create_read_cell_other>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_create_read_cell_none>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_create_read_cell_minimal_value>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_create_read_cell_minimal_text>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_create_read_cell_minimal_other>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_create_read_cell_minimal_empty>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_create_read_cell_accurate_wo_formats>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_create_read_cell_accurate_text>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_create_read_cell_accurate_other>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_create_read_cell_accurate_number>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_create_read_cell_accurate_logical>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_create_read_cell_accurate_empty>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Py4LOIOTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::Py4LOIOTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Py4LOIOTestCase' for <TestCaseFunction test_create_read_cell_accurate_date>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_writer_wc>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_wc' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_wc' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_wc' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::Py4LOIOTestCase::test_writer_wc
            location: ('test/lib/test_py4lo_io.py', 474, 'Py4LOIOTestCase.test_writer_wc')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_empty_export_options>
          nextitem: <TestCaseFunction test_empty_import_options>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::IOCSVTestCase::test_empty_export_options
            location: ('test/lib/test_py4lo_io.py', 715, 'IOCSVTestCase.test_empty_export_options')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_empty_export_options>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_IOCSVTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::IOCSVTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_IOCSVTestCase' for <TestCaseFunction test_empty_export_options>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_empty_export_options>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_empty_export_options' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_empty_export_options' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_empty_export_options' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_empty_export_options>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_empty_export_options>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_empty_export_options' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_empty_export_options' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_empty_export_options' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_empty_export_options>
            nextitem: <TestCaseFunction test_empty_import_options>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_empty_export_options>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_empty_export_options' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_empty_export_options' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_empty_export_options' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::IOCSVTestCase::test_empty_export_options
            location: ('test/lib/test_py4lo_io.py', 715, 'IOCSVTestCase.test_empty_export_options')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_empty_import_options>
          nextitem: <TestCaseFunction test_export_options_dialect>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::IOCSVTestCase::test_empty_import_options
            location: ('test/lib/test_py4lo_io.py', 679, 'IOCSVTestCase.test_empty_import_options')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_empty_import_options>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_empty_import_options>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_empty_import_options' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_empty_import_options' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_empty_import_options' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_empty_import_options>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_empty_import_options>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_empty_import_options' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_empty_import_options' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_empty_import_options' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_empty_import_options>
            nextitem: <TestCaseFunction test_export_options_dialect>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_empty_import_options>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_empty_import_options' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_empty_import_options' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_empty_import_options' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::IOCSVTestCase::test_empty_import_options
            location: ('test/lib/test_py4lo_io.py', 679, 'IOCSVTestCase.test_empty_import_options')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_export_options_dialect>
          nextitem: <TestCaseFunction test_export_options_two_parameters>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_options_dialect
            location: ('test/lib/test_py4lo_io.py', 719, 'IOCSVTestCase.test_export_options_dialect')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_export_options_dialect>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_export_options_dialect>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_options_dialect' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_options_dialect' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_options_dialect' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_export_options_dialect>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_export_options_dialect>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_options_dialect' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_options_dialect' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_options_dialect' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_export_options_dialect>
            nextitem: <TestCaseFunction test_export_options_two_parameters>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_export_options_dialect>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_options_dialect' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_options_dialect' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_options_dialect' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_options_dialect
            location: ('test/lib/test_py4lo_io.py', 719, 'IOCSVTestCase.test_export_options_dialect')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_export_options_two_parameters>
          nextitem: <TestCaseFunction test_export_to_csv>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_options_two_parameters
            location: ('test/lib/test_py4lo_io.py', 725, 'IOCSVTestCase.test_export_options_two_parameters')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_export_options_two_parameters>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_export_options_two_parameters>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_options_two_parameters' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_options_two_parameters' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_options_two_parameters' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_export_options_two_parameters>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_export_options_two_parameters>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_options_two_parameters' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_options_two_parameters' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_options_two_parameters' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_export_options_two_parameters>
            nextitem: <TestCaseFunction test_export_to_csv>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_export_options_two_parameters>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_options_two_parameters' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_options_two_parameters' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_options_two_parameters' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_options_two_parameters
            location: ('test/lib/test_py4lo_io.py', 725, 'IOCSVTestCase.test_export_options_two_parameters')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_export_to_csv>
          nextitem: <TestCaseFunction test_import_from_csv>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_to_csv
            location: ('test/lib/test_py4lo_io.py', 689, 'IOCSVTestCase.test_export_to_csv')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_export_to_csv>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_export_to_csv>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_to_csv' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_to_csv' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_to_csv' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_export_to_csv>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_export_to_csv>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_to_csv' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_to_csv' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_to_csv' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_export_to_csv>
            nextitem: <TestCaseFunction test_import_from_csv>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_export_to_csv>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_to_csv' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_to_csv' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_to_csv' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::IOCSVTestCase::test_export_to_csv
            location: ('test/lib/test_py4lo_io.py', 689, 'IOCSVTestCase.test_export_to_csv')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_import_from_csv>
          nextitem: <TestCaseFunction test_import_options>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_from_csv
            location: ('test/lib/test_py4lo_io.py', 642, 'IOCSVTestCase.test_import_from_csv')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_import_from_csv>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_import_from_csv>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_from_csv' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_from_csv' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_from_csv' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_import_from_csv>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_import_from_csv>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_from_csv' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_from_csv' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_from_csv' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_import_from_csv>
            nextitem: <TestCaseFunction test_import_options>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_import_from_csv>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_from_csv' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_from_csv' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_from_csv' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_from_csv
            location: ('test/lib/test_py4lo_io.py', 642, 'IOCSVTestCase.test_import_from_csv')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_import_options>
          nextitem: <TestCaseFunction test_import_options_dialect>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options
            location: ('test/lib/test_py4lo_io.py', 683, 'IOCSVTestCase.test_import_options')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_import_options>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_import_options>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_import_options>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_import_options>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_import_options>
            nextitem: <TestCaseFunction test_import_options_dialect>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_import_options>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options
            location: ('test/lib/test_py4lo_io.py', 683, 'IOCSVTestCase.test_import_options')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_import_options_dialect>
          nextitem: <TestCaseFunction test_import_options_two_args>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options_dialect
            location: ('test/lib/test_py4lo_io.py', 669, 'IOCSVTestCase.test_import_options_dialect')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_import_options_dialect>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_import_options_dialect>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options_dialect' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options_dialect' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options_dialect' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_import_options_dialect>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_import_options_dialect>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options_dialect' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options_dialect' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options_dialect' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_import_options_dialect>
            nextitem: <TestCaseFunction test_import_options_two_args>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_import_options_dialect>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options_dialect' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options_dialect' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options_dialect' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options_dialect
            location: ('test/lib/test_py4lo_io.py', 669, 'IOCSVTestCase.test_import_options_dialect')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_import_options_two_args>
          nextitem: <TestCaseFunction test_active_table_name>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options_two_args
            location: ('test/lib/test_py4lo_io.py', 675, 'IOCSVTestCase.test_import_options_two_args')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_import_options_two_args>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_import_options_two_args>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options_two_args' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options_two_args' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options_two_args' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_import_options_two_args>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_import_options_two_args>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options_two_args' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options_two_args' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options_two_args' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_import_options_two_args>
            nextitem: <TestCaseFunction test_active_table_name>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_IOCSVTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::IOCSVTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_IOCSVTestCase' for <TestCaseFunction test_import_options_two_args>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_IOCSVTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::IOCSVTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_IOCSVTestCase' for <TestCaseFunction test_import_options_dialect>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_IOCSVTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::IOCSVTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_IOCSVTestCase' for <TestCaseFunction test_import_options>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_IOCSVTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::IOCSVTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_IOCSVTestCase' for <TestCaseFunction test_import_from_csv>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_IOCSVTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::IOCSVTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_IOCSVTestCase' for <TestCaseFunction test_export_to_csv>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_IOCSVTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::IOCSVTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_IOCSVTestCase' for <TestCaseFunction test_export_options_two_parameters>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_IOCSVTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::IOCSVTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_IOCSVTestCase' for <TestCaseFunction test_export_options_dialect>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_IOCSVTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::IOCSVTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_IOCSVTestCase' for <TestCaseFunction test_empty_import_options>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_IOCSVTestCase' scope='class' baseid='test/lib/test_py4lo_io.py::IOCSVTestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_IOCSVTestCase' for <TestCaseFunction test_empty_export_options>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_import_options_two_args>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options_two_args' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options_two_args' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options_two_args' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_io.py::IOCSVTestCase::test_import_options_two_args
            location: ('test/lib/test_py4lo_io.py', 675, 'IOCSVTestCase.test_import_options_two_args')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_active_table_name>
          nextitem: <TestCaseFunction test_get_item1>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_ods.py::TestOds1::test_active_table_name
            location: ('test/lib/test_py4lo_ods.py', 282, 'TestOds1.test_active_table_name')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_active_table_name>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestOds1' scope='class' baseid='test/lib/test_py4lo_ods.py::TestOds1'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestOds1' for <TestCaseFunction test_active_table_name>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_active_table_name>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_active_table_name' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_active_table_name' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_active_table_name' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_active_table_name>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_active_table_name>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_active_table_name' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_active_table_name' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_active_table_name' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_active_table_name>
            nextitem: <TestCaseFunction test_get_item1>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_active_table_name>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_active_table_name' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_active_table_name' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_active_table_name' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_ods.py::TestOds1::test_active_table_name
            location: ('test/lib/test_py4lo_ods.py', 282, 'TestOds1.test_active_table_name')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_get_item1>
          nextitem: <TestCaseFunction test_get_item_neg1>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_ods.py::TestOds1::test_get_item1
            location: ('test/lib/test_py4lo_ods.py', 269, 'TestOds1.test_get_item1')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_get_item1>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_item1>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_get_item1' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_get_item1' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_get_item1' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_get_item1>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_item1>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_get_item1' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_get_item1' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_get_item1' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_get_item1>
            nextitem: <TestCaseFunction test_get_item_neg1>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_item1>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_get_item1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_get_item1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_get_item1' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_ods.py::TestOds1::test_get_item1
            location: ('test/lib/test_py4lo_ods.py', 269, 'TestOds1.test_get_item1')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_get_item_neg1>
          nextitem: <TestCaseFunction test_get_slice>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_ods.py::TestOds1::test_get_item_neg1
            location: ('test/lib/test_py4lo_ods.py', 272, 'TestOds1.test_get_item_neg1')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_get_item_neg1>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_item_neg1>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_get_item_neg1' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_get_item_neg1' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_get_item_neg1' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_get_item_neg1>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_item_neg1>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_get_item_neg1' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_get_item_neg1' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_get_item_neg1' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_get_item_neg1>
            nextitem: <TestCaseFunction test_get_slice>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_item_neg1>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_get_item_neg1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_get_item_neg1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_get_item_neg1' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_ods.py::TestOds1::test_get_item_neg1
            location: ('test/lib/test_py4lo_ods.py', 272, 'TestOds1.test_get_item_neg1')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_get_slice>
          nextitem: <TestCaseFunction test_list>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_ods.py::TestOds1::test_get_slice
            location: ('test/lib/test_py4lo_ods.py', 275, 'TestOds1.test_get_slice')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_get_slice>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_slice>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_get_slice' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_get_slice' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_get_slice' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_get_slice>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_slice>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_get_slice' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_get_slice' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_get_slice' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_get_slice>
            nextitem: <TestCaseFunction test_list>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_slice>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_get_slice' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_get_slice' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_get_slice' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_ods.py::TestOds1::test_get_slice
            location: ('test/lib/test_py4lo_ods.py', 275, 'TestOds1.test_get_slice')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_list>
          nextitem: <TestCaseFunction test_list>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_ods.py::TestOds1::test_list
            location: ('test/lib/test_py4lo_ods.py', 259, 'TestOds1.test_list')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_list>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_list>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_list' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_list' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_list' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_list>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_list>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_list' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_list' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_list' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_list>
            nextitem: <TestCaseFunction test_list>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestOds1' scope='class' baseid='test/lib/test_py4lo_ods.py::TestOds1'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestOds1' for <TestCaseFunction test_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestOds1' scope='class' baseid='test/lib/test_py4lo_ods.py::TestOds1'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestOds1' for <TestCaseFunction test_get_slice>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestOds1' scope='class' baseid='test/lib/test_py4lo_ods.py::TestOds1'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestOds1' for <TestCaseFunction test_get_item_neg1>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestOds1' scope='class' baseid='test/lib/test_py4lo_ods.py::TestOds1'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestOds1' for <TestCaseFunction test_get_item1>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestOds1' scope='class' baseid='test/lib/test_py4lo_ods.py::TestOds1'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestOds1' for <TestCaseFunction test_active_table_name>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_list>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_list' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_list' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds1::test_list' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_ods.py::TestOds1::test_list
            location: ('test/lib/test_py4lo_ods.py', 259, 'TestOds1.test_list')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_list>
          nextitem: <TestCaseFunction test_list>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_ods.py::TestOds2::test_list
            location: ('test/lib/test_py4lo_ods.py', 295, 'TestOds2.test_list')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_list>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestOds2' scope='class' baseid='test/lib/test_py4lo_ods.py::TestOds2'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestOds2' for <TestCaseFunction test_list>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_list>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_ods.py::TestOds2::test_list' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds2::test_list' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds2::test_list' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_list>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_list>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_ods.py::TestOds2::test_list' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds2::test_list' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds2::test_list' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_list>
            nextitem: <TestCaseFunction test_list>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestOds2' scope='class' baseid='test/lib/test_py4lo_ods.py::TestOds2'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestOds2' for <TestCaseFunction test_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_list>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_ods.py::TestOds2::test_list' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds2::test_list' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds2::test_list' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_ods.py::TestOds2::test_list
            location: ('test/lib/test_py4lo_ods.py', 295, 'TestOds2.test_list')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_list>
          nextitem: <TestCaseFunction test_bindings>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_ods.py::TestOds3::test_list
            location: ('test/lib/test_py4lo_ods.py', 312, 'TestOds3.test_list')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_list>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestOds3' scope='class' baseid='test/lib/test_py4lo_ods.py::TestOds3'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestOds3' for <TestCaseFunction test_list>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_list>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_ods.py::TestOds3::test_list' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds3::test_list' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds3::test_list' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_list>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_list>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_ods.py::TestOds3::test_list' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds3::test_list' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds3::test_list' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_list>
            nextitem: <TestCaseFunction test_bindings>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestOds3' scope='class' baseid='test/lib/test_py4lo_ods.py::TestOds3'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestOds3' for <TestCaseFunction test_list>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_list>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_ods.py::TestOds3::test_list' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds3::test_list' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_ods.py::TestOds3::test_list' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_ods.py::TestOds3::test_list
            location: ('test/lib/test_py4lo_ods.py', 312, 'TestOds3.test_list')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_bindings>
          nextitem: <TestCaseFunction test_busy>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_bindings
            location: ('test/lib/test_py4lo_sqlite3.py', 102, 'Sqlite3TestCase.test_bindings')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_bindings>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Sqlite3TestCase' scope='class' baseid='test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Sqlite3TestCase' for <TestCaseFunction test_bindings>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_bindings>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_bindings' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_bindings' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_bindings' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_bindings>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_bindings>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_bindings' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_bindings' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_bindings' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_bindings>
            nextitem: <TestCaseFunction test_busy>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_bindings>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_bindings' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_bindings' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_bindings' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_bindings
            location: ('test/lib/test_py4lo_sqlite3.py', 102, 'Sqlite3TestCase.test_bindings')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_busy>
          nextitem: <TestCaseFunction test_exec>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_busy
            location: ('test/lib/test_py4lo_sqlite3.py', 89, 'Sqlite3TestCase.test_busy')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_busy>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_busy>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_busy' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_busy' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_busy' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_busy>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_busy>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_busy' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_busy' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_busy' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_busy>
            nextitem: <TestCaseFunction test_exec>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_busy>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_busy' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_busy' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_busy' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_busy
            location: ('test/lib/test_py4lo_sqlite3.py', 89, 'Sqlite3TestCase.test_busy')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_exec>
          nextitem: <TestCaseFunction test_index>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_exec
            location: ('test/lib/test_py4lo_sqlite3.py', 80, 'Sqlite3TestCase.test_exec')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_exec>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_exec>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_exec' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_exec' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_exec' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_exec>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_exec>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_exec' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_exec' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_exec' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_exec>
            nextitem: <TestCaseFunction test_index>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_exec>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_exec' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_exec' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_exec' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_exec
            location: ('test/lib/test_py4lo_sqlite3.py', 80, 'Sqlite3TestCase.test_exec')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_index>
          nextitem: <TestCaseFunction test_open_r_missing_file>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_index
            location: ('test/lib/test_py4lo_sqlite3.py', 117, 'Sqlite3TestCase.test_index')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_index>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_index>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_index' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_index' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_index' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_index>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_index>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_index' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_index' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_index' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_index>
            nextitem: <TestCaseFunction test_open_r_missing_file>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_index>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_index' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_index' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_index' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_index
            location: ('test/lib/test_py4lo_sqlite3.py', 117, 'Sqlite3TestCase.test_index')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_open_r_missing_file>
          nextitem: <TestCaseFunction test_open_rw_missing_file>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_open_r_missing_file
            location: ('test/lib/test_py4lo_sqlite3.py', 75, 'Sqlite3TestCase.test_open_r_missing_file')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_open_r_missing_file>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_open_r_missing_file>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_open_r_missing_file' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_open_r_missing_file' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_open_r_missing_file' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_open_r_missing_file>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_open_r_missing_file>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_open_r_missing_file' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_open_r_missing_file' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_open_r_missing_file' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_open_r_missing_file>
            nextitem: <TestCaseFunction test_open_rw_missing_file>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_open_r_missing_file>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_open_r_missing_file' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_open_r_missing_file' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_open_r_missing_file' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_open_r_missing_file
            location: ('test/lib/test_py4lo_sqlite3.py', 75, 'Sqlite3TestCase.test_open_r_missing_file')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_open_rw_missing_file>
          nextitem: <TestCaseFunction test_sqlite3>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_open_rw_missing_file
            location: ('test/lib/test_py4lo_sqlite3.py', 70, 'Sqlite3TestCase.test_open_rw_missing_file')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_open_rw_missing_file>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_open_rw_missing_file>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_open_rw_missing_file' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_open_rw_missing_file' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_open_rw_missing_file' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_open_rw_missing_file>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_open_rw_missing_file>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_open_rw_missing_file' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_open_rw_missing_file' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_open_rw_missing_file' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_open_rw_missing_file>
            nextitem: <TestCaseFunction test_sqlite3>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_open_rw_missing_file>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_open_rw_missing_file' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_open_rw_missing_file' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_open_rw_missing_file' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_open_rw_missing_file
            location: ('test/lib/test_py4lo_sqlite3.py', 70, 'Sqlite3TestCase.test_open_rw_missing_file')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_sqlite3>
          nextitem: <TestCaseFunction test_branch>
        pytest_runtest_logstart [hook]
            nodeid: test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_sqlite3
            location: ('test/lib/test_py4lo_sqlite3.py', 19, 'Sqlite3TestCase.test_sqlite3')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_sqlite3>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_sqlite3>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_sqlite3' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_sqlite3' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_sqlite3' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_sqlite3>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_sqlite3>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_sqlite3' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_sqlite3' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_sqlite3' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_sqlite3>
            nextitem: <TestCaseFunction test_branch>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Sqlite3TestCase' scope='class' baseid='test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Sqlite3TestCase' for <TestCaseFunction test_sqlite3>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Sqlite3TestCase' scope='class' baseid='test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Sqlite3TestCase' for <TestCaseFunction test_open_rw_missing_file>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Sqlite3TestCase' scope='class' baseid='test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Sqlite3TestCase' for <TestCaseFunction test_open_r_missing_file>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Sqlite3TestCase' scope='class' baseid='test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Sqlite3TestCase' for <TestCaseFunction test_index>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Sqlite3TestCase' scope='class' baseid='test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Sqlite3TestCase' for <TestCaseFunction test_exec>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Sqlite3TestCase' scope='class' baseid='test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Sqlite3TestCase' for <TestCaseFunction test_busy>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_Sqlite3TestCase' scope='class' baseid='test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase'>
              request: <SubRequest 'unittest_setUpClass_fixture_Sqlite3TestCase' for <TestCaseFunction test_bindings>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_sqlite3>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_sqlite3' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_sqlite3' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_sqlite3' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/lib/test_py4lo_sqlite3.py::Sqlite3TestCase::test_sqlite3
            location: ('test/lib/test_py4lo_sqlite3.py', 19, 'Sqlite3TestCase.test_sqlite3')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_branch>
          nextitem: <TestCaseFunction test_closed>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/branch_processor_test.py::TestBranchProcessor::test_branch
            location: ('test/py4lo/branch_processor_test.py', 30, 'TestBranchProcessor.test_branch')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_branch>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestBranchProcessor' scope='class' baseid='test/py4lo/branch_processor_test.py::TestBranchProcessor'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestBranchProcessor' for <TestCaseFunction test_branch>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_branch>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_branch' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_branch' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_branch' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_branch>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_branch>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_branch' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_branch' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_branch' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_branch>
            nextitem: <TestCaseFunction test_closed>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_branch>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_branch' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_branch' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_branch' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/branch_processor_test.py::TestBranchProcessor::test_branch
            location: ('test/py4lo/branch_processor_test.py', 30, 'TestBranchProcessor.test_branch')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_closed>
          nextitem: <TestCaseFunction test_false_branch>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/branch_processor_test.py::TestBranchProcessor::test_closed
            location: ('test/py4lo/branch_processor_test.py', 58, 'TestBranchProcessor.test_closed')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_closed>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_closed>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_closed' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_closed' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_closed' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_closed>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_closed>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_closed' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_closed' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_closed' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_closed>
            nextitem: <TestCaseFunction test_false_branch>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_closed>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_closed' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_closed' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_closed' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/branch_processor_test.py::TestBranchProcessor::test_closed
            location: ('test/py4lo/branch_processor_test.py', 58, 'TestBranchProcessor.test_closed')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_false_branch>
          nextitem: <TestCaseFunction test_not_closed>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/branch_processor_test.py::TestBranchProcessor::test_false_branch
            location: ('test/py4lo/branch_processor_test.py', 27, 'TestBranchProcessor.test_false_branch')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_false_branch>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_false_branch>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_false_branch' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_false_branch' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_false_branch' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_false_branch>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_false_branch>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_false_branch' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_false_branch' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_false_branch' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_false_branch>
            nextitem: <TestCaseFunction test_not_closed>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_false_branch>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_false_branch' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_false_branch' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_false_branch' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/branch_processor_test.py::TestBranchProcessor::test_false_branch
            location: ('test/py4lo/branch_processor_test.py', 27, 'TestBranchProcessor.test_false_branch')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_not_closed>
          nextitem: <TestCaseFunction test_check_existing_var_but_number>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/branch_processor_test.py::TestBranchProcessor::test_not_closed
            location: ('test/py4lo/branch_processor_test.py', 53, 'TestBranchProcessor.test_not_closed')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_not_closed>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_not_closed>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_not_closed' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_not_closed' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_not_closed' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_not_closed>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_not_closed>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_not_closed' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_not_closed' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_not_closed' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_not_closed>
            nextitem: <TestCaseFunction test_check_existing_var_but_number>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestBranchProcessor' scope='class' baseid='test/py4lo/branch_processor_test.py::TestBranchProcessor'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestBranchProcessor' for <TestCaseFunction test_not_closed>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestBranchProcessor' scope='class' baseid='test/py4lo/branch_processor_test.py::TestBranchProcessor'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestBranchProcessor' for <TestCaseFunction test_false_branch>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestBranchProcessor' scope='class' baseid='test/py4lo/branch_processor_test.py::TestBranchProcessor'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestBranchProcessor' for <TestCaseFunction test_closed>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestBranchProcessor' scope='class' baseid='test/py4lo/branch_processor_test.py::TestBranchProcessor'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestBranchProcessor' for <TestCaseFunction test_branch>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_not_closed>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_not_closed' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_not_closed' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/branch_processor_test.py::TestBranchProcessor::test_not_closed' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/branch_processor_test.py::TestBranchProcessor::test_not_closed
            location: ('test/py4lo/branch_processor_test.py', 53, 'TestBranchProcessor.test_not_closed')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_check_existing_var_but_number>
          nextitem: <TestCaseFunction test_check_non_existing_var>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/comparator_test.py::TestComparator::test_check_existing_var_but_number
            location: ('test/py4lo/comparator_test.py', 50, 'TestComparator.test_check_existing_var_but_number')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_check_existing_var_but_number>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestComparator' scope='class' baseid='test/py4lo/comparator_test.py::TestComparator'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestComparator' for <TestCaseFunction test_check_existing_var_but_number>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_check_existing_var_but_number>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_check_existing_var_but_number' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_check_existing_var_but_number' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_check_existing_var_but_number' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_check_existing_var_but_number>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_check_existing_var_but_number>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_check_existing_var_but_number' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_check_existing_var_but_number' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_check_existing_var_but_number' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_check_existing_var_but_number>
            nextitem: <TestCaseFunction test_check_non_existing_var>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_check_existing_var_but_number>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_check_existing_var_but_number' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_check_existing_var_but_number' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_check_existing_var_but_number' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/comparator_test.py::TestComparator::test_check_existing_var_but_number
            location: ('test/py4lo/comparator_test.py', 50, 'TestComparator.test_check_existing_var_but_number')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_check_non_existing_var>
          nextitem: <TestCaseFunction test_check_numbers>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/comparator_test.py::TestComparator::test_check_non_existing_var
            location: ('test/py4lo/comparator_test.py', 44, 'TestComparator.test_check_non_existing_var')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_check_non_existing_var>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_check_non_existing_var>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_check_non_existing_var' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_check_non_existing_var' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_check_non_existing_var' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_check_non_existing_var>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_check_non_existing_var>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_check_non_existing_var' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_check_non_existing_var' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_check_non_existing_var' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_check_non_existing_var>
            nextitem: <TestCaseFunction test_check_numbers>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_check_non_existing_var>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_check_non_existing_var' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_check_non_existing_var' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_check_non_existing_var' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/comparator_test.py::TestComparator::test_check_non_existing_var
            location: ('test/py4lo/comparator_test.py', 44, 'TestComparator.test_check_non_existing_var')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_check_numbers>
          nextitem: <TestCaseFunction test_simple_check>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/comparator_test.py::TestComparator::test_check_numbers
            location: ('test/py4lo/comparator_test.py', 56, 'TestComparator.test_check_numbers')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_check_numbers>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_check_numbers>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_check_numbers' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_check_numbers' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_check_numbers' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_check_numbers>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_check_numbers>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_check_numbers' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_check_numbers' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_check_numbers' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_check_numbers>
            nextitem: <TestCaseFunction test_simple_check>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_check_numbers>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_check_numbers' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_check_numbers' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_check_numbers' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/comparator_test.py::TestComparator::test_check_numbers
            location: ('test/py4lo/comparator_test.py', 56, 'TestComparator.test_check_numbers')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_simple_check>
          nextitem: <TestCaseFunction test_append_script>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/comparator_test.py::TestComparator::test_simple_check
            location: ('test/py4lo/comparator_test.py', 23, 'TestComparator.test_simple_check')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_simple_check>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_simple_check>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_simple_check' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_simple_check' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_simple_check' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_simple_check>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_simple_check>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_simple_check' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_simple_check' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_simple_check' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_simple_check>
            nextitem: <TestCaseFunction test_append_script>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestComparator' scope='class' baseid='test/py4lo/comparator_test.py::TestComparator'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestComparator' for <TestCaseFunction test_simple_check>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestComparator' scope='class' baseid='test/py4lo/comparator_test.py::TestComparator'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestComparator' for <TestCaseFunction test_check_numbers>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestComparator' scope='class' baseid='test/py4lo/comparator_test.py::TestComparator'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestComparator' for <TestCaseFunction test_check_non_existing_var>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestComparator' scope='class' baseid='test/py4lo/comparator_test.py::TestComparator'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestComparator' for <TestCaseFunction test_check_existing_var_but_number>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_simple_check>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_simple_check' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_simple_check' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/comparator_test.py::TestComparator::test_simple_check' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/comparator_test.py::TestComparator::test_simple_check
            location: ('test/py4lo/comparator_test.py', 23, 'TestComparator.test_simple_check')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_append_script>
          nextitem: <TestCaseFunction test_create>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_append_script
            location: ('test/py4lo/directive_processor_test.py', 43, 'TestDirectiveProcessor.test_append_script')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_append_script>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestDirectiveProcessor' scope='class' baseid='test/py4lo/directive_processor_test.py::TestDirectiveProcessor'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestDirectiveProcessor' for <TestCaseFunction test_append_script>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_append_script>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_append_script' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_append_script' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_append_script' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_append_script>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_append_script>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_append_script' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_append_script' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_append_script' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_append_script>
            nextitem: <TestCaseFunction test_create>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_append_script>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_append_script' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_append_script' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_append_script' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_append_script
            location: ('test/py4lo/directive_processor_test.py', 43, 'TestDirectiveProcessor.test_append_script')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create>
          nextitem: <TestCaseFunction test_process_line_branch_directive>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_create
            location: ('test/py4lo/directive_processor_test.py', 38, 'TestDirectiveProcessor.test_create')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_create' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_create' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_create' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_create' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_create' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_create' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create>
            nextitem: <TestCaseFunction test_process_line_branch_directive>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_create' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_create' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_create' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_create
            location: ('test/py4lo/directive_processor_test.py', 38, 'TestDirectiveProcessor.test_create')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_process_line_branch_directive>
          nextitem: <TestCaseFunction test_process_line_comment>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_branch_directive
            location: ('test/py4lo/directive_processor_test.py', 87, 'TestDirectiveProcessor.test_process_line_branch_directive')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_process_line_branch_directive>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_process_line_branch_directive>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_branch_directive' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_branch_directive' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_branch_directive' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_process_line_branch_directive>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_process_line_branch_directive>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_branch_directive' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_branch_directive' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_branch_directive' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_process_line_branch_directive>
            nextitem: <TestCaseFunction test_process_line_comment>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_process_line_branch_directive>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_branch_directive' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_branch_directive' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_branch_directive' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_branch_directive
            location: ('test/py4lo/directive_processor_test.py', 87, 'TestDirectiveProcessor.test_process_line_branch_directive')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_process_line_comment>
          nextitem: <TestCaseFunction test_process_line_directive>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_comment
            location: ('test/py4lo/directive_processor_test.py', 53, 'TestDirectiveProcessor.test_process_line_comment')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_process_line_comment>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_process_line_comment>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_comment' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_comment' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_comment' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_process_line_comment>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_process_line_comment>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_comment' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_comment' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_comment' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_process_line_comment>
            nextitem: <TestCaseFunction test_process_line_directive>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_process_line_comment>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_comment' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_comment' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_comment' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_comment
            location: ('test/py4lo/directive_processor_test.py', 53, 'TestDirectiveProcessor.test_process_line_comment')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_process_line_directive>
          nextitem: <TestCaseFunction test_process_line_standard_directive>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_directive
            location: ('test/py4lo/directive_processor_test.py', 75, 'TestDirectiveProcessor.test_process_line_directive')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_process_line_directive>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_process_line_directive>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_directive' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_directive' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_directive' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_process_line_directive>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_process_line_directive>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_directive' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_directive' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_directive' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_process_line_directive>
            nextitem: <TestCaseFunction test_process_line_standard_directive>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_process_line_directive>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_directive' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_directive' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_directive' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_directive
            location: ('test/py4lo/directive_processor_test.py', 75, 'TestDirectiveProcessor.test_process_line_directive')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_process_line_standard_directive>
          nextitem: <TestCaseFunction test_process_line_write>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_standard_directive
            location: ('test/py4lo/directive_processor_test.py', 100, 'TestDirectiveProcessor.test_process_line_standard_directive')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_process_line_standard_directive>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_process_line_standard_directive>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_standard_directive' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_standard_directive' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_standard_directive' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_process_line_standard_directive>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_process_line_standard_directive>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_standard_directive' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_standard_directive' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_standard_directive' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_process_line_standard_directive>
            nextitem: <TestCaseFunction test_process_line_write>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_process_line_standard_directive>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_standard_directive' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_standard_directive' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_standard_directive' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_standard_directive
            location: ('test/py4lo/directive_processor_test.py', 100, 'TestDirectiveProcessor.test_process_line_standard_directive')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_process_line_write>
          nextitem: <TestCaseFunction test>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_write
            location: ('test/py4lo/directive_processor_test.py', 64, 'TestDirectiveProcessor.test_process_line_write')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_process_line_write>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_process_line_write>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_write' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_write' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_write' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_process_line_write>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_process_line_write>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_write' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_write' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_write' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_process_line_write>
            nextitem: <TestCaseFunction test>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestDirectiveProcessor' scope='class' baseid='test/py4lo/directive_processor_test.py::TestDirectiveProcessor'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestDirectiveProcessor' for <TestCaseFunction test_process_line_write>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestDirectiveProcessor' scope='class' baseid='test/py4lo/directive_processor_test.py::TestDirectiveProcessor'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestDirectiveProcessor' for <TestCaseFunction test_process_line_standard_directive>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestDirectiveProcessor' scope='class' baseid='test/py4lo/directive_processor_test.py::TestDirectiveProcessor'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestDirectiveProcessor' for <TestCaseFunction test_process_line_directive>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestDirectiveProcessor' scope='class' baseid='test/py4lo/directive_processor_test.py::TestDirectiveProcessor'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestDirectiveProcessor' for <TestCaseFunction test_process_line_comment>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestDirectiveProcessor' scope='class' baseid='test/py4lo/directive_processor_test.py::TestDirectiveProcessor'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestDirectiveProcessor' for <TestCaseFunction test_process_line_branch_directive>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestDirectiveProcessor' scope='class' baseid='test/py4lo/directive_processor_test.py::TestDirectiveProcessor'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestDirectiveProcessor' for <TestCaseFunction test_create>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestDirectiveProcessor' scope='class' baseid='test/py4lo/directive_processor_test.py::TestDirectiveProcessor'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestDirectiveProcessor' for <TestCaseFunction test_append_script>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_process_line_write>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_write' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_write' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_write' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/directive_processor_test.py::TestDirectiveProcessor::test_process_line_write
            location: ('test/py4lo/directive_processor_test.py', 64, 'TestDirectiveProcessor.test_process_line_write')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test>
          nextitem: <TestCaseFunction test_one_line_function>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/main_test.py::MainTest::test
            location: ('test/py4lo/main_test.py', 26, 'MainTest.test')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_MainTest' scope='class' baseid='test/py4lo/main_test.py::MainTest'>
              request: <SubRequest 'unittest_setUpClass_fixture_MainTest' for <TestCaseFunction test>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/main_test.py::MainTest::test' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/main_test.py::MainTest::test' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/main_test.py::MainTest::test' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/main_test.py::MainTest::test' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/main_test.py::MainTest::test' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/main_test.py::MainTest::test' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test>
            nextitem: <TestCaseFunction test_one_line_function>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_MainTest' scope='class' baseid='test/py4lo/main_test.py::MainTest'>
              request: <SubRequest 'unittest_setUpClass_fixture_MainTest' for <TestCaseFunction test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/main_test.py::MainTest::test' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/main_test.py::MainTest::test' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/main_test.py::MainTest::test' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/main_test.py::MainTest::test
            location: ('test/py4lo/main_test.py', 26, 'MainTest.test')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_one_line_function>
          nextitem: <TestCaseFunction test_one_public_function>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/script_parser_test.py::TestScriptParser::test_one_line_function
            location: ('test/py4lo/script_parser_test.py', 77, 'TestScriptParser.test_one_line_function')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_one_line_function>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestScriptParser' scope='class' baseid='test/py4lo/script_parser_test.py::TestScriptParser'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestScriptParser' for <TestCaseFunction test_one_line_function>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_one_line_function>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_one_line_function' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_one_line_function' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_one_line_function' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_one_line_function>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_one_line_function>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_one_line_function' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_one_line_function' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_one_line_function' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_one_line_function>
            nextitem: <TestCaseFunction test_one_public_function>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_one_line_function>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_one_line_function' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_one_line_function' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_one_line_function' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/script_parser_test.py::TestScriptParser::test_one_line_function
            location: ('test/py4lo/script_parser_test.py', 77, 'TestScriptParser.test_one_line_function')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_one_public_function>
          nextitem: <TestCaseFunction test_script_parser_directve_line>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/script_parser_test.py::TestScriptParser::test_one_public_function
            location: ('test/py4lo/script_parser_test.py', 89, 'TestScriptParser.test_one_public_function')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_one_public_function>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_one_public_function>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_one_public_function' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_one_public_function' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_one_public_function' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_one_public_function>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_one_public_function>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_one_public_function' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_one_public_function' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_one_public_function' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_one_public_function>
            nextitem: <TestCaseFunction test_script_parser_directve_line>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_one_public_function>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_one_public_function' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_one_public_function' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_one_public_function' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/script_parser_test.py::TestScriptParser::test_one_public_function
            location: ('test/py4lo/script_parser_test.py', 89, 'TestScriptParser.test_one_public_function')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_script_parser_directve_line>
          nextitem: <TestCaseFunction test_script_parser_normal_line_dont_ignore>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_directve_line
            location: ('test/py4lo/script_parser_test.py', 63, 'TestScriptParser.test_script_parser_directve_line')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_script_parser_directve_line>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_script_parser_directve_line>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_directve_line' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_directve_line' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_directve_line' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_script_parser_directve_line>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_script_parser_directve_line>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_directve_line' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_directve_line' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_directve_line' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_script_parser_directve_line>
            nextitem: <TestCaseFunction test_script_parser_normal_line_dont_ignore>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_script_parser_directve_line>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_directve_line' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_directve_line' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_directve_line' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_directve_line
            location: ('test/py4lo/script_parser_test.py', 63, 'TestScriptParser.test_script_parser_directve_line')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_script_parser_normal_line_dont_ignore>
          nextitem: <TestCaseFunction test_script_parser_normal_line_ignore>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_normal_line_dont_ignore
            location: ('test/py4lo/script_parser_test.py', 33, 'TestScriptParser.test_script_parser_normal_line_dont_ignore')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_script_parser_normal_line_dont_ignore>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_script_parser_normal_line_dont_ignore>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_normal_line_dont_ignore' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_normal_line_dont_ignore' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_normal_line_dont_ignore' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_script_parser_normal_line_dont_ignore>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_script_parser_normal_line_dont_ignore>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_normal_line_dont_ignore' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_normal_line_dont_ignore' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_normal_line_dont_ignore' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_script_parser_normal_line_dont_ignore>
            nextitem: <TestCaseFunction test_script_parser_normal_line_ignore>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_script_parser_normal_line_dont_ignore>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_normal_line_dont_ignore' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_normal_line_dont_ignore' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_normal_line_dont_ignore' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_normal_line_dont_ignore
            location: ('test/py4lo/script_parser_test.py', 33, 'TestScriptParser.test_script_parser_normal_line_dont_ignore')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_script_parser_normal_line_ignore>
          nextitem: <TestCaseFunction test>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_normal_line_ignore
            location: ('test/py4lo/script_parser_test.py', 50, 'TestScriptParser.test_script_parser_normal_line_ignore')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_script_parser_normal_line_ignore>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_script_parser_normal_line_ignore>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_normal_line_ignore' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_normal_line_ignore' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_normal_line_ignore' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_script_parser_normal_line_ignore>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_script_parser_normal_line_ignore>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_normal_line_ignore' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_normal_line_ignore' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_normal_line_ignore' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_script_parser_normal_line_ignore>
            nextitem: <TestCaseFunction test>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestScriptParser' scope='class' baseid='test/py4lo/script_parser_test.py::TestScriptParser'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestScriptParser' for <TestCaseFunction test_script_parser_normal_line_ignore>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestScriptParser' scope='class' baseid='test/py4lo/script_parser_test.py::TestScriptParser'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestScriptParser' for <TestCaseFunction test_script_parser_normal_line_dont_ignore>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestScriptParser' scope='class' baseid='test/py4lo/script_parser_test.py::TestScriptParser'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestScriptParser' for <TestCaseFunction test_script_parser_directve_line>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestScriptParser' scope='class' baseid='test/py4lo/script_parser_test.py::TestScriptParser'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestScriptParser' for <TestCaseFunction test_one_public_function>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestScriptParser' scope='class' baseid='test/py4lo/script_parser_test.py::TestScriptParser'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestScriptParser' for <TestCaseFunction test_one_line_function>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_script_parser_normal_line_ignore>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_normal_line_ignore' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_normal_line_ignore' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_normal_line_ignore' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/script_parser_test.py::TestScriptParser::test_script_parser_normal_line_ignore
            location: ('test/py4lo/script_parser_test.py', 50, 'TestScriptParser.test_script_parser_normal_line_ignore')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test>
          nextitem: <TestCaseFunction test_scripts_processor>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/script_processor_test.py::TestScriptsProcessor::test
            location: ('test/py4lo/script_processor_test.py', 29, 'TestScriptsProcessor.test')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestScriptsProcessor' scope='class' baseid='test/py4lo/script_processor_test.py::TestScriptsProcessor'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestScriptsProcessor' for <TestCaseFunction test>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/script_processor_test.py::TestScriptsProcessor::test' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/script_processor_test.py::TestScriptsProcessor::test' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/script_processor_test.py::TestScriptsProcessor::test' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/script_processor_test.py::TestScriptsProcessor::test' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/script_processor_test.py::TestScriptsProcessor::test' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/script_processor_test.py::TestScriptsProcessor::test' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test>
            nextitem: <TestCaseFunction test_scripts_processor>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestScriptsProcessor' scope='class' baseid='test/py4lo/script_processor_test.py::TestScriptsProcessor'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestScriptsProcessor' for <TestCaseFunction test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/script_processor_test.py::TestScriptsProcessor::test' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/script_processor_test.py::TestScriptsProcessor::test' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/script_processor_test.py::TestScriptsProcessor::test' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/script_processor_test.py::TestScriptsProcessor::test
            location: ('test/py4lo/script_processor_test.py', 29, 'TestScriptsProcessor.test')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_scripts_processor>
          nextitem: <TestCaseFunction test_exception>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/script_set_processor_test.py::TestScriptSetProcessor::test_scripts_processor
            location: ('test/py4lo/script_set_processor_test.py', 33, 'TestScriptSetProcessor.test_scripts_processor')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_scripts_processor>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestScriptSetProcessor' scope='class' baseid='test/py4lo/script_set_processor_test.py::TestScriptSetProcessor'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestScriptSetProcessor' for <TestCaseFunction test_scripts_processor>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_scripts_processor>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/script_set_processor_test.py::TestScriptSetProcessor::test_scripts_processor' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/script_set_processor_test.py::TestScriptSetProcessor::test_scripts_processor' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/script_set_processor_test.py::TestScriptSetProcessor::test_scripts_processor' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_scripts_processor>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_scripts_processor>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/script_set_processor_test.py::TestScriptSetProcessor::test_scripts_processor' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/script_set_processor_test.py::TestScriptSetProcessor::test_scripts_processor' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/script_set_processor_test.py::TestScriptSetProcessor::test_scripts_processor' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_scripts_processor>
            nextitem: <TestCaseFunction test_exception>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestScriptSetProcessor' scope='class' baseid='test/py4lo/script_set_processor_test.py::TestScriptSetProcessor'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestScriptSetProcessor' for <TestCaseFunction test_scripts_processor>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_scripts_processor>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/script_set_processor_test.py::TestScriptSetProcessor::test_scripts_processor' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/script_set_processor_test.py::TestScriptSetProcessor::test_scripts_processor' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/script_set_processor_test.py::TestScriptSetProcessor::test_scripts_processor' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/script_set_processor_test.py::TestScriptSetProcessor::test_scripts_processor
            location: ('test/py4lo/script_set_processor_test.py', 33, 'TestScriptSetProcessor.test_scripts_processor')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_exception>
          nextitem: <TestCaseFunction test_load_toml>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/toml_helper_test.py::TestTomlHelper::test_exception
            location: ('test/py4lo/toml_helper_test.py', 74, 'TestTomlHelper.test_exception')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_exception>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestTomlHelper' scope='class' baseid='test/py4lo/toml_helper_test.py::TestTomlHelper'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestTomlHelper' for <TestCaseFunction test_exception>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_exception>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_exception' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_exception' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_exception' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_exception>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_exception>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_exception' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_exception' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_exception' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_exception>
            nextitem: <TestCaseFunction test_load_toml>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_exception>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_exception' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_exception' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_exception' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/toml_helper_test.py::TestTomlHelper::test_exception
            location: ('test/py4lo/toml_helper_test.py', 74, 'TestTomlHelper.test_exception')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_load_toml>
          nextitem: <TestCaseFunction test_load_toml_python_exe>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/toml_helper_test.py::TestTomlHelper::test_load_toml
            location: ('test/py4lo/toml_helper_test.py', 44, 'TestTomlHelper.test_load_toml')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_load_toml>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_load_toml>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_load_toml' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_load_toml' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_load_toml' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_load_toml>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_load_toml>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_load_toml' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_load_toml' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_load_toml' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_load_toml>
            nextitem: <TestCaseFunction test_load_toml_python_exe>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_load_toml>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_load_toml' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_load_toml' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_load_toml' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/toml_helper_test.py::TestTomlHelper::test_load_toml
            location: ('test/py4lo/toml_helper_test.py', 44, 'TestTomlHelper.test_load_toml')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_load_toml_python_exe>
          nextitem: <TestCaseFunction test_loader>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/toml_helper_test.py::TestTomlHelper::test_load_toml_python_exe
            location: ('test/py4lo/toml_helper_test.py', 59, 'TestTomlHelper.test_load_toml_python_exe')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_load_toml_python_exe>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_load_toml_python_exe>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_load_toml_python_exe' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_load_toml_python_exe' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_load_toml_python_exe' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_load_toml_python_exe>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_load_toml_python_exe>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_load_toml_python_exe' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_load_toml_python_exe' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_load_toml_python_exe' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_load_toml_python_exe>
            nextitem: <TestCaseFunction test_loader>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_load_toml_python_exe>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_load_toml_python_exe' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_load_toml_python_exe' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_load_toml_python_exe' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/toml_helper_test.py::TestTomlHelper::test_load_toml_python_exe
            location: ('test/py4lo/toml_helper_test.py', 59, 'TestTomlHelper.test_load_toml_python_exe')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_loader>
          nextitem: <TestCaseFunction test_merge>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/toml_helper_test.py::TestTomlHelper::test_loader
            location: ('test/py4lo/toml_helper_test.py', 29, 'TestTomlHelper.test_loader')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_loader>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_loader>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_loader' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_loader' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_loader' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_loader>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_loader>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_loader' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_loader' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_loader' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_loader>
            nextitem: <TestCaseFunction test_merge>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestTomlHelper' scope='class' baseid='test/py4lo/toml_helper_test.py::TestTomlHelper'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestTomlHelper' for <TestCaseFunction test_loader>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestTomlHelper' scope='class' baseid='test/py4lo/toml_helper_test.py::TestTomlHelper'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestTomlHelper' for <TestCaseFunction test_load_toml_python_exe>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestTomlHelper' scope='class' baseid='test/py4lo/toml_helper_test.py::TestTomlHelper'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestTomlHelper' for <TestCaseFunction test_load_toml>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestTomlHelper' scope='class' baseid='test/py4lo/toml_helper_test.py::TestTomlHelper'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestTomlHelper' for <TestCaseFunction test_exception>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_loader>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_loader' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_loader' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/toml_helper_test.py::TestTomlHelper::test_loader' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/toml_helper_test.py::TestTomlHelper::test_loader
            location: ('test/py4lo/toml_helper_test.py', 29, 'TestTomlHelper.test_loader')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_merge>
          nextitem: <TestCaseFunction test_open_with_calc>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/tools_test.py::TestTools::test_merge
            location: ('test/py4lo/tools_test.py', 31, 'TestTools.test_merge')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_merge>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestTools' scope='class' baseid='test/py4lo/tools_test.py::TestTools'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestTools' for <TestCaseFunction test_merge>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_merge>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/tools_test.py::TestTools::test_merge' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/tools_test.py::TestTools::test_merge' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/tools_test.py::TestTools::test_merge' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_merge>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_merge>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/tools_test.py::TestTools::test_merge' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/tools_test.py::TestTools::test_merge' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/tools_test.py::TestTools::test_merge' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_merge>
            nextitem: <TestCaseFunction test_open_with_calc>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_merge>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/tools_test.py::TestTools::test_merge' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/tools_test.py::TestTools::test_merge' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/tools_test.py::TestTools::test_merge' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/tools_test.py::TestTools::test_merge
            location: ('test/py4lo/tools_test.py', 31, 'TestTools.test_merge')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_open_with_calc>
          nextitem: <TestCaseFunction test>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/tools_test.py::TestTools::test_open_with_calc
            location: ('test/py4lo/tools_test.py', 25, 'TestTools.test_open_with_calc')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_open_with_calc>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_open_with_calc>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/tools_test.py::TestTools::test_open_with_calc' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/tools_test.py::TestTools::test_open_with_calc' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/tools_test.py::TestTools::test_open_with_calc' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_open_with_calc>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_open_with_calc>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/tools_test.py::TestTools::test_open_with_calc' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/tools_test.py::TestTools::test_open_with_calc' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/tools_test.py::TestTools::test_open_with_calc' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_open_with_calc>
            nextitem: <TestCaseFunction test>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestTools' scope='class' baseid='test/py4lo/tools_test.py::TestTools'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestTools' for <TestCaseFunction test_open_with_calc>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestTools' scope='class' baseid='test/py4lo/tools_test.py::TestTools'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestTools' for <TestCaseFunction test_merge>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_open_with_calc>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/tools_test.py::TestTools::test_open_with_calc' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/tools_test.py::TestTools::test_open_with_calc' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/tools_test.py::TestTools::test_open_with_calc' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/tools_test.py::TestTools::test_open_with_calc
            location: ('test/py4lo/tools_test.py', 25, 'TestTools.test_open_with_calc')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test>
          nextitem: <TestCaseFunction test_empty>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/zip_updater_test.py::TestZipUpdater::test
            location: ('test/py4lo/zip_updater_test.py', 25, 'TestZipUpdater.test')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestZipUpdater' scope='class' baseid='test/py4lo/zip_updater_test.py::TestZipUpdater'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestZipUpdater' for <TestCaseFunction test>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/zip_updater_test.py::TestZipUpdater::test' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/zip_updater_test.py::TestZipUpdater::test' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/zip_updater_test.py::TestZipUpdater::test' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/zip_updater_test.py::TestZipUpdater::test' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/zip_updater_test.py::TestZipUpdater::test' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/zip_updater_test.py::TestZipUpdater::test' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test>
            nextitem: <TestCaseFunction test_empty>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestZipUpdater' scope='class' baseid='test/py4lo/zip_updater_test.py::TestZipUpdater'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestZipUpdater' for <TestCaseFunction test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/zip_updater_test.py::TestZipUpdater::test' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/zip_updater_test.py::TestZipUpdater::test' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/zip_updater_test.py::TestZipUpdater::test' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/zip_updater_test.py::TestZipUpdater::test
            location: ('test/py4lo/zip_updater_test.py', 25, 'TestZipUpdater.test')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_empty>
          nextitem: <TestCaseFunction test_add_debug_content_empty>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/callbacks/add_assets_test.py::AddAssetsTest::test_empty
            location: ('test/py4lo/callbacks/add_assets_test.py', 34, 'AddAssetsTest.test_empty')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_empty>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_AddAssetsTest' scope='class' baseid='test/py4lo/callbacks/add_assets_test.py::AddAssetsTest'>
              request: <SubRequest 'unittest_setUpClass_fixture_AddAssetsTest' for <TestCaseFunction test_empty>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_empty>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/add_assets_test.py::AddAssetsTest::test_empty' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/add_assets_test.py::AddAssetsTest::test_empty' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/add_assets_test.py::AddAssetsTest::test_empty' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_empty>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_empty>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/add_assets_test.py::AddAssetsTest::test_empty' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/add_assets_test.py::AddAssetsTest::test_empty' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/add_assets_test.py::AddAssetsTest::test_empty' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_empty>
            nextitem: <TestCaseFunction test_add_debug_content_empty>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_AddAssetsTest' scope='class' baseid='test/py4lo/callbacks/add_assets_test.py::AddAssetsTest'>
              request: <SubRequest 'unittest_setUpClass_fixture_AddAssetsTest' for <TestCaseFunction test_empty>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_empty>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/add_assets_test.py::AddAssetsTest::test_empty' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/add_assets_test.py::AddAssetsTest::test_empty' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/add_assets_test.py::AddAssetsTest::test_empty' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/callbacks/add_assets_test.py::AddAssetsTest::test_empty
            location: ('test/py4lo/callbacks/add_assets_test.py', 34, 'AddAssetsTest.test_empty')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_add_debug_content_empty>
          nextitem: <TestCaseFunction test_add_debug_content_many_scripts>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_empty
            location: ('test/py4lo/callbacks/add_debug_content_test.py', 34, 'TestAddDebugContent.test_add_debug_content_empty')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_add_debug_content_empty>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestAddDebugContent' scope='class' baseid='test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestAddDebugContent' for <TestCaseFunction test_add_debug_content_empty>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_add_debug_content_empty>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_empty' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_empty' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_empty' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_add_debug_content_empty>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_add_debug_content_empty>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_empty' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_empty' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_empty' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_add_debug_content_empty>
            nextitem: <TestCaseFunction test_add_debug_content_many_scripts>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_add_debug_content_empty>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_empty' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_empty' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_empty' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_empty
            location: ('test/py4lo/callbacks/add_debug_content_test.py', 34, 'TestAddDebugContent.test_add_debug_content_empty')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_add_debug_content_many_scripts>
          nextitem: <TestCaseFunction test_add_debug_content_one_empty_script>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_many_scripts
            location: ('test/py4lo/callbacks/add_debug_content_test.py', 63, 'TestAddDebugContent.test_add_debug_content_many_scripts')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_add_debug_content_many_scripts>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_add_debug_content_many_scripts>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_many_scripts' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_many_scripts' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_many_scripts' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_add_debug_content_many_scripts>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_add_debug_content_many_scripts>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_many_scripts' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_many_scripts' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_many_scripts' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_add_debug_content_many_scripts>
            nextitem: <TestCaseFunction test_add_debug_content_one_empty_script>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_add_debug_content_many_scripts>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_many_scripts' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_many_scripts' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_many_scripts' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_many_scripts
            location: ('test/py4lo/callbacks/add_debug_content_test.py', 63, 'TestAddDebugContent.test_add_debug_content_many_scripts')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_add_debug_content_one_empty_script>
          nextitem: <TestCaseFunction test_add_debug_content_one_scripts_one_func>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_one_empty_script
            location: ('test/py4lo/callbacks/add_debug_content_test.py', 41, 'TestAddDebugContent.test_add_debug_content_one_empty_script')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_add_debug_content_one_empty_script>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_add_debug_content_one_empty_script>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_one_empty_script' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_one_empty_script' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_one_empty_script' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_add_debug_content_one_empty_script>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_add_debug_content_one_empty_script>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_one_empty_script' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_one_empty_script' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_one_empty_script' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_add_debug_content_one_empty_script>
            nextitem: <TestCaseFunction test_add_debug_content_one_scripts_one_func>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_add_debug_content_one_empty_script>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_one_empty_script' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_one_empty_script' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_one_empty_script' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_one_empty_script
            location: ('test/py4lo/callbacks/add_debug_content_test.py', 41, 'TestAddDebugContent.test_add_debug_content_one_empty_script')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_add_debug_content_one_scripts_one_func>
          nextitem: <TestCaseFunction test_add_debug_content_two_empty_scripts>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_one_scripts_one_func
            location: ('test/py4lo/callbacks/add_debug_content_test.py', 55, 'TestAddDebugContent.test_add_debug_content_one_scripts_one_func')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_add_debug_content_one_scripts_one_func>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_add_debug_content_one_scripts_one_func>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_one_scripts_one_func' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_one_scripts_one_func' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_one_scripts_one_func' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_add_debug_content_one_scripts_one_func>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_add_debug_content_one_scripts_one_func>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_one_scripts_one_func' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_one_scripts_one_func' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_one_scripts_one_func' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_add_debug_content_one_scripts_one_func>
            nextitem: <TestCaseFunction test_add_debug_content_two_empty_scripts>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_add_debug_content_one_scripts_one_func>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_one_scripts_one_func' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_one_scripts_one_func' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_one_scripts_one_func' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_one_scripts_one_func
            location: ('test/py4lo/callbacks/add_debug_content_test.py', 55, 'TestAddDebugContent.test_add_debug_content_one_scripts_one_func')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_add_debug_content_two_empty_scripts>
          nextitem: <TestCaseFunction test_add_readme_with>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_two_empty_scripts
            location: ('test/py4lo/callbacks/add_debug_content_test.py', 48, 'TestAddDebugContent.test_add_debug_content_two_empty_scripts')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_add_debug_content_two_empty_scripts>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_add_debug_content_two_empty_scripts>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_two_empty_scripts' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_two_empty_scripts' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_two_empty_scripts' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_add_debug_content_two_empty_scripts>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_add_debug_content_two_empty_scripts>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_two_empty_scripts' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_two_empty_scripts' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_two_empty_scripts' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_add_debug_content_two_empty_scripts>
            nextitem: <TestCaseFunction test_add_readme_with>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestAddDebugContent' scope='class' baseid='test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestAddDebugContent' for <TestCaseFunction test_add_debug_content_two_empty_scripts>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestAddDebugContent' scope='class' baseid='test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestAddDebugContent' for <TestCaseFunction test_add_debug_content_one_scripts_one_func>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestAddDebugContent' scope='class' baseid='test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestAddDebugContent' for <TestCaseFunction test_add_debug_content_one_empty_script>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestAddDebugContent' scope='class' baseid='test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestAddDebugContent' for <TestCaseFunction test_add_debug_content_many_scripts>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestAddDebugContent' scope='class' baseid='test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestAddDebugContent' for <TestCaseFunction test_add_debug_content_empty>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_add_debug_content_two_empty_scripts>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_two_empty_scripts' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_two_empty_scripts' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_two_empty_scripts' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/callbacks/add_debug_content_test.py::TestAddDebugContent::test_add_debug_content_two_empty_scripts
            location: ('test/py4lo/callbacks/add_debug_content_test.py', 48, 'TestAddDebugContent.test_add_debug_content_two_empty_scripts')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_add_readme_with>
          nextitem: <TestCaseFunction test_add_two_scripts>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/callbacks/add_readme_with_test.py::TestAddReadmeWith::test_add_readme_with
            location: ('test/py4lo/callbacks/add_readme_with_test.py', 28, 'TestAddReadmeWith.test_add_readme_with')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_add_readme_with>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestAddReadmeWith' scope='class' baseid='test/py4lo/callbacks/add_readme_with_test.py::TestAddReadmeWith'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestAddReadmeWith' for <TestCaseFunction test_add_readme_with>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_add_readme_with>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/add_readme_with_test.py::TestAddReadmeWith::test_add_readme_with' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/add_readme_with_test.py::TestAddReadmeWith::test_add_readme_with' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/add_readme_with_test.py::TestAddReadmeWith::test_add_readme_with' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_add_readme_with>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_add_readme_with>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/add_readme_with_test.py::TestAddReadmeWith::test_add_readme_with' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/add_readme_with_test.py::TestAddReadmeWith::test_add_readme_with' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/add_readme_with_test.py::TestAddReadmeWith::test_add_readme_with' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_add_readme_with>
            nextitem: <TestCaseFunction test_add_two_scripts>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestAddReadmeWith' scope='class' baseid='test/py4lo/callbacks/add_readme_with_test.py::TestAddReadmeWith'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestAddReadmeWith' for <TestCaseFunction test_add_readme_with>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_add_readme_with>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/add_readme_with_test.py::TestAddReadmeWith::test_add_readme_with' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/add_readme_with_test.py::TestAddReadmeWith::test_add_readme_with' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/add_readme_with_test.py::TestAddReadmeWith::test_add_readme_with' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/callbacks/add_readme_with_test.py::TestAddReadmeWith::test_add_readme_with
            location: ('test/py4lo/callbacks/add_readme_with_test.py', 28, 'TestAddReadmeWith.test_add_readme_with')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_add_two_scripts>
          nextitem: <TestCaseFunction test_dont_ignore>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/callbacks/add_scripts_test.py::TestAddScripts::test_add_two_scripts
            location: ('test/py4lo/callbacks/add_scripts_test.py', 28, 'TestAddScripts.test_add_two_scripts')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_add_two_scripts>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestAddScripts' scope='class' baseid='test/py4lo/callbacks/add_scripts_test.py::TestAddScripts'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestAddScripts' for <TestCaseFunction test_add_two_scripts>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_add_two_scripts>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/add_scripts_test.py::TestAddScripts::test_add_two_scripts' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/add_scripts_test.py::TestAddScripts::test_add_two_scripts' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/add_scripts_test.py::TestAddScripts::test_add_two_scripts' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_add_two_scripts>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_add_two_scripts>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/add_scripts_test.py::TestAddScripts::test_add_two_scripts' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/add_scripts_test.py::TestAddScripts::test_add_two_scripts' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/add_scripts_test.py::TestAddScripts::test_add_two_scripts' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_add_two_scripts>
            nextitem: <TestCaseFunction test_dont_ignore>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestAddScripts' scope='class' baseid='test/py4lo/callbacks/add_scripts_test.py::TestAddScripts'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestAddScripts' for <TestCaseFunction test_add_two_scripts>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_add_two_scripts>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/add_scripts_test.py::TestAddScripts::test_add_two_scripts' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/add_scripts_test.py::TestAddScripts::test_add_two_scripts' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/add_scripts_test.py::TestAddScripts::test_add_two_scripts' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/callbacks/add_scripts_test.py::TestAddScripts::test_add_two_scripts
            location: ('test/py4lo/callbacks/add_scripts_test.py', 28, 'TestAddScripts.test_add_two_scripts')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_dont_ignore>
          nextitem: <TestCaseFunction test_ignore>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/callbacks/ignore_item_test.py::TestIgnoreScripts::test_dont_ignore
            location: ('test/py4lo/callbacks/ignore_item_test.py', 39, 'TestIgnoreScripts.test_dont_ignore')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_dont_ignore>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestIgnoreScripts' scope='class' baseid='test/py4lo/callbacks/ignore_item_test.py::TestIgnoreScripts'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestIgnoreScripts' for <TestCaseFunction test_dont_ignore>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_dont_ignore>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/ignore_item_test.py::TestIgnoreScripts::test_dont_ignore' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/ignore_item_test.py::TestIgnoreScripts::test_dont_ignore' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/ignore_item_test.py::TestIgnoreScripts::test_dont_ignore' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_dont_ignore>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_dont_ignore>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/ignore_item_test.py::TestIgnoreScripts::test_dont_ignore' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/ignore_item_test.py::TestIgnoreScripts::test_dont_ignore' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/ignore_item_test.py::TestIgnoreScripts::test_dont_ignore' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_dont_ignore>
            nextitem: <TestCaseFunction test_ignore>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_dont_ignore>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/ignore_item_test.py::TestIgnoreScripts::test_dont_ignore' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/ignore_item_test.py::TestIgnoreScripts::test_dont_ignore' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/ignore_item_test.py::TestIgnoreScripts::test_dont_ignore' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/callbacks/ignore_item_test.py::TestIgnoreScripts::test_dont_ignore
            location: ('test/py4lo/callbacks/ignore_item_test.py', 39, 'TestIgnoreScripts.test_dont_ignore')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_ignore>
          nextitem: <TestCaseFunction test_rewrite_manifest_empty>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/callbacks/ignore_item_test.py::TestIgnoreScripts::test_ignore
            location: ('test/py4lo/callbacks/ignore_item_test.py', 30, 'TestIgnoreScripts.test_ignore')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_ignore>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_ignore>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/ignore_item_test.py::TestIgnoreScripts::test_ignore' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/ignore_item_test.py::TestIgnoreScripts::test_ignore' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/ignore_item_test.py::TestIgnoreScripts::test_ignore' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_ignore>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_ignore>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/ignore_item_test.py::TestIgnoreScripts::test_ignore' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/ignore_item_test.py::TestIgnoreScripts::test_ignore' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/ignore_item_test.py::TestIgnoreScripts::test_ignore' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_ignore>
            nextitem: <TestCaseFunction test_rewrite_manifest_empty>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestIgnoreScripts' scope='class' baseid='test/py4lo/callbacks/ignore_item_test.py::TestIgnoreScripts'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestIgnoreScripts' for <TestCaseFunction test_ignore>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestIgnoreScripts' scope='class' baseid='test/py4lo/callbacks/ignore_item_test.py::TestIgnoreScripts'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestIgnoreScripts' for <TestCaseFunction test_dont_ignore>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_ignore>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/ignore_item_test.py::TestIgnoreScripts::test_ignore' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/ignore_item_test.py::TestIgnoreScripts::test_ignore' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/ignore_item_test.py::TestIgnoreScripts::test_ignore' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/callbacks/ignore_item_test.py::TestIgnoreScripts::test_ignore
            location: ('test/py4lo/callbacks/ignore_item_test.py', 30, 'TestIgnoreScripts.test_ignore')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_rewrite_manifest_empty>
          nextitem: <TestCaseFunction test_rewrite_manifest_one_script>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/callbacks/rewrite_manifest_test.py::TestRewriteManifest::test_rewrite_manifest_empty
            location: ('test/py4lo/callbacks/rewrite_manifest_test.py', 40, 'TestRewriteManifest.test_rewrite_manifest_empty')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_rewrite_manifest_empty>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestRewriteManifest' scope='class' baseid='test/py4lo/callbacks/rewrite_manifest_test.py::TestRewriteManifest'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestRewriteManifest' for <TestCaseFunction test_rewrite_manifest_empty>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_rewrite_manifest_empty>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/rewrite_manifest_test.py::TestRewriteManifest::test_rewrite_manifest_empty' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/rewrite_manifest_test.py::TestRewriteManifest::test_rewrite_manifest_empty' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/rewrite_manifest_test.py::TestRewriteManifest::test_rewrite_manifest_empty' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_rewrite_manifest_empty>
        early skip of rewriting module: xml.dom.expatbuilder [assertion]
        early skip of rewriting module: xml.parsers [assertion]
        early skip of rewriting module: xml.parsers.expat [assertion]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_rewrite_manifest_empty>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/rewrite_manifest_test.py::TestRewriteManifest::test_rewrite_manifest_empty' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/rewrite_manifest_test.py::TestRewriteManifest::test_rewrite_manifest_empty' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/rewrite_manifest_test.py::TestRewriteManifest::test_rewrite_manifest_empty' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_rewrite_manifest_empty>
            nextitem: <TestCaseFunction test_rewrite_manifest_one_script>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_rewrite_manifest_empty>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/rewrite_manifest_test.py::TestRewriteManifest::test_rewrite_manifest_empty' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/rewrite_manifest_test.py::TestRewriteManifest::test_rewrite_manifest_empty' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/rewrite_manifest_test.py::TestRewriteManifest::test_rewrite_manifest_empty' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/callbacks/rewrite_manifest_test.py::TestRewriteManifest::test_rewrite_manifest_empty
            location: ('test/py4lo/callbacks/rewrite_manifest_test.py', 40, 'TestRewriteManifest.test_rewrite_manifest_empty')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_rewrite_manifest_one_script>
          nextitem: <TestCaseFunction test_with_previous>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/callbacks/rewrite_manifest_test.py::TestRewriteManifest::test_rewrite_manifest_one_script
            location: ('test/py4lo/callbacks/rewrite_manifest_test.py', 60, 'TestRewriteManifest.test_rewrite_manifest_one_script')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_rewrite_manifest_one_script>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_rewrite_manifest_one_script>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/rewrite_manifest_test.py::TestRewriteManifest::test_rewrite_manifest_one_script' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/rewrite_manifest_test.py::TestRewriteManifest::test_rewrite_manifest_one_script' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/rewrite_manifest_test.py::TestRewriteManifest::test_rewrite_manifest_one_script' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_rewrite_manifest_one_script>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_rewrite_manifest_one_script>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/rewrite_manifest_test.py::TestRewriteManifest::test_rewrite_manifest_one_script' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/rewrite_manifest_test.py::TestRewriteManifest::test_rewrite_manifest_one_script' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/rewrite_manifest_test.py::TestRewriteManifest::test_rewrite_manifest_one_script' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_rewrite_manifest_one_script>
            nextitem: <TestCaseFunction test_with_previous>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestRewriteManifest' scope='class' baseid='test/py4lo/callbacks/rewrite_manifest_test.py::TestRewriteManifest'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestRewriteManifest' for <TestCaseFunction test_rewrite_manifest_one_script>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestRewriteManifest' scope='class' baseid='test/py4lo/callbacks/rewrite_manifest_test.py::TestRewriteManifest'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestRewriteManifest' for <TestCaseFunction test_rewrite_manifest_empty>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_rewrite_manifest_one_script>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/callbacks/rewrite_manifest_test.py::TestRewriteManifest::test_rewrite_manifest_one_script' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/callbacks/rewrite_manifest_test.py::TestRewriteManifest::test_rewrite_manifest_one_script' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/callbacks/rewrite_manifest_test.py::TestRewriteManifest::test_rewrite_manifest_one_script' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/callbacks/rewrite_manifest_test.py::TestRewriteManifest::test_rewrite_manifest_one_script
            location: ('test/py4lo/callbacks/rewrite_manifest_test.py', 60, 'TestRewriteManifest.test_rewrite_manifest_one_script')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_with_previous>
          nextitem: <TestCaseFunction test_without_previous>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/commands/command_executor_test.py::TestCommandExecutor::test_with_previous
            location: ('test/py4lo/commands/command_executor_test.py', 36, 'TestCommandExecutor.test_with_previous')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_with_previous>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestCommandExecutor' scope='class' baseid='test/py4lo/commands/command_executor_test.py::TestCommandExecutor'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestCommandExecutor' for <TestCaseFunction test_with_previous>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_with_previous>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/command_executor_test.py::TestCommandExecutor::test_with_previous' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/command_executor_test.py::TestCommandExecutor::test_with_previous' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/command_executor_test.py::TestCommandExecutor::test_with_previous' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_with_previous>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_with_previous>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/command_executor_test.py::TestCommandExecutor::test_with_previous' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/command_executor_test.py::TestCommandExecutor::test_with_previous' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/command_executor_test.py::TestCommandExecutor::test_with_previous' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_with_previous>
            nextitem: <TestCaseFunction test_without_previous>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_with_previous>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/command_executor_test.py::TestCommandExecutor::test_with_previous' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/command_executor_test.py::TestCommandExecutor::test_with_previous' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/command_executor_test.py::TestCommandExecutor::test_with_previous' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/commands/command_executor_test.py::TestCommandExecutor::test_with_previous
            location: ('test/py4lo/commands/command_executor_test.py', 36, 'TestCommandExecutor.test_with_previous')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_without_previous>
          nextitem: <TestCaseFunction test>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/commands/command_executor_test.py::TestCommandExecutor::test_without_previous
            location: ('test/py4lo/commands/command_executor_test.py', 31, 'TestCommandExecutor.test_without_previous')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_without_previous>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_without_previous>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/command_executor_test.py::TestCommandExecutor::test_without_previous' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/command_executor_test.py::TestCommandExecutor::test_without_previous' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/command_executor_test.py::TestCommandExecutor::test_without_previous' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_without_previous>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_without_previous>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/command_executor_test.py::TestCommandExecutor::test_without_previous' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/command_executor_test.py::TestCommandExecutor::test_without_previous' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/command_executor_test.py::TestCommandExecutor::test_without_previous' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_without_previous>
            nextitem: <TestCaseFunction test>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestCommandExecutor' scope='class' baseid='test/py4lo/commands/command_executor_test.py::TestCommandExecutor'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestCommandExecutor' for <TestCaseFunction test_without_previous>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestCommandExecutor' scope='class' baseid='test/py4lo/commands/command_executor_test.py::TestCommandExecutor'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestCommandExecutor' for <TestCaseFunction test_with_previous>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_without_previous>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/command_executor_test.py::TestCommandExecutor::test_without_previous' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/command_executor_test.py::TestCommandExecutor::test_without_previous' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/command_executor_test.py::TestCommandExecutor::test_without_previous' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/commands/command_executor_test.py::TestCommandExecutor::test_without_previous
            location: ('test/py4lo/commands/command_executor_test.py', 31, 'TestCommandExecutor.test_without_previous')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test>
          nextitem: <TestCaseFunction test_help>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/commands/commands_test.py::TestCommands::test
            location: ('test/py4lo/commands/commands_test.py', 28, 'TestCommands.test')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestCommands' scope='class' baseid='test/py4lo/commands/commands_test.py::TestCommands'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestCommands' for <TestCaseFunction test>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/commands_test.py::TestCommands::test' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/commands_test.py::TestCommands::test' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/commands_test.py::TestCommands::test' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/commands_test.py::TestCommands::test' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/commands_test.py::TestCommands::test' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/commands_test.py::TestCommands::test' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test>
            nextitem: <TestCaseFunction test_help>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/commands_test.py::TestCommands::test' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/commands_test.py::TestCommands::test' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/commands_test.py::TestCommands::test' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/commands/commands_test.py::TestCommands::test
            location: ('test/py4lo/commands/commands_test.py', 28, 'TestCommands.test')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_help>
          nextitem: <TestCaseFunction test_non_existing>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/commands/commands_test.py::TestCommands::test_help
            location: ('test/py4lo/commands/commands_test.py', 36, 'TestCommands.test_help')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_help>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_help>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/commands_test.py::TestCommands::test_help' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/commands_test.py::TestCommands::test_help' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/commands_test.py::TestCommands::test_help' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_help>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_help>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/commands_test.py::TestCommands::test_help' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/commands_test.py::TestCommands::test_help' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/commands_test.py::TestCommands::test_help' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_help>
            nextitem: <TestCaseFunction test_non_existing>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_help>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/commands_test.py::TestCommands::test_help' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/commands_test.py::TestCommands::test_help' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/commands_test.py::TestCommands::test_help' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/commands/commands_test.py::TestCommands::test_help
            location: ('test/py4lo/commands/commands_test.py', 36, 'TestCommands.test_help')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_non_existing>
          nextitem: <TestCaseFunction test>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/commands/commands_test.py::TestCommands::test_non_existing
            location: ('test/py4lo/commands/commands_test.py', 32, 'TestCommands.test_non_existing')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_non_existing>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_non_existing>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/commands_test.py::TestCommands::test_non_existing' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/commands_test.py::TestCommands::test_non_existing' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/commands_test.py::TestCommands::test_non_existing' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_non_existing>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_non_existing>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/commands_test.py::TestCommands::test_non_existing' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/commands_test.py::TestCommands::test_non_existing' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/commands_test.py::TestCommands::test_non_existing' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_non_existing>
            nextitem: <TestCaseFunction test>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestCommands' scope='class' baseid='test/py4lo/commands/commands_test.py::TestCommands'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestCommands' for <TestCaseFunction test_non_existing>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestCommands' scope='class' baseid='test/py4lo/commands/commands_test.py::TestCommands'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestCommands' for <TestCaseFunction test_help>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestCommands' scope='class' baseid='test/py4lo/commands/commands_test.py::TestCommands'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestCommands' for <TestCaseFunction test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_non_existing>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/commands_test.py::TestCommands::test_non_existing' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/commands_test.py::TestCommands::test_non_existing' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/commands_test.py::TestCommands::test_non_existing' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/commands/commands_test.py::TestCommands::test_non_existing
            location: ('test/py4lo/commands/commands_test.py', 32, 'TestCommands.test_non_existing')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test>
          nextitem: <TestCaseFunction test_with_command>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/commands/debug_command_test.py::TestDebugCommand::test
            location: ('test/py4lo/commands/debug_command_test.py', 29, 'TestDebugCommand.test')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestDebugCommand' scope='class' baseid='test/py4lo/commands/debug_command_test.py::TestDebugCommand'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestDebugCommand' for <TestCaseFunction test>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/debug_command_test.py::TestDebugCommand::test' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/debug_command_test.py::TestDebugCommand::test' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/debug_command_test.py::TestDebugCommand::test' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/debug_command_test.py::TestDebugCommand::test' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/debug_command_test.py::TestDebugCommand::test' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/debug_command_test.py::TestDebugCommand::test' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test>
            nextitem: <TestCaseFunction test_with_command>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestDebugCommand' scope='class' baseid='test/py4lo/commands/debug_command_test.py::TestDebugCommand'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestDebugCommand' for <TestCaseFunction test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/debug_command_test.py::TestDebugCommand::test' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/debug_command_test.py::TestDebugCommand::test' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/debug_command_test.py::TestDebugCommand::test' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/commands/debug_command_test.py::TestDebugCommand::test
            location: ('test/py4lo/commands/debug_command_test.py', 29, 'TestDebugCommand.test')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_with_command>
          nextitem: <TestCaseFunction test_with_grabage>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/commands/help_command_test.py::TestHelpCommand::test_with_command
            location: ('test/py4lo/commands/help_command_test.py', 37, 'TestHelpCommand.test_with_command')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_with_command>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestHelpCommand' scope='class' baseid='test/py4lo/commands/help_command_test.py::TestHelpCommand'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestHelpCommand' for <TestCaseFunction test_with_command>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_with_command>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/help_command_test.py::TestHelpCommand::test_with_command' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/help_command_test.py::TestHelpCommand::test_with_command' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/help_command_test.py::TestHelpCommand::test_with_command' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_with_command>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_with_command>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/help_command_test.py::TestHelpCommand::test_with_command' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/help_command_test.py::TestHelpCommand::test_with_command' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/help_command_test.py::TestHelpCommand::test_with_command' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_with_command>
            nextitem: <TestCaseFunction test_with_grabage>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_with_command>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/help_command_test.py::TestHelpCommand::test_with_command' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/help_command_test.py::TestHelpCommand::test_with_command' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/help_command_test.py::TestHelpCommand::test_with_command' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/commands/help_command_test.py::TestHelpCommand::test_with_command
            location: ('test/py4lo/commands/help_command_test.py', 37, 'TestHelpCommand.test_with_command')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_with_grabage>
          nextitem: <TestCaseFunction test_without_command>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/commands/help_command_test.py::TestHelpCommand::test_with_grabage
            location: ('test/py4lo/commands/help_command_test.py', 45, 'TestHelpCommand.test_with_grabage')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_with_grabage>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_with_grabage>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/help_command_test.py::TestHelpCommand::test_with_grabage' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/help_command_test.py::TestHelpCommand::test_with_grabage' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/help_command_test.py::TestHelpCommand::test_with_grabage' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_with_grabage>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_with_grabage>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/help_command_test.py::TestHelpCommand::test_with_grabage' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/help_command_test.py::TestHelpCommand::test_with_grabage' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/help_command_test.py::TestHelpCommand::test_with_grabage' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_with_grabage>
            nextitem: <TestCaseFunction test_without_command>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_with_grabage>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/help_command_test.py::TestHelpCommand::test_with_grabage' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/help_command_test.py::TestHelpCommand::test_with_grabage' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/help_command_test.py::TestHelpCommand::test_with_grabage' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/commands/help_command_test.py::TestHelpCommand::test_with_grabage
            location: ('test/py4lo/commands/help_command_test.py', 45, 'TestHelpCommand.test_with_grabage')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_without_command>
          nextitem: <TestCaseFunction test>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/commands/help_command_test.py::TestHelpCommand::test_without_command
            location: ('test/py4lo/commands/help_command_test.py', 29, 'TestHelpCommand.test_without_command')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_without_command>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_without_command>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/help_command_test.py::TestHelpCommand::test_without_command' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/help_command_test.py::TestHelpCommand::test_without_command' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/help_command_test.py::TestHelpCommand::test_without_command' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_without_command>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_without_command>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/help_command_test.py::TestHelpCommand::test_without_command' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/help_command_test.py::TestHelpCommand::test_without_command' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/help_command_test.py::TestHelpCommand::test_without_command' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_without_command>
            nextitem: <TestCaseFunction test>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestHelpCommand' scope='class' baseid='test/py4lo/commands/help_command_test.py::TestHelpCommand'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestHelpCommand' for <TestCaseFunction test_without_command>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestHelpCommand' scope='class' baseid='test/py4lo/commands/help_command_test.py::TestHelpCommand'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestHelpCommand' for <TestCaseFunction test_with_grabage>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestHelpCommand' scope='class' baseid='test/py4lo/commands/help_command_test.py::TestHelpCommand'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestHelpCommand' for <TestCaseFunction test_with_command>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_without_command>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/help_command_test.py::TestHelpCommand::test_without_command' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/help_command_test.py::TestHelpCommand::test_without_command' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/help_command_test.py::TestHelpCommand::test_without_command' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/commands/help_command_test.py::TestHelpCommand::test_without_command
            location: ('test/py4lo/commands/help_command_test.py', 29, 'TestHelpCommand.test_without_command')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test>
          nextitem: <TestCaseFunction test_assets>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/commands/init_command_test.py::TestInitCommand::test
            location: ('test/py4lo/commands/init_command_test.py', 25, 'TestInitCommand.test')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestInitCommand' scope='class' baseid='test/py4lo/commands/init_command_test.py::TestInitCommand'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestInitCommand' for <TestCaseFunction test>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/init_command_test.py::TestInitCommand::test' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/init_command_test.py::TestInitCommand::test' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/init_command_test.py::TestInitCommand::test' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/init_command_test.py::TestInitCommand::test' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/init_command_test.py::TestInitCommand::test' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/init_command_test.py::TestInitCommand::test' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test>
            nextitem: <TestCaseFunction test_assets>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestInitCommand' scope='class' baseid='test/py4lo/commands/init_command_test.py::TestInitCommand'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestInitCommand' for <TestCaseFunction test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/init_command_test.py::TestInitCommand::test' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/init_command_test.py::TestInitCommand::test' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/init_command_test.py::TestInitCommand::test' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/commands/init_command_test.py::TestInitCommand::test
            location: ('test/py4lo/commands/init_command_test.py', 25, 'TestInitCommand.test')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_assets>
          nextitem: <TestCaseFunction test_destination_scripts>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/commands/ods_updater_test.py::TestOdsUpdaterHelper::test_assets
            location: ('test/py4lo/commands/ods_updater_test.py', 31, 'TestOdsUpdaterHelper.test_assets')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_assets>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestOdsUpdaterHelper' scope='class' baseid='test/py4lo/commands/ods_updater_test.py::TestOdsUpdaterHelper'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestOdsUpdaterHelper' for <TestCaseFunction test_assets>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_assets>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/ods_updater_test.py::TestOdsUpdaterHelper::test_assets' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/ods_updater_test.py::TestOdsUpdaterHelper::test_assets' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/ods_updater_test.py::TestOdsUpdaterHelper::test_assets' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_assets>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_assets>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/ods_updater_test.py::TestOdsUpdaterHelper::test_assets' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/ods_updater_test.py::TestOdsUpdaterHelper::test_assets' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/ods_updater_test.py::TestOdsUpdaterHelper::test_assets' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_assets>
            nextitem: <TestCaseFunction test_destination_scripts>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_assets>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/ods_updater_test.py::TestOdsUpdaterHelper::test_assets' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/ods_updater_test.py::TestOdsUpdaterHelper::test_assets' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/ods_updater_test.py::TestOdsUpdaterHelper::test_assets' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/commands/ods_updater_test.py::TestOdsUpdaterHelper::test_assets
            location: ('test/py4lo/commands/ods_updater_test.py', 31, 'TestOdsUpdaterHelper.test_assets')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_destination_scripts>
          nextitem: <TestCaseFunction test>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/commands/ods_updater_test.py::TestOdsUpdaterHelper::test_destination_scripts
            location: ('test/py4lo/commands/ods_updater_test.py', 53, 'TestOdsUpdaterHelper.test_destination_scripts')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_destination_scripts>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_destination_scripts>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/ods_updater_test.py::TestOdsUpdaterHelper::test_destination_scripts' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/ods_updater_test.py::TestOdsUpdaterHelper::test_destination_scripts' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/ods_updater_test.py::TestOdsUpdaterHelper::test_destination_scripts' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_destination_scripts>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_destination_scripts>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/ods_updater_test.py::TestOdsUpdaterHelper::test_destination_scripts' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/ods_updater_test.py::TestOdsUpdaterHelper::test_destination_scripts' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/ods_updater_test.py::TestOdsUpdaterHelper::test_destination_scripts' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_destination_scripts>
            nextitem: <TestCaseFunction test>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestOdsUpdaterHelper' scope='class' baseid='test/py4lo/commands/ods_updater_test.py::TestOdsUpdaterHelper'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestOdsUpdaterHelper' for <TestCaseFunction test_destination_scripts>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestOdsUpdaterHelper' scope='class' baseid='test/py4lo/commands/ods_updater_test.py::TestOdsUpdaterHelper'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestOdsUpdaterHelper' for <TestCaseFunction test_assets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_destination_scripts>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/ods_updater_test.py::TestOdsUpdaterHelper::test_destination_scripts' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/ods_updater_test.py::TestOdsUpdaterHelper::test_destination_scripts' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/ods_updater_test.py::TestOdsUpdaterHelper::test_destination_scripts' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/commands/ods_updater_test.py::TestOdsUpdaterHelper::test_destination_scripts
            location: ('test/py4lo/commands/ods_updater_test.py', 53, 'TestOdsUpdaterHelper.test_destination_scripts')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test>
          nextitem: <TestCaseFunction test_create>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/commands/run_command_test.py::TestRunCommand::test
            location: ('test/py4lo/commands/run_command_test.py', 46, 'TestRunCommand.test')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestRunCommand' scope='class' baseid='test/py4lo/commands/run_command_test.py::TestRunCommand'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestRunCommand' for <TestCaseFunction test>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/run_command_test.py::TestRunCommand::test' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/run_command_test.py::TestRunCommand::test' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/run_command_test.py::TestRunCommand::test' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/run_command_test.py::TestRunCommand::test' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/run_command_test.py::TestRunCommand::test' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/run_command_test.py::TestRunCommand::test' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test>
            nextitem: <TestCaseFunction test_create>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/run_command_test.py::TestRunCommand::test' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/run_command_test.py::TestRunCommand::test' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/run_command_test.py::TestRunCommand::test' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/commands/run_command_test.py::TestRunCommand::test
            location: ('test/py4lo/commands/run_command_test.py', 46, 'TestRunCommand.test')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_create>
          nextitem: <TestCaseFunction test_with_empty_tdata>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/commands/run_command_test.py::TestRunCommand::test_create
            location: ('test/py4lo/commands/run_command_test.py', 33, 'TestRunCommand.test_create')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_create>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/run_command_test.py::TestRunCommand::test_create' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/run_command_test.py::TestRunCommand::test_create' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/run_command_test.py::TestRunCommand::test_create' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_create>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/run_command_test.py::TestRunCommand::test_create' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/run_command_test.py::TestRunCommand::test_create' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/run_command_test.py::TestRunCommand::test_create' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_create>
            nextitem: <TestCaseFunction test_with_empty_tdata>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_create>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/run_command_test.py::TestRunCommand::test_create' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/run_command_test.py::TestRunCommand::test_create' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/run_command_test.py::TestRunCommand::test_create' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/commands/run_command_test.py::TestRunCommand::test_create
            location: ('test/py4lo/commands/run_command_test.py', 33, 'TestRunCommand.test_create')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_with_empty_tdata>
          nextitem: <TestCaseFunction test>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/commands/run_command_test.py::TestRunCommand::test_with_empty_tdata
            location: ('test/py4lo/commands/run_command_test.py', 29, 'TestRunCommand.test_with_empty_tdata')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_with_empty_tdata>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_with_empty_tdata>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/run_command_test.py::TestRunCommand::test_with_empty_tdata' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/run_command_test.py::TestRunCommand::test_with_empty_tdata' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/run_command_test.py::TestRunCommand::test_with_empty_tdata' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_with_empty_tdata>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_with_empty_tdata>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/run_command_test.py::TestRunCommand::test_with_empty_tdata' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/run_command_test.py::TestRunCommand::test_with_empty_tdata' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/run_command_test.py::TestRunCommand::test_with_empty_tdata' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_with_empty_tdata>
            nextitem: <TestCaseFunction test>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestRunCommand' scope='class' baseid='test/py4lo/commands/run_command_test.py::TestRunCommand'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestRunCommand' for <TestCaseFunction test_with_empty_tdata>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestRunCommand' scope='class' baseid='test/py4lo/commands/run_command_test.py::TestRunCommand'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestRunCommand' for <TestCaseFunction test_create>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestRunCommand' scope='class' baseid='test/py4lo/commands/run_command_test.py::TestRunCommand'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestRunCommand' for <TestCaseFunction test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_with_empty_tdata>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/run_command_test.py::TestRunCommand::test_with_empty_tdata' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/run_command_test.py::TestRunCommand::test_with_empty_tdata' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/run_command_test.py::TestRunCommand::test_with_empty_tdata' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/commands/run_command_test.py::TestRunCommand::test_with_empty_tdata
            location: ('test/py4lo/commands/run_command_test.py', 29, 'TestRunCommand.test_with_empty_tdata')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test>
          nextitem: <TestCaseFunction test_execute>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/commands/test_command_test.py::TestCommandTest::test
            location: ('test/py4lo/commands/test_command_test.py', 29, 'TestCommandTest.test')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestCommandTest' scope='class' baseid='test/py4lo/commands/test_command_test.py::TestCommandTest'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestCommandTest' for <TestCaseFunction test>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/test_command_test.py::TestCommandTest::test' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/test_command_test.py::TestCommandTest::test' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/test_command_test.py::TestCommandTest::test' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/test_command_test.py::TestCommandTest::test' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/test_command_test.py::TestCommandTest::test' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/test_command_test.py::TestCommandTest::test' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test>
            nextitem: <TestCaseFunction test_execute>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestCommandTest' scope='class' baseid='test/py4lo/commands/test_command_test.py::TestCommandTest'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestCommandTest' for <TestCaseFunction test>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/test_command_test.py::TestCommandTest::test' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/test_command_test.py::TestCommandTest::test' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/test_command_test.py::TestCommandTest::test' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/commands/test_command_test.py::TestCommandTest::test
            location: ('test/py4lo/commands/test_command_test.py', 29, 'TestCommandTest.test')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_execute>
          nextitem: <TestCaseFunction test_get_paths>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/commands/update_command_test.py::TestUpdateCommand::test_execute
            location: ('test/py4lo/commands/update_command_test.py', 29, 'TestUpdateCommand.test_execute')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_execute>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestUpdateCommand' scope='class' baseid='test/py4lo/commands/update_command_test.py::TestUpdateCommand'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestUpdateCommand' for <TestCaseFunction test_execute>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_execute>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/update_command_test.py::TestUpdateCommand::test_execute' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/update_command_test.py::TestUpdateCommand::test_execute' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/update_command_test.py::TestUpdateCommand::test_execute' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_execute>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_execute>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/update_command_test.py::TestUpdateCommand::test_execute' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/update_command_test.py::TestUpdateCommand::test_execute' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/update_command_test.py::TestUpdateCommand::test_execute' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_execute>
            nextitem: <TestCaseFunction test_get_paths>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestUpdateCommand' scope='class' baseid='test/py4lo/commands/update_command_test.py::TestUpdateCommand'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestUpdateCommand' for <TestCaseFunction test_execute>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_execute>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/commands/update_command_test.py::TestUpdateCommand::test_execute' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/commands/update_command_test.py::TestUpdateCommand::test_execute' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/commands/update_command_test.py::TestUpdateCommand::test_execute' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/commands/update_command_test.py::TestUpdateCommand::test_execute
            location: ('test/py4lo/commands/update_command_test.py', 29, 'TestUpdateCommand.test_execute')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_get_paths>
          nextitem: <TestCaseFunction test_provider>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/core/properties_test.py::TestProperties::test_get_paths
            location: ('test/py4lo/core/properties_test.py', 79, 'TestProperties.test_get_paths')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_get_paths>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestProperties' scope='class' baseid='test/py4lo/core/properties_test.py::TestProperties'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestProperties' for <TestCaseFunction test_get_paths>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_paths>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_get_paths' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_get_paths' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_get_paths' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_get_paths>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_paths>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_get_paths' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_get_paths' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_get_paths' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_get_paths>
            nextitem: <TestCaseFunction test_provider>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_get_paths>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_get_paths' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_get_paths' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_get_paths' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/core/properties_test.py::TestProperties::test_get_paths
            location: ('test/py4lo/core/properties_test.py', 79, 'TestProperties.test_get_paths')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_provider>
          nextitem: <TestCaseFunction test_provider_factory>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/core/properties_test.py::TestProperties::test_provider
            location: ('test/py4lo/core/properties_test.py', 45, 'TestProperties.test_provider')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_provider>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_provider>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_provider' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_provider' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_provider' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_provider>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_provider>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_provider' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_provider' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_provider' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_provider>
            nextitem: <TestCaseFunction test_provider_factory>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_provider>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_provider' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_provider' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_provider' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/core/properties_test.py::TestProperties::test_provider
            location: ('test/py4lo/core/properties_test.py', 45, 'TestProperties.test_provider')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_provider_factory>
          nextitem: <TestCaseFunction test_readme>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/core/properties_test.py::TestProperties::test_provider_factory
            location: ('test/py4lo/core/properties_test.py', 27, 'TestProperties.test_provider_factory')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_provider_factory>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_provider_factory>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_provider_factory' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_provider_factory' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_provider_factory' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_provider_factory>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_provider_factory>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_provider_factory' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_provider_factory' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_provider_factory' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_provider_factory>
            nextitem: <TestCaseFunction test_readme>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_provider_factory>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_provider_factory' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_provider_factory' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_provider_factory' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/core/properties_test.py::TestProperties::test_provider_factory
            location: ('test/py4lo/core/properties_test.py', 27, 'TestProperties.test_provider_factory')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_readme>
          nextitem: <TestCaseFunction test_destinations_assets>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/core/properties_test.py::TestProperties::test_readme
            location: ('test/py4lo/core/properties_test.py', 63, 'TestProperties.test_readme')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_readme>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_readme>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_readme' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_readme' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_readme' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_readme>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_readme>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_readme' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_readme' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_readme' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_readme>
            nextitem: <TestCaseFunction test_destinations_assets>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestProperties' scope='class' baseid='test/py4lo/core/properties_test.py::TestProperties'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestProperties' for <TestCaseFunction test_readme>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestProperties' scope='class' baseid='test/py4lo/core/properties_test.py::TestProperties'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestProperties' for <TestCaseFunction test_provider_factory>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestProperties' scope='class' baseid='test/py4lo/core/properties_test.py::TestProperties'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestProperties' for <TestCaseFunction test_provider>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestProperties' scope='class' baseid='test/py4lo/core/properties_test.py::TestProperties'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestProperties' for <TestCaseFunction test_get_paths>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_readme>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_readme' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_readme' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/core/properties_test.py::TestProperties::test_readme' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/core/properties_test.py::TestProperties::test_readme
            location: ('test/py4lo/core/properties_test.py', 63, 'TestProperties.test_readme')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_destinations_assets>
          nextitem: <TestCaseFunction test_destinations_scripts>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/core/source_dest_test.py::TestSourcesDests::test_destinations_assets
            location: ('test/py4lo/core/source_dest_test.py', 70, 'TestSourcesDests.test_destinations_assets')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_destinations_assets>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestSourcesDests' scope='class' baseid='test/py4lo/core/source_dest_test.py::TestSourcesDests'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestSourcesDests' for <TestCaseFunction test_destinations_assets>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_destinations_assets>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_destinations_assets' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_destinations_assets' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_destinations_assets' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_destinations_assets>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_destinations_assets>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_destinations_assets' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_destinations_assets' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_destinations_assets' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_destinations_assets>
            nextitem: <TestCaseFunction test_destinations_scripts>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_destinations_assets>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_destinations_assets' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_destinations_assets' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_destinations_assets' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/core/source_dest_test.py::TestSourcesDests::test_destinations_assets
            location: ('test/py4lo/core/source_dest_test.py', 70, 'TestSourcesDests.test_destinations_assets')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_destinations_scripts>
          nextitem: <TestCaseFunction test_sources_assets>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/core/source_dest_test.py::TestSourcesDests::test_destinations_scripts
            location: ('test/py4lo/core/source_dest_test.py', 62, 'TestSourcesDests.test_destinations_scripts')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_destinations_scripts>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_destinations_scripts>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_destinations_scripts' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_destinations_scripts' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_destinations_scripts' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_destinations_scripts>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_destinations_scripts>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_destinations_scripts' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_destinations_scripts' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_destinations_scripts' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_destinations_scripts>
            nextitem: <TestCaseFunction test_sources_assets>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_destinations_scripts>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_destinations_scripts' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_destinations_scripts' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_destinations_scripts' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/core/source_dest_test.py::TestSourcesDests::test_destinations_scripts
            location: ('test/py4lo/core/source_dest_test.py', 62, 'TestSourcesDests.test_destinations_scripts')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_sources_assets>
          nextitem: <TestCaseFunction test_sources_scripts>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_assets
            location: ('test/py4lo/core/source_dest_test.py', 43, 'TestSourcesDests.test_sources_assets')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_sources_assets>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_sources_assets>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_assets' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_assets' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_assets' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_sources_assets>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_sources_assets>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_assets' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_assets' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_assets' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_sources_assets>
            nextitem: <TestCaseFunction test_sources_scripts>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_sources_assets>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_assets' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_assets' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_assets' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_assets
            location: ('test/py4lo/core/source_dest_test.py', 43, 'TestSourcesDests.test_sources_assets')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_sources_scripts>
          nextitem: <TestCaseFunction test_sources_src>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_scripts
            location: ('test/py4lo/core/source_dest_test.py', 52, 'TestSourcesDests.test_sources_scripts')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_sources_scripts>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_sources_scripts>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_scripts' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_scripts' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_scripts' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_sources_scripts>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_sources_scripts>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_scripts' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_scripts' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_scripts' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_sources_scripts>
            nextitem: <TestCaseFunction test_sources_src>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_sources_scripts>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_scripts' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_scripts' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_scripts' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_scripts
            location: ('test/py4lo/core/source_dest_test.py', 52, 'TestSourcesDests.test_sources_scripts')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_sources_src>
          nextitem: <TestCaseFunction test_execute>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_src
            location: ('test/py4lo/core/source_dest_test.py', 36, 'TestSourcesDests.test_sources_src')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_sources_src>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_sources_src>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_src' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_src' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_src' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_sources_src>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_sources_src>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_src' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_src' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_src' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_sources_src>
            nextitem: <TestCaseFunction test_execute>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestSourcesDests' scope='class' baseid='test/py4lo/core/source_dest_test.py::TestSourcesDests'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestSourcesDests' for <TestCaseFunction test_sources_src>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestSourcesDests' scope='class' baseid='test/py4lo/core/source_dest_test.py::TestSourcesDests'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestSourcesDests' for <TestCaseFunction test_sources_scripts>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestSourcesDests' scope='class' baseid='test/py4lo/core/source_dest_test.py::TestSourcesDests'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestSourcesDests' for <TestCaseFunction test_sources_assets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestSourcesDests' scope='class' baseid='test/py4lo/core/source_dest_test.py::TestSourcesDests'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestSourcesDests' for <TestCaseFunction test_destinations_scripts>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestSourcesDests' scope='class' baseid='test/py4lo/core/source_dest_test.py::TestSourcesDests'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestSourcesDests' for <TestCaseFunction test_destinations_assets>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_sources_src>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_src' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_src' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_src' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/core/source_dest_test.py::TestSourcesDests::test_sources_src
            location: ('test/py4lo/core/source_dest_test.py', 36, 'TestSourcesDests.test_sources_src')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_execute>
          nextitem: <TestCaseFunction test_sig_elements>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/directives/embed_lib_test.py::TestEmbedLib::test_execute
            location: ('test/py4lo/directives/embed_lib_test.py', 34, 'TestEmbedLib.test_execute')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_execute>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestEmbedLib' scope='class' baseid='test/py4lo/directives/embed_lib_test.py::TestEmbedLib'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestEmbedLib' for <TestCaseFunction test_execute>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_execute>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directives/embed_lib_test.py::TestEmbedLib::test_execute' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directives/embed_lib_test.py::TestEmbedLib::test_execute' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directives/embed_lib_test.py::TestEmbedLib::test_execute' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_execute>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_execute>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directives/embed_lib_test.py::TestEmbedLib::test_execute' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directives/embed_lib_test.py::TestEmbedLib::test_execute' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directives/embed_lib_test.py::TestEmbedLib::test_execute' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_execute>
            nextitem: <TestCaseFunction test_sig_elements>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_execute>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directives/embed_lib_test.py::TestEmbedLib::test_execute' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directives/embed_lib_test.py::TestEmbedLib::test_execute' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directives/embed_lib_test.py::TestEmbedLib::test_execute' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/directives/embed_lib_test.py::TestEmbedLib::test_execute
            location: ('test/py4lo/directives/embed_lib_test.py', 34, 'TestEmbedLib.test_execute')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_sig_elements>
          nextitem: <TestCaseFunction test_execute>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/directives/embed_lib_test.py::TestEmbedLib::test_sig_elements
            location: ('test/py4lo/directives/embed_lib_test.py', 31, 'TestEmbedLib.test_sig_elements')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_sig_elements>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_sig_elements>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directives/embed_lib_test.py::TestEmbedLib::test_sig_elements' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directives/embed_lib_test.py::TestEmbedLib::test_sig_elements' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directives/embed_lib_test.py::TestEmbedLib::test_sig_elements' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_sig_elements>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_sig_elements>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directives/embed_lib_test.py::TestEmbedLib::test_sig_elements' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directives/embed_lib_test.py::TestEmbedLib::test_sig_elements' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directives/embed_lib_test.py::TestEmbedLib::test_sig_elements' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_sig_elements>
            nextitem: <TestCaseFunction test_execute>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestEmbedLib' scope='class' baseid='test/py4lo/directives/embed_lib_test.py::TestEmbedLib'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestEmbedLib' for <TestCaseFunction test_sig_elements>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestEmbedLib' scope='class' baseid='test/py4lo/directives/embed_lib_test.py::TestEmbedLib'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestEmbedLib' for <TestCaseFunction test_execute>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_sig_elements>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directives/embed_lib_test.py::TestEmbedLib::test_sig_elements' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directives/embed_lib_test.py::TestEmbedLib::test_sig_elements' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directives/embed_lib_test.py::TestEmbedLib::test_sig_elements' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/directives/embed_lib_test.py::TestEmbedLib::test_sig_elements
            location: ('test/py4lo/directives/embed_lib_test.py', 31, 'TestEmbedLib.test_sig_elements')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_execute>
          nextitem: <TestCaseFunction test_sig_elements>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/directives/embed_script_test.py::TestEmbed::test_execute
            location: ('test/py4lo/directives/embed_script_test.py', 36, 'TestEmbed.test_execute')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_execute>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestEmbed' scope='class' baseid='test/py4lo/directives/embed_script_test.py::TestEmbed'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestEmbed' for <TestCaseFunction test_execute>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_execute>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directives/embed_script_test.py::TestEmbed::test_execute' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directives/embed_script_test.py::TestEmbed::test_execute' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directives/embed_script_test.py::TestEmbed::test_execute' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_execute>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_execute>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directives/embed_script_test.py::TestEmbed::test_execute' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directives/embed_script_test.py::TestEmbed::test_execute' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directives/embed_script_test.py::TestEmbed::test_execute' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_execute>
            nextitem: <TestCaseFunction test_sig_elements>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_execute>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directives/embed_script_test.py::TestEmbed::test_execute' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directives/embed_script_test.py::TestEmbed::test_execute' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directives/embed_script_test.py::TestEmbed::test_execute' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/directives/embed_script_test.py::TestEmbed::test_execute
            location: ('test/py4lo/directives/embed_script_test.py', 36, 'TestEmbed.test_execute')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_sig_elements>
          nextitem: <TestCaseFunction test_with_strip>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/directives/embed_script_test.py::TestEmbed::test_sig_elements
            location: ('test/py4lo/directives/embed_script_test.py', 33, 'TestEmbed.test_sig_elements')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_sig_elements>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_sig_elements>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directives/embed_script_test.py::TestEmbed::test_sig_elements' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directives/embed_script_test.py::TestEmbed::test_sig_elements' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directives/embed_script_test.py::TestEmbed::test_sig_elements' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_sig_elements>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_sig_elements>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directives/embed_script_test.py::TestEmbed::test_sig_elements' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directives/embed_script_test.py::TestEmbed::test_sig_elements' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directives/embed_script_test.py::TestEmbed::test_sig_elements' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_sig_elements>
            nextitem: <TestCaseFunction test_with_strip>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestEmbed' scope='class' baseid='test/py4lo/directives/embed_script_test.py::TestEmbed'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestEmbed' for <TestCaseFunction test_sig_elements>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestEmbed' scope='class' baseid='test/py4lo/directives/embed_script_test.py::TestEmbed'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestEmbed' for <TestCaseFunction test_execute>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_sig_elements>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directives/embed_script_test.py::TestEmbed::test_sig_elements' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directives/embed_script_test.py::TestEmbed::test_sig_elements' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directives/embed_script_test.py::TestEmbed::test_sig_elements' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/directives/embed_script_test.py::TestEmbed::test_sig_elements
            location: ('test/py4lo/directives/embed_script_test.py', 33, 'TestEmbed.test_sig_elements')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_with_strip>
          nextitem: <TestCaseFunction test_without_strip>
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/directives/include_test.py::TestInclude::test_with_strip
            location: ('test/py4lo/directives/include_test.py', 44, 'TestInclude.test_with_strip')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_with_strip>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestInclude' scope='class' baseid='test/py4lo/directives/include_test.py::TestInclude'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestInclude' for <TestCaseFunction test_with_strip>>
          finish pytest_fixture_setup --> None [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_with_strip>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directives/include_test.py::TestInclude::test_with_strip' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directives/include_test.py::TestInclude::test_with_strip' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directives/include_test.py::TestInclude::test_with_strip' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_with_strip>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_with_strip>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directives/include_test.py::TestInclude::test_with_strip' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directives/include_test.py::TestInclude::test_with_strip' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directives/include_test.py::TestInclude::test_with_strip' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_with_strip>
            nextitem: <TestCaseFunction test_without_strip>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_with_strip>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directives/include_test.py::TestInclude::test_with_strip' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directives/include_test.py::TestInclude::test_with_strip' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directives/include_test.py::TestInclude::test_with_strip' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/directives/include_test.py::TestInclude::test_with_strip
            location: ('test/py4lo/directives/include_test.py', 44, 'TestInclude.test_with_strip')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <TestCaseFunction test_without_strip>
          nextitem: None
        pytest_runtest_logstart [hook]
            nodeid: test/py4lo/directives/include_test.py::TestInclude::test_without_strip
            location: ('test/py4lo/directives/include_test.py', 27, 'TestInclude.test_without_strip')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <TestCaseFunction test_without_strip>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_without_strip>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directives/include_test.py::TestInclude::test_without_strip' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directives/include_test.py::TestInclude::test_without_strip' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directives/include_test.py::TestInclude::test_without_strip' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <TestCaseFunction test_without_strip>
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_without_strip>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directives/include_test.py::TestInclude::test_without_strip' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directives/include_test.py::TestInclude::test_without_strip' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directives/include_test.py::TestInclude::test_without_strip' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <TestCaseFunction test_without_strip>
            nextitem: None
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestInclude' scope='class' baseid='test/py4lo/directives/include_test.py::TestInclude'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestInclude' for <TestCaseFunction test_without_strip>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='unittest_setUpClass_fixture_TestInclude' scope='class' baseid='test/py4lo/directives/include_test.py::TestInclude'>
              request: <SubRequest 'unittest_setUpClass_fixture_TestInclude' for <TestCaseFunction test_with_strip>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <TestCaseFunction test_without_strip>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test/py4lo/directives/include_test.py::TestInclude::test_without_strip' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test/py4lo/directives/include_test.py::TestInclude::test_without_strip' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test/py4lo/directives/include_test.py::TestInclude::test_without_strip' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f6ea7780b20>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test/py4lo/directives/include_test.py::TestInclude::test_without_strip
            location: ('test/py4lo/directives/include_test.py', 27, 'TestInclude.test_without_strip')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
    finish pytest_runtestloop --> True [hook]
    pytest_sessionfinish [hook]
        session: <Session py4lo exitstatus=<ExitCode.TESTS_FAILED: 1> testsfailed=6 testscollected=286>
        exitstatus: ExitCode.TESTS_FAILED
      pytest_terminal_summary [hook]
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x7f6ea6d2cbe0>
          exitstatus: ExitCode.TESTS_FAILED
          config: <_pytest.config.Config object at 0x7f6ea7780b20>
      early skip of rewriting module: pygments [assertion]
      early skip of rewriting module: pygments.formatters [assertion]
      early skip of rewriting module: pygments.formatters._mapping [assertion]
      early skip of rewriting module: pygments.plugin [assertion]
      early skip of rewriting module: pygments.util [assertion]
      early skip of rewriting module: pygments.formatters.terminal [assertion]
      early skip of rewriting module: pygments.formatter [assertion]
      early skip of rewriting module: pygments.styles [assertion]
      early skip of rewriting module: pygments.token [assertion]
      early skip of rewriting module: pygments.console [assertion]
      early skip of rewriting module: pygments.lexers [assertion]
      early skip of rewriting module: pygments.lexers._mapping [assertion]
      early skip of rewriting module: pygments.modeline [assertion]
      early skip of rewriting module: pygments.lexers.python [assertion]
      early skip of rewriting module: pygments.lexer [assertion]
      early skip of rewriting module: pygments.filter [assertion]
      early skip of rewriting module: pygments.filters [assertion]
      early skip of rewriting module: pygments.regexopt [assertion]
      early skip of rewriting module: pygments.unistring [assertion]
      early skip of rewriting module: pygments.styles.default [assertion]
      early skip of rewriting module: pygments.style [assertion]
        pytest_report_teststatus [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_multiple' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_file_dialog_single_no_filter' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_folder_dialog' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_message_box' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'test/lib/test_py4lo_dialogs.py::Py4LODialogsTestCase::test_message_box_parent_win' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f6ea7780b20>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x7f6ea7780b20>
    finish pytest_unconfigure --> [] [hook]
